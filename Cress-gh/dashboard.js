!function(e){var t={};function n(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(i,r,function(t){return e[t]}.bind(null,r));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=381)}([,,,function(e,t,n){"use strict";(function(e){n.d(t,"e",(function(){return i})),n.d(t,"p",(function(){return r})),n.d(t,"a",(function(){return o})),n.d(t,"c",(function(){return a})),n.d(t,"d",(function(){return c})),n.d(t,"o",(function(){return s})),n.d(t,"q",(function(){return u})),n.d(t,"t",(function(){return d})),n.d(t,"i",(function(){return l})),n.d(t,"r",(function(){return f})),n.d(t,"s",(function(){return h})),n.d(t,"k",(function(){return p})),n.d(t,"m",(function(){return g})),n.d(t,"j",(function(){return m})),n.d(t,"l",(function(){return y})),n.d(t,"g",(function(){return b})),n.d(t,"f",(function(){return v})),n.d(t,"h",(function(){return _})),n.d(t,"n",(function(){return x})),n.d(t,"b",(function(){return D}));var i="1.13.6",r="object"==typeof self&&self.self===self&&self||"object"==typeof e&&e.global===e&&e||Function("return this")()||{},o=Array.prototype,a=Object.prototype,c="undefined"!=typeof Symbol?Symbol.prototype:null,s=o.push,u=o.slice,d=a.toString,l=a.hasOwnProperty,f="undefined"!=typeof ArrayBuffer,h="undefined"!=typeof DataView,p=Array.isArray,g=Object.keys,m=Object.create,y=f&&ArrayBuffer.isView,b=isNaN,v=isFinite,_=!{toString:null}.propertyIsEnumerable("toString"),x=["valueOf","isPrototypeOf","toString","propertyIsEnumerable","hasOwnProperty","toLocaleString"],D=Math.pow(2,53)-1}).call(this,n(9))},,function(e,t,n){"use strict";(function(t,i){var r=n(40),o="undefined"==typeof navigator,a={e:{}},c,s="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==t?t:void 0!==this?this:null;function u(){try{var e=c;return c=null,e.apply(this,arguments)}catch(e){return a.e=e,a}}function d(e){return c=e,u}var l=function(e,t){var n={}.hasOwnProperty;function i(){for(var i in this.constructor=e,this.constructor$=t,t.prototype)n.call(t.prototype,i)&&"$"!==i.charAt(i.length-1)&&(this[i+"$"]=t.prototype[i])}return i.prototype=t.prototype,e.prototype=new i,e.prototype};function f(e){return null==e||!0===e||!1===e||"string"==typeof e||"number"==typeof e}function h(e){return"function"==typeof e||"object"==typeof e&&null!==e}function p(e){return f(e)?new Error(E(e)):e}function g(e,t){var n,i=e.length,r=new Array(i+1);for(n=0;n<i;++n)r[n]=e[n];return r[n]=t,r}function m(e,t,n){if(!r.isES5)return{}.hasOwnProperty.call(e,t)?e[t]:void 0;var i=Object.getOwnPropertyDescriptor(e,t);return null!=i?null==i.get&&null==i.set?i.value:n:void 0}function y(e,t,n){if(f(e))return e;var i={value:n,configurable:!0,enumerable:!1,writable:!0};return r.defineProperty(e,t,i),e}function b(e){throw e}var v=function(){var e=[Array.prototype,Object.prototype,Function.prototype],t=function(t){for(var n=0;n<e.length;++n)if(e[n]===t)return!0;return!1};if(r.isES5){var n=Object.getOwnPropertyNames;return function(e){for(var i=[],o=Object.create(null);null!=e&&!t(e);){var a;try{a=n(e)}catch(e){return i}for(var c=0;c<a.length;++c){var s=a[c];if(!o[s]){o[s]=!0;var u=Object.getOwnPropertyDescriptor(e,s);null!=u&&null==u.get&&null==u.set&&i.push(s)}}e=r.getPrototypeOf(e)}return i}}var i={}.hasOwnProperty;return function(n){if(t(n))return[];var r=[];e:for(var o in n)if(i.call(n,o))r.push(o);else{for(var a=0;a<e.length;++a)if(i.call(e[a],o))continue e;r.push(o)}return r}}(),_=/this\s*\.\s*\S+\s*=/;function x(e){try{if("function"==typeof e){var t=r.names(e.prototype),n=r.isES5&&t.length>1,i=t.length>0&&!(1===t.length&&"constructor"===t[0]),o=_.test(e+"")&&r.names(e).length>0;if(n||i||o)return!0}return!1}catch(e){return!1}}function D(e){function t(){}t.prototype=e;for(var n=8;n--;)new t;return e}var w=/^[a-z$_][a-z$_0-9]*$/i;function U(e){return w.test(e)}function T(e,t,n){for(var i=new Array(e),r=0;r<e;++r)i[r]=t+r+n;return i}function E(e){try{return e+""}catch(e){return"[no string representation]"}}function k(e){return null!==e&&"object"==typeof e&&"string"==typeof e.message&&"string"==typeof e.name}function C(e){try{y(e,"isOperational",!0)}catch(e){}}function S(e){return null!=e&&(e instanceof Error.__BluebirdErrorTypes__.OperationalError||!0===e.isOperational)}function F(e){return k(e)&&r.propertyIsWritable(e,"stack")}var A="stack"in new Error?function(e){return F(e)?e:new Error(E(e))}:function(e){if(F(e))return e;try{throw new Error(E(e))}catch(e){return e}};function O(e){return{}.toString.call(e)}function W(e,t,n){for(var i=r.names(e),o=0;o<i.length;++o){var a=i[o];if(n(a))try{r.defineProperty(t,a,r.getDescriptor(e,a))}catch(e){}}}var B=function(e){return r.isArray(e)?e:null};if("undefined"!=typeof Symbol&&Symbol.iterator){var I="function"==typeof Array.from?function(e){return Array.from(e)}:function(e){for(var t,n=[],i=e[Symbol.iterator]();!(t=i.next()).done;)n.push(t.value);return n};B=function(e){return r.isArray(e)?e:null!=e&&"function"==typeof e[Symbol.iterator]?I(e):null}}var N=void 0!==i&&"[object process]"===O(i).toLowerCase(),L=void 0!==i&&void 0!==i.env;function R(e){return L?i.env[e]:void 0}function P(){if("function"==typeof Promise)try{var e=new Promise((function(){}));if("[object Promise]"==={}.toString.call(e))return Promise}catch(e){}}function j(e,t){return e.bind(t)}var q={isClass:x,isIdentifier:U,inheritedDataKeys:v,getDataPropertyOrDefault:m,thrower:b,isArray:r.isArray,asArray:B,notEnumerableProp:y,isPrimitive:f,isObject:h,isError:k,canEvaluate:o,errorObj:a,tryCatch:d,inherits:l,withAppended:g,maybeWrapAsError:p,toFastProperties:D,filledRange:T,toString:E,canAttachTrace:F,ensureErrorObject:A,originatesFromRejection:S,markAsOriginatingFromRejection:C,classString:O,copyDescriptors:W,hasDevTools:"undefined"!=typeof chrome&&chrome&&"function"==typeof chrome.loadTimes,isNode:N,hasEnvVariables:L,env:R,global:s,getNativePromise:P,domainBind:j},M;q.isRecentNode=q.isNode&&(M=i.versions.node.split(".").map(Number),0===M[0]&&M[1]>10||M[0]>0),q.isNode&&q.toFastProperties(i);try{throw new Error}catch(e){q.lastLineError=e}e.exports=q}).call(this,n(9),n(18))},function(e,t,n){"use strict";var i,r,o,a=[n(92),n(93),n(94),n(95),n(96),n(97)],c=-1,s=[],u=!1;function d(){i&&r&&(i=!1,r.length?s=r.concat(s):c=-1,s.length&&l())}function l(){if(!i){u=!1,i=!0;for(var e=s.length,t=setTimeout(d);e;){for(r=s,s=[];r&&++c<e;)r[c].run();c=-1,e=s.length}r=null,c=-1,i=!1,clearTimeout(t)}}for(var f=-1,h=a.length;++f<h;)if(a[f]&&a[f].test&&a[f].test()){o=a[f].install(l);break}function p(e,t){this.fun=e,this.array=t}p.prototype.run=function(){var e=this.fun,t=this.array;switch(t.length){case 0:return e();case 1:return e(t[0]);case 2:return e(t[0],t[1]);case 3:return e(t[0],t[1],t[2]);default:return e.apply(null,t)}},e.exports=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];s.push(new p(e,t)),u||i||(u=!0,o())}},function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return Dn})),n.d(t,"VERSION",(function(){return r.e})),n.d(t,"restArguments",(function(){return o})),n.d(t,"isObject",(function(){return a})),n.d(t,"isNull",(function(){return c})),n.d(t,"isUndefined",(function(){return s})),n.d(t,"isBoolean",(function(){return u})),n.d(t,"isElement",(function(){return d})),n.d(t,"isString",(function(){return f})),n.d(t,"isNumber",(function(){return h})),n.d(t,"isDate",(function(){return p})),n.d(t,"isRegExp",(function(){return g})),n.d(t,"isError",(function(){return m})),n.d(t,"isSymbol",(function(){return y})),n.d(t,"isArrayBuffer",(function(){return b})),n.d(t,"isDataView",(function(){return E})),n.d(t,"isArray",(function(){return k})),n.d(t,"isFunction",(function(){return x})),n.d(t,"isArguments",(function(){return F})),n.d(t,"isFinite",(function(){return A})),n.d(t,"isNaN",(function(){return O})),n.d(t,"isTypedArray",(function(){return P})),n.d(t,"isEmpty",(function(){return z})),n.d(t,"isMatch",(function(){return V})),n.d(t,"isEqual",(function(){return K})),n.d(t,"isMap",(function(){return ie})),n.d(t,"isWeakMap",(function(){return re})),n.d(t,"isSet",(function(){return oe})),n.d(t,"isWeakSet",(function(){return ae})),n.d(t,"keys",(function(){return M})),n.d(t,"allKeys",(function(){return Y})),n.d(t,"values",(function(){return ce})),n.d(t,"pairs",(function(){return se})),n.d(t,"invert",(function(){return ue})),n.d(t,"functions",(function(){return de})),n.d(t,"methods",(function(){return de})),n.d(t,"extend",(function(){return fe})),n.d(t,"extendOwn",(function(){return he})),n.d(t,"assign",(function(){return he})),n.d(t,"defaults",(function(){return pe})),n.d(t,"create",(function(){return me})),n.d(t,"clone",(function(){return ye})),n.d(t,"tap",(function(){return be})),n.d(t,"get",(function(){return De})),n.d(t,"has",(function(){return we})),n.d(t,"mapObject",(function(){return Ae})),n.d(t,"identity",(function(){return Ue})),n.d(t,"constant",(function(){return W})),n.d(t,"noop",(function(){return Oe})),n.d(t,"toPath",(function(){return ve})),n.d(t,"property",(function(){return Ee})),n.d(t,"propertyOf",(function(){return We})),n.d(t,"matcher",(function(){return Te})),n.d(t,"matches",(function(){return Te})),n.d(t,"times",(function(){return Be})),n.d(t,"random",(function(){return Ie})),n.d(t,"now",(function(){return Ne})),n.d(t,"escape",(function(){return Pe})),n.d(t,"unescape",(function(){return je})),n.d(t,"templateSettings",(function(){return qe})),n.d(t,"template",(function(){return Ge})),n.d(t,"result",(function(){return Ke})),n.d(t,"uniqueId",(function(){return Ze})),n.d(t,"chain",(function(){return Xe})),n.d(t,"iteratee",(function(){return Se})),n.d(t,"partial",(function(){return et})),n.d(t,"bind",(function(){return tt})),n.d(t,"bindAll",(function(){return rt})),n.d(t,"memoize",(function(){return ot})),n.d(t,"delay",(function(){return at})),n.d(t,"defer",(function(){return ct})),n.d(t,"throttle",(function(){return st})),n.d(t,"debounce",(function(){return ut})),n.d(t,"wrap",(function(){return dt})),n.d(t,"negate",(function(){return lt})),n.d(t,"compose",(function(){return ft})),n.d(t,"after",(function(){return ht})),n.d(t,"before",(function(){return pt})),n.d(t,"once",(function(){return gt})),n.d(t,"findKey",(function(){return mt})),n.d(t,"findIndex",(function(){return bt})),n.d(t,"findLastIndex",(function(){return vt})),n.d(t,"sortedIndex",(function(){return _t})),n.d(t,"indexOf",(function(){return Dt})),n.d(t,"lastIndexOf",(function(){return wt})),n.d(t,"find",(function(){return Ut})),n.d(t,"detect",(function(){return Ut})),n.d(t,"findWhere",(function(){return Tt})),n.d(t,"each",(function(){return Et})),n.d(t,"forEach",(function(){return Et})),n.d(t,"map",(function(){return kt})),n.d(t,"collect",(function(){return kt})),n.d(t,"reduce",(function(){return St})),n.d(t,"foldl",(function(){return St})),n.d(t,"inject",(function(){return St})),n.d(t,"reduceRight",(function(){return Ft})),n.d(t,"foldr",(function(){return Ft})),n.d(t,"filter",(function(){return At})),n.d(t,"select",(function(){return At})),n.d(t,"reject",(function(){return Ot})),n.d(t,"every",(function(){return Wt})),n.d(t,"all",(function(){return Wt})),n.d(t,"some",(function(){return Bt})),n.d(t,"any",(function(){return Bt})),n.d(t,"contains",(function(){return It})),n.d(t,"includes",(function(){return It})),n.d(t,"include",(function(){return It})),n.d(t,"invoke",(function(){return Nt})),n.d(t,"pluck",(function(){return Lt})),n.d(t,"where",(function(){return Rt})),n.d(t,"max",(function(){return Pt})),n.d(t,"min",(function(){return jt})),n.d(t,"shuffle",(function(){return Vt})),n.d(t,"sample",(function(){return zt})),n.d(t,"sortBy",(function(){return Ht})),n.d(t,"groupBy",(function(){return Gt})),n.d(t,"indexBy",(function(){return Kt})),n.d(t,"countBy",(function(){return Yt})),n.d(t,"partition",(function(){return Zt})),n.d(t,"toArray",(function(){return Mt})),n.d(t,"size",(function(){return Xt})),n.d(t,"pick",(function(){return Qt})),n.d(t,"omit",(function(){return en})),n.d(t,"first",(function(){return nn})),n.d(t,"head",(function(){return nn})),n.d(t,"take",(function(){return nn})),n.d(t,"initial",(function(){return tn})),n.d(t,"last",(function(){return on})),n.d(t,"rest",(function(){return rn})),n.d(t,"tail",(function(){return rn})),n.d(t,"drop",(function(){return rn})),n.d(t,"compact",(function(){return an})),n.d(t,"flatten",(function(){return cn})),n.d(t,"without",(function(){return un})),n.d(t,"uniq",(function(){return dn})),n.d(t,"unique",(function(){return dn})),n.d(t,"union",(function(){return ln})),n.d(t,"intersection",(function(){return fn})),n.d(t,"difference",(function(){return sn})),n.d(t,"unzip",(function(){return hn})),n.d(t,"transpose",(function(){return hn})),n.d(t,"zip",(function(){return pn})),n.d(t,"object",(function(){return gn})),n.d(t,"range",(function(){return mn})),n.d(t,"chunk",(function(){return yn})),n.d(t,"mixin",(function(){return vn}));var i={};n.r(i),n.d(i,"VERSION",(function(){return r.e})),n.d(i,"restArguments",(function(){return o})),n.d(i,"isObject",(function(){return a})),n.d(i,"isNull",(function(){return c})),n.d(i,"isUndefined",(function(){return s})),n.d(i,"isBoolean",(function(){return u})),n.d(i,"isElement",(function(){return d})),n.d(i,"isString",(function(){return f})),n.d(i,"isNumber",(function(){return h})),n.d(i,"isDate",(function(){return p})),n.d(i,"isRegExp",(function(){return g})),n.d(i,"isError",(function(){return m})),n.d(i,"isSymbol",(function(){return y})),n.d(i,"isArrayBuffer",(function(){return b})),n.d(i,"isDataView",(function(){return E})),n.d(i,"isArray",(function(){return k})),n.d(i,"isFunction",(function(){return x})),n.d(i,"isArguments",(function(){return F})),n.d(i,"isFinite",(function(){return A})),n.d(i,"isNaN",(function(){return O})),n.d(i,"isTypedArray",(function(){return P})),n.d(i,"isEmpty",(function(){return z})),n.d(i,"isMatch",(function(){return V})),n.d(i,"isEqual",(function(){return K})),n.d(i,"isMap",(function(){return ie})),n.d(i,"isWeakMap",(function(){return re})),n.d(i,"isSet",(function(){return oe})),n.d(i,"isWeakSet",(function(){return ae})),n.d(i,"keys",(function(){return M})),n.d(i,"allKeys",(function(){return Y})),n.d(i,"values",(function(){return ce})),n.d(i,"pairs",(function(){return se})),n.d(i,"invert",(function(){return ue})),n.d(i,"functions",(function(){return de})),n.d(i,"methods",(function(){return de})),n.d(i,"extend",(function(){return fe})),n.d(i,"extendOwn",(function(){return he})),n.d(i,"assign",(function(){return he})),n.d(i,"defaults",(function(){return pe})),n.d(i,"create",(function(){return me})),n.d(i,"clone",(function(){return ye})),n.d(i,"tap",(function(){return be})),n.d(i,"get",(function(){return De})),n.d(i,"has",(function(){return we})),n.d(i,"mapObject",(function(){return Ae})),n.d(i,"identity",(function(){return Ue})),n.d(i,"constant",(function(){return W})),n.d(i,"noop",(function(){return Oe})),n.d(i,"toPath",(function(){return ve})),n.d(i,"property",(function(){return Ee})),n.d(i,"propertyOf",(function(){return We})),n.d(i,"matcher",(function(){return Te})),n.d(i,"matches",(function(){return Te})),n.d(i,"times",(function(){return Be})),n.d(i,"random",(function(){return Ie})),n.d(i,"now",(function(){return Ne})),n.d(i,"escape",(function(){return Pe})),n.d(i,"unescape",(function(){return je})),n.d(i,"templateSettings",(function(){return qe})),n.d(i,"template",(function(){return Ge})),n.d(i,"result",(function(){return Ke})),n.d(i,"uniqueId",(function(){return Ze})),n.d(i,"chain",(function(){return Xe})),n.d(i,"iteratee",(function(){return Se})),n.d(i,"partial",(function(){return et})),n.d(i,"bind",(function(){return tt})),n.d(i,"bindAll",(function(){return rt})),n.d(i,"memoize",(function(){return ot})),n.d(i,"delay",(function(){return at})),n.d(i,"defer",(function(){return ct})),n.d(i,"throttle",(function(){return st})),n.d(i,"debounce",(function(){return ut})),n.d(i,"wrap",(function(){return dt})),n.d(i,"negate",(function(){return lt})),n.d(i,"compose",(function(){return ft})),n.d(i,"after",(function(){return ht})),n.d(i,"before",(function(){return pt})),n.d(i,"once",(function(){return gt})),n.d(i,"findKey",(function(){return mt})),n.d(i,"findIndex",(function(){return bt})),n.d(i,"findLastIndex",(function(){return vt})),n.d(i,"sortedIndex",(function(){return _t})),n.d(i,"indexOf",(function(){return Dt})),n.d(i,"lastIndexOf",(function(){return wt})),n.d(i,"find",(function(){return Ut})),n.d(i,"detect",(function(){return Ut})),n.d(i,"findWhere",(function(){return Tt})),n.d(i,"each",(function(){return Et})),n.d(i,"forEach",(function(){return Et})),n.d(i,"map",(function(){return kt})),n.d(i,"collect",(function(){return kt})),n.d(i,"reduce",(function(){return St})),n.d(i,"foldl",(function(){return St})),n.d(i,"inject",(function(){return St})),n.d(i,"reduceRight",(function(){return Ft})),n.d(i,"foldr",(function(){return Ft})),n.d(i,"filter",(function(){return At})),n.d(i,"select",(function(){return At})),n.d(i,"reject",(function(){return Ot})),n.d(i,"every",(function(){return Wt})),n.d(i,"all",(function(){return Wt})),n.d(i,"some",(function(){return Bt})),n.d(i,"any",(function(){return Bt})),n.d(i,"contains",(function(){return It})),n.d(i,"includes",(function(){return It})),n.d(i,"include",(function(){return It})),n.d(i,"invoke",(function(){return Nt})),n.d(i,"pluck",(function(){return Lt})),n.d(i,"where",(function(){return Rt})),n.d(i,"max",(function(){return Pt})),n.d(i,"min",(function(){return jt})),n.d(i,"shuffle",(function(){return Vt})),n.d(i,"sample",(function(){return zt})),n.d(i,"sortBy",(function(){return Ht})),n.d(i,"groupBy",(function(){return Gt})),n.d(i,"indexBy",(function(){return Kt})),n.d(i,"countBy",(function(){return Yt})),n.d(i,"partition",(function(){return Zt})),n.d(i,"toArray",(function(){return Mt})),n.d(i,"size",(function(){return Xt})),n.d(i,"pick",(function(){return Qt})),n.d(i,"omit",(function(){return en})),n.d(i,"first",(function(){return nn})),n.d(i,"head",(function(){return nn})),n.d(i,"take",(function(){return nn})),n.d(i,"initial",(function(){return tn})),n.d(i,"last",(function(){return on})),n.d(i,"rest",(function(){return rn})),n.d(i,"tail",(function(){return rn})),n.d(i,"drop",(function(){return rn})),n.d(i,"compact",(function(){return an})),n.d(i,"flatten",(function(){return cn})),n.d(i,"without",(function(){return un})),n.d(i,"uniq",(function(){return dn})),n.d(i,"unique",(function(){return dn})),n.d(i,"union",(function(){return ln})),n.d(i,"intersection",(function(){return fn})),n.d(i,"difference",(function(){return sn})),n.d(i,"unzip",(function(){return hn})),n.d(i,"transpose",(function(){return hn})),n.d(i,"zip",(function(){return pn})),n.d(i,"object",(function(){return gn})),n.d(i,"range",(function(){return mn})),n.d(i,"chunk",(function(){return yn})),n.d(i,"mixin",(function(){return vn})),n.d(i,"default",(function(){return _n}));var r=n(3);function o(e,t){return t=null==t?e.length-1:+t,function(){for(var n=Math.max(arguments.length-t,0),i=Array(n),r=0;r<n;r++)i[r]=arguments[r+t];switch(t){case 0:return e.call(this,i);case 1:return e.call(this,arguments[0],i);case 2:return e.call(this,arguments[0],arguments[1],i)}var o=Array(t+1);for(r=0;r<t;r++)o[r]=arguments[r];return o[t]=i,e.apply(this,o)}}function a(e){var t=typeof e;return"function"===t||"object"===t&&!!e}function c(e){return null===e}function s(e){return void 0===e}function u(e){return!0===e||!1===e||"[object Boolean]"===r.t.call(e)}function d(e){return!(!e||1!==e.nodeType)}function l(e){var t="[object "+e+"]";return function(e){return r.t.call(e)===t}}var f=l("String"),h=l("Number"),p=l("Date"),g=l("RegExp"),m=l("Error"),y=l("Symbol"),b=l("ArrayBuffer"),v=l("Function"),_=r.p.document&&r.p.document.childNodes;"object"!=typeof Int8Array&&"function"!=typeof _&&(v=function(e){return"function"==typeof e||!1});var x=v,D=l("Object"),w=r.s&&D(new DataView(new ArrayBuffer(8))),U="undefined"!=typeof Map&&D(new Map),T=l("DataView");var E=w?function(e){return null!=e&&x(e.getInt8)&&b(e.buffer)}:T,k=r.k||l("Array");function C(e,t){return null!=e&&r.i.call(e,t)}var S=l("Arguments");!function(){S(arguments)||(S=function(e){return C(e,"callee")})}();var F=S;function A(e){return!y(e)&&Object(r.f)(e)&&!isNaN(parseFloat(e))}function O(e){return h(e)&&Object(r.g)(e)}function W(e){return function(){return e}}function B(e){return function(t){var n=e(t);return"number"==typeof n&&n>=0&&n<=r.b}}function I(e){return function(t){return null==t?void 0:t[e]}}var N=I("byteLength"),L=B(N),R=/\[object ((I|Ui)nt(8|16|32)|Float(32|64)|Uint8Clamped|Big(I|Ui)nt64)Array\]/;var P=r.r?function(e){return r.l?Object(r.l)(e)&&!E(e):L(e)&&R.test(r.t.call(e))}:W(!1),j=I("length");function q(e,t){t=function(e){for(var t={},n=e.length,i=0;i<n;++i)t[e[i]]=!0;return{contains:function(e){return!0===t[e]},push:function(n){return t[n]=!0,e.push(n)}}}(t);var n=r.n.length,i=e.constructor,o=x(i)&&i.prototype||r.c,a="constructor";for(C(e,a)&&!t.contains(a)&&t.push(a);n--;)(a=r.n[n])in e&&e[a]!==o[a]&&!t.contains(a)&&t.push(a)}function M(e){if(!a(e))return[];if(r.m)return Object(r.m)(e);var t=[];for(var n in e)C(e,n)&&t.push(n);return r.h&&q(e,t),t}function z(e){if(null==e)return!0;var t=j(e);return"number"==typeof t&&(k(e)||f(e)||F(e))?0===t:0===j(M(e))}function V(e,t){var n=M(t),i=n.length;if(null==e)return!i;for(var r=Object(e),o=0;o<i;o++){var a=n[o];if(t[a]!==r[a]||!(a in r))return!1}return!0}function H(e){return e instanceof H?e:this instanceof H?void(this._wrapped=e):new H(e)}function $(e){return new Uint8Array(e.buffer||e,e.byteOffset||0,N(e))}H.VERSION=r.e,H.prototype.value=function(){return this._wrapped},H.prototype.valueOf=H.prototype.toJSON=H.prototype.value,H.prototype.toString=function(){return String(this._wrapped)};function G(e,t,n,i){if(e===t)return 0!==e||1/e==1/t;if(null==e||null==t)return!1;if(e!=e)return t!=t;var o=typeof e;return("function"===o||"object"===o||"object"==typeof t)&&function e(t,n,i,o){t instanceof H&&(t=t._wrapped);n instanceof H&&(n=n._wrapped);var a=r.t.call(t);if(a!==r.t.call(n))return!1;if(w&&"[object Object]"==a&&E(t)){if(!E(n))return!1;a="[object DataView]"}switch(a){case"[object RegExp]":case"[object String]":return""+t==""+n;case"[object Number]":return+t!=+t?+n!=+n:0==+t?1/+t==1/n:+t==+n;case"[object Date]":case"[object Boolean]":return+t==+n;case"[object Symbol]":return r.d.valueOf.call(t)===r.d.valueOf.call(n);case"[object ArrayBuffer]":case"[object DataView]":return e($(t),$(n),i,o)}var c="[object Array]"===a;if(!c&&P(t)){if(N(t)!==N(n))return!1;if(t.buffer===n.buffer&&t.byteOffset===n.byteOffset)return!0;c=!0}if(!c){if("object"!=typeof t||"object"!=typeof n)return!1;var s=t.constructor,u=n.constructor;if(s!==u&&!(x(s)&&s instanceof s&&x(u)&&u instanceof u)&&"constructor"in t&&"constructor"in n)return!1}o=o||[];var d=(i=i||[]).length;for(;d--;)if(i[d]===t)return o[d]===n;if(i.push(t),o.push(n),c){if((d=t.length)!==n.length)return!1;for(;d--;)if(!G(t[d],n[d],i,o))return!1}else{var l,f=M(t);if(d=f.length,M(n).length!==d)return!1;for(;d--;)if(l=f[d],!C(n,l)||!G(t[l],n[l],i,o))return!1}return i.pop(),o.pop(),!0}(e,t,n,i)}function K(e,t){return G(e,t)}function Y(e){if(!a(e))return[];var t=[];for(var n in e)t.push(n);return r.h&&q(e,t),t}function Z(e){var t=j(e);return function(n){if(null==n)return!1;var i=Y(n);if(j(i))return!1;for(var r=0;r<t;r++)if(!x(n[e[r]]))return!1;return e!==te||!x(n[X])}}var X="forEach",J=["clear","delete"],Q=["get","has","set"],ee=J.concat(X,Q),te=J.concat(Q),ne=["add"].concat(J,X,"has"),ie=U?Z(ee):l("Map"),re=U?Z(te):l("WeakMap"),oe=U?Z(ne):l("Set"),ae=l("WeakSet");function ce(e){for(var t=M(e),n=t.length,i=Array(n),r=0;r<n;r++)i[r]=e[t[r]];return i}function se(e){for(var t=M(e),n=t.length,i=Array(n),r=0;r<n;r++)i[r]=[t[r],e[t[r]]];return i}function ue(e){for(var t={},n=M(e),i=0,r=n.length;i<r;i++)t[e[n[i]]]=n[i];return t}function de(e){var t=[];for(var n in e)x(e[n])&&t.push(n);return t.sort()}function le(e,t){return function(n){var i=arguments.length;if(t&&(n=Object(n)),i<2||null==n)return n;for(var r=1;r<i;r++)for(var o=arguments[r],a=e(o),c=a.length,s=0;s<c;s++){var u=a[s];t&&void 0!==n[u]||(n[u]=o[u])}return n}}var fe=le(Y),he=le(M),pe=le(Y,!0);function ge(e){if(!a(e))return{};if(r.j)return Object(r.j)(e);var t=function(){};t.prototype=e;var n=new t;return t.prototype=null,n}function me(e,t){var n=ge(e);return t&&he(n,t),n}function ye(e){return a(e)?k(e)?e.slice():fe({},e):e}function be(e,t){return t(e),e}function ve(e){return k(e)?e:[e]}function _e(e){return H.toPath(e)}function xe(e,t){for(var n=t.length,i=0;i<n;i++){if(null==e)return;e=e[t[i]]}return n?e:void 0}function De(e,t,n){var i=xe(e,_e(t));return s(i)?n:i}function we(e,t){for(var n=(t=_e(t)).length,i=0;i<n;i++){var r=t[i];if(!C(e,r))return!1;e=e[r]}return!!n}function Ue(e){return e}function Te(e){return e=he({},e),function(t){return V(t,e)}}function Ee(e){return e=_e(e),function(t){return xe(t,e)}}function ke(e,t,n){if(void 0===t)return e;switch(null==n?3:n){case 1:return function(n){return e.call(t,n)};case 3:return function(n,i,r){return e.call(t,n,i,r)};case 4:return function(n,i,r,o){return e.call(t,n,i,r,o)}}return function(){return e.apply(t,arguments)}}function Ce(e,t,n){return null==e?Ue:x(e)?ke(e,t,n):a(e)&&!k(e)?Te(e):Ee(e)}function Se(e,t){return Ce(e,t,1/0)}function Fe(e,t,n){return H.iteratee!==Se?H.iteratee(e,t):Ce(e,t,n)}function Ae(e,t,n){t=Fe(t,n);for(var i=M(e),r=i.length,o={},a=0;a<r;a++){var c=i[a];o[c]=t(e[c],c,e)}return o}function Oe(){}function We(e){return null==e?Oe:function(t){return De(e,t)}}function Be(e,t,n){var i=Array(Math.max(0,e));t=ke(t,n,1);for(var r=0;r<e;r++)i[r]=t(r);return i}function Ie(e,t){return null==t&&(t=e,e=0),e+Math.floor(Math.random()*(t-e+1))}H.toPath=ve,H.iteratee=Se;var Ne=Date.now||function(){return(new Date).getTime()};function Le(e){var t=function(t){return e[t]},n="(?:"+M(e).join("|")+")",i=RegExp(n),r=RegExp(n,"g");return function(e){return e=null==e?"":""+e,i.test(e)?e.replace(r,t):e}}var Re={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;"},Pe=Le(Re),je=Le(ue(Re)),qe=H.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g},Me=/(.)^/,ze={"'":"'","\\":"\\","\r":"r","\n":"n","\u2028":"u2028","\u2029":"u2029"},Ve=/\\|'|\r|\n|\u2028|\u2029/g;function He(e){return"\\"+ze[e]}var $e=/^\s*(\w|\$)+\s*$/;function Ge(e,t,n){!t&&n&&(t=n),t=pe({},t,H.templateSettings);var i=RegExp([(t.escape||Me).source,(t.interpolate||Me).source,(t.evaluate||Me).source].join("|")+"|$","g"),r=0,o="__p+='";e.replace(i,(function(t,n,i,a,c){return o+=e.slice(r,c).replace(Ve,He),r=c+t.length,n?o+="'+\n((__t=("+n+"))==null?'':_.escape(__t))+\n'":i?o+="'+\n((__t=("+i+"))==null?'':__t)+\n'":a&&(o+="';\n"+a+"\n__p+='"),t})),o+="';\n";var a,c=t.variable;if(c){if(!$e.test(c))throw new Error("variable is not a bare identifier: "+c)}else o="with(obj||{}){\n"+o+"}\n",c="obj";o="var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n"+o+"return __p;\n";try{a=new Function(c,"_",o)}catch(e){throw e.source=o,e}var s=function(e){return a.call(this,e,H)};return s.source="function("+c+"){\n"+o+"}",s}function Ke(e,t,n){var i=(t=_e(t)).length;if(!i)return x(n)?n.call(e):n;for(var r=0;r<i;r++){var o=null==e?void 0:e[t[r]];void 0===o&&(o=n,r=i),e=x(o)?o.call(e):o}return e}var Ye=0;function Ze(e){var t=++Ye+"";return e?e+t:t}function Xe(e){var t=H(e);return t._chain=!0,t}function Je(e,t,n,i,r){if(!(i instanceof t))return e.apply(n,r);var o=ge(e.prototype),c=e.apply(o,r);return a(c)?c:o}var Qe=o((function(e,t){var n=Qe.placeholder,i=function(){for(var r=0,o=t.length,a=Array(o),c=0;c<o;c++)a[c]=t[c]===n?arguments[r++]:t[c];for(;r<arguments.length;)a.push(arguments[r++]);return Je(e,i,this,this,a)};return i}));Qe.placeholder=H;var et=Qe,tt=o((function(e,t,n){if(!x(e))throw new TypeError("Bind must be called on a function");var i=o((function(r){return Je(e,i,t,this,n.concat(r))}));return i})),nt=B(j);function it(e,t,n,i){if(i=i||[],t||0===t){if(t<=0)return i.concat(e)}else t=1/0;for(var r=i.length,o=0,a=j(e);o<a;o++){var c=e[o];if(nt(c)&&(k(c)||F(c)))if(t>1)it(c,t-1,n,i),r=i.length;else for(var s=0,u=c.length;s<u;)i[r++]=c[s++];else n||(i[r++]=c)}return i}var rt=o((function(e,t){var n=(t=it(t,!1,!1)).length;if(n<1)throw new Error("bindAll must be passed function names");for(;n--;){var i=t[n];e[i]=tt(e[i],e)}return e}));function ot(e,t){var n=function(i){var r=n.cache,o=""+(t?t.apply(this,arguments):i);return C(r,o)||(r[o]=e.apply(this,arguments)),r[o]};return n.cache={},n}var at=o((function(e,t,n){return setTimeout((function(){return e.apply(null,n)}),t)})),ct=et(at,H,1);function st(e,t,n){var i,r,o,a,c=0;n||(n={});var s=function(){c=!1===n.leading?0:Ne(),i=null,a=e.apply(r,o),i||(r=o=null)},u=function(){var u=Ne();c||!1!==n.leading||(c=u);var d=t-(u-c);return r=this,o=arguments,d<=0||d>t?(i&&(clearTimeout(i),i=null),c=u,a=e.apply(r,o),i||(r=o=null)):i||!1===n.trailing||(i=setTimeout(s,d)),a};return u.cancel=function(){clearTimeout(i),c=0,i=r=o=null},u}function ut(e,t,n){var i,r,a,c,s,u=function(){var o=Ne()-r;t>o?i=setTimeout(u,t-o):(i=null,n||(c=e.apply(s,a)),i||(a=s=null))},d=o((function(o){return s=this,a=o,r=Ne(),i||(i=setTimeout(u,t),n&&(c=e.apply(s,a))),c}));return d.cancel=function(){clearTimeout(i),i=a=s=null},d}function dt(e,t){return et(t,e)}function lt(e){return function(){return!e.apply(this,arguments)}}function ft(){var e=arguments,t=e.length-1;return function(){for(var n=t,i=e[t].apply(this,arguments);n--;)i=e[n].call(this,i);return i}}function ht(e,t){return function(){if(--e<1)return t.apply(this,arguments)}}function pt(e,t){var n;return function(){return--e>0&&(n=t.apply(this,arguments)),e<=1&&(t=null),n}}var gt=et(pt,2);function mt(e,t,n){t=Fe(t,n);for(var i,r=M(e),o=0,a=r.length;o<a;o++)if(t(e[i=r[o]],i,e))return i}function yt(e){return function(t,n,i){n=Fe(n,i);for(var r=j(t),o=e>0?0:r-1;o>=0&&o<r;o+=e)if(n(t[o],o,t))return o;return-1}}var bt=yt(1),vt=yt(-1);function _t(e,t,n,i){for(var r=(n=Fe(n,i,1))(t),o=0,a=j(e);o<a;){var c=Math.floor((o+a)/2);n(e[c])<r?o=c+1:a=c}return o}function xt(e,t,n){return function(i,o,a){var c=0,s=j(i);if("number"==typeof a)e>0?c=a>=0?a:Math.max(a+s,c):s=a>=0?Math.min(a+1,s):a+s+1;else if(n&&a&&s)return i[a=n(i,o)]===o?a:-1;if(o!=o)return(a=t(r.q.call(i,c,s),O))>=0?a+c:-1;for(a=e>0?c:s-1;a>=0&&a<s;a+=e)if(i[a]===o)return a;return-1}}var Dt=xt(1,bt,_t),wt=xt(-1,vt);function Ut(e,t,n){var i=(nt(e)?bt:mt)(e,t,n);if(void 0!==i&&-1!==i)return e[i]}function Tt(e,t){return Ut(e,Te(t))}function Et(e,t,n){var i,r;if(t=ke(t,n),nt(e))for(i=0,r=e.length;i<r;i++)t(e[i],i,e);else{var o=M(e);for(i=0,r=o.length;i<r;i++)t(e[o[i]],o[i],e)}return e}function kt(e,t,n){t=Fe(t,n);for(var i=!nt(e)&&M(e),r=(i||e).length,o=Array(r),a=0;a<r;a++){var c=i?i[a]:a;o[a]=t(e[c],c,e)}return o}function Ct(e){var t=function(t,n,i,r){var o=!nt(t)&&M(t),a=(o||t).length,c=e>0?0:a-1;for(r||(i=t[o?o[c]:c],c+=e);c>=0&&c<a;c+=e){var s=o?o[c]:c;i=n(i,t[s],s,t)}return i};return function(e,n,i,r){var o=arguments.length>=3;return t(e,ke(n,r,4),i,o)}}var St=Ct(1),Ft=Ct(-1);function At(e,t,n){var i=[];return t=Fe(t,n),Et(e,(function(e,n,r){t(e,n,r)&&i.push(e)})),i}function Ot(e,t,n){return At(e,lt(Fe(t)),n)}function Wt(e,t,n){t=Fe(t,n);for(var i=!nt(e)&&M(e),r=(i||e).length,o=0;o<r;o++){var a=i?i[o]:o;if(!t(e[a],a,e))return!1}return!0}function Bt(e,t,n){t=Fe(t,n);for(var i=!nt(e)&&M(e),r=(i||e).length,o=0;o<r;o++){var a=i?i[o]:o;if(t(e[a],a,e))return!0}return!1}function It(e,t,n,i){return nt(e)||(e=ce(e)),("number"!=typeof n||i)&&(n=0),Dt(e,t,n)>=0}var Nt=o((function(e,t,n){var i,r;return x(t)?r=t:(t=_e(t),i=t.slice(0,-1),t=t[t.length-1]),kt(e,(function(e){var o=r;if(!o){if(i&&i.length&&(e=xe(e,i)),null==e)return;o=e[t]}return null==o?o:o.apply(e,n)}))}));function Lt(e,t){return kt(e,Ee(t))}function Rt(e,t){return At(e,Te(t))}function Pt(e,t,n){var i,r,o=-1/0,a=-1/0;if(null==t||"number"==typeof t&&"object"!=typeof e[0]&&null!=e)for(var c=0,s=(e=nt(e)?e:ce(e)).length;c<s;c++)null!=(i=e[c])&&i>o&&(o=i);else t=Fe(t,n),Et(e,(function(e,n,i){((r=t(e,n,i))>a||r===-1/0&&o===-1/0)&&(o=e,a=r)}));return o}function jt(e,t,n){var i,r,o=1/0,a=1/0;if(null==t||"number"==typeof t&&"object"!=typeof e[0]&&null!=e)for(var c=0,s=(e=nt(e)?e:ce(e)).length;c<s;c++)null!=(i=e[c])&&i<o&&(o=i);else t=Fe(t,n),Et(e,(function(e,n,i){((r=t(e,n,i))<a||r===1/0&&o===1/0)&&(o=e,a=r)}));return o}var qt=/[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;function Mt(e){return e?k(e)?r.q.call(e):f(e)?e.match(qt):nt(e)?kt(e,Ue):ce(e):[]}function zt(e,t,n){if(null==t||n)return nt(e)||(e=ce(e)),e[Ie(e.length-1)];var i=Mt(e),r=j(i);t=Math.max(Math.min(t,r),0);for(var o=r-1,a=0;a<t;a++){var c=Ie(a,o),s=i[a];i[a]=i[c],i[c]=s}return i.slice(0,t)}function Vt(e){return zt(e,1/0)}function Ht(e,t,n){var i=0;return t=Fe(t,n),Lt(kt(e,(function(e,n,r){return{value:e,index:i++,criteria:t(e,n,r)}})).sort((function(e,t){var n=e.criteria,i=t.criteria;if(n!==i){if(n>i||void 0===n)return 1;if(n<i||void 0===i)return-1}return e.index-t.index})),"value")}function $t(e,t){return function(n,i,r){var o=t?[[],[]]:{};return i=Fe(i,r),Et(n,(function(t,r){var a=i(t,r,n);e(o,t,a)})),o}}var Gt=$t((function(e,t,n){C(e,n)?e[n].push(t):e[n]=[t]})),Kt=$t((function(e,t,n){e[n]=t})),Yt=$t((function(e,t,n){C(e,n)?e[n]++:e[n]=1})),Zt=$t((function(e,t,n){e[n?0:1].push(t)}),!0);function Xt(e){return null==e?0:nt(e)?e.length:M(e).length}function Jt(e,t,n){return t in n}var Qt=o((function(e,t){var n={},i=t[0];if(null==e)return n;x(i)?(t.length>1&&(i=ke(i,t[1])),t=Y(e)):(i=Jt,t=it(t,!1,!1),e=Object(e));for(var r=0,o=t.length;r<o;r++){var a=t[r],c=e[a];i(c,a,e)&&(n[a]=c)}return n})),en=o((function(e,t){var n,i=t[0];return x(i)?(i=lt(i),t.length>1&&(n=t[1])):(t=kt(it(t,!1,!1),String),i=function(e,n){return!It(t,n)}),Qt(e,i,n)}));function tn(e,t,n){return r.q.call(e,0,Math.max(0,e.length-(null==t||n?1:t)))}function nn(e,t,n){return null==e||e.length<1?null==t||n?void 0:[]:null==t||n?e[0]:tn(e,e.length-t)}function rn(e,t,n){return r.q.call(e,null==t||n?1:t)}function on(e,t,n){return null==e||e.length<1?null==t||n?void 0:[]:null==t||n?e[e.length-1]:rn(e,Math.max(0,e.length-t))}function an(e){return At(e,Boolean)}function cn(e,t){return it(e,t,!1)}var sn=o((function(e,t){return t=it(t,!0,!0),At(e,(function(e){return!It(t,e)}))})),un=o((function(e,t){return sn(e,t)}));function dn(e,t,n,i){u(t)||(i=n,n=t,t=!1),null!=n&&(n=Fe(n,i));for(var r=[],o=[],a=0,c=j(e);a<c;a++){var s=e[a],d=n?n(s,a,e):s;t&&!n?(a&&o===d||r.push(s),o=d):n?It(o,d)||(o.push(d),r.push(s)):It(r,s)||r.push(s)}return r}var ln=o((function(e){return dn(it(e,!0,!0))}));function fn(e){for(var t=[],n=arguments.length,i=0,r=j(e);i<r;i++){var o=e[i];if(!It(t,o)){var a;for(a=1;a<n&&It(arguments[a],o);a++);a===n&&t.push(o)}}return t}function hn(e){for(var t=e&&Pt(e,j).length||0,n=Array(t),i=0;i<t;i++)n[i]=Lt(e,i);return n}var pn=o(hn);function gn(e,t){for(var n={},i=0,r=j(e);i<r;i++)t?n[e[i]]=t[i]:n[e[i][0]]=e[i][1];return n}function mn(e,t,n){null==t&&(t=e||0,e=0),n||(n=t<e?-1:1);for(var i=Math.max(Math.ceil((t-e)/n),0),r=Array(i),o=0;o<i;o++,e+=n)r[o]=e;return r}function yn(e,t){if(null==t||t<1)return[];for(var n=[],i=0,o=e.length;i<o;)n.push(r.q.call(e,i,i+=t));return n}function bn(e,t){return e._chain?H(t).chain():t}function vn(e){return Et(de(e),(function(t){var n=H[t]=e[t];H.prototype[t]=function(){var e=[this._wrapped];return r.o.apply(e,arguments),bn(this,n.apply(H,e))}})),H}Et(["pop","push","reverse","shift","sort","splice","unshift"],(function(e){var t=r.a[e];H.prototype[e]=function(){var n=this._wrapped;return null!=n&&(t.apply(n,arguments),"shift"!==e&&"splice"!==e||0!==n.length||delete n[0]),bn(this,n)}})),Et(["concat","join","slice"],(function(e){var t=r.a[e];H.prototype[e]=function(){var e=this._wrapped;return null!=e&&(e=t.apply(e,arguments)),bn(this,e)}}));var _n=H,xn=vn(i);xn._=xn;var Dn=xn},function(e,t,n){"use strict";var i,r="object"==typeof Reflect?Reflect:null,o=r&&"function"==typeof r.apply?r.apply:function(e,t,n){return Function.prototype.apply.call(e,t,n)};i=r&&"function"==typeof r.ownKeys?r.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var a=Number.isNaN||function(e){return e!=e};function c(){c.init.call(this)}e.exports=c,e.exports.once=function(e,t){return new Promise((function(n,i){function r(n){e.removeListener(t,o),i(n)}function o(){"function"==typeof e.removeListener&&e.removeListener("error",r),n([].slice.call(arguments))}y(e,t,o,{once:!0}),"error"!==t&&function(e,t,n){"function"==typeof e.on&&y(e,"error",t,n)}(e,r,{once:!0})}))},c.EventEmitter=c,c.prototype._events=void 0,c.prototype._eventsCount=0,c.prototype._maxListeners=void 0;var s=10;function u(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function d(e){return void 0===e._maxListeners?c.defaultMaxListeners:e._maxListeners}function l(e,t,n,i){var r,o,a,c;if(u(n),void 0===(o=e._events)?(o=e._events=Object.create(null),e._eventsCount=0):(void 0!==o.newListener&&(e.emit("newListener",t,n.listener?n.listener:n),o=e._events),a=o[t]),void 0===a)a=o[t]=n,++e._eventsCount;else if("function"==typeof a?a=o[t]=i?[n,a]:[a,n]:i?a.unshift(n):a.push(n),(r=d(e))>0&&a.length>r&&!a.warned){a.warned=!0;var s=new Error("Possible EventEmitter memory leak detected. "+a.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");s.name="MaxListenersExceededWarning",s.emitter=e,s.type=t,s.count=a.length,c=s,console&&console.warn&&console.warn(c)}return e}function f(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function h(e,t,n){var i={fired:!1,wrapFn:void 0,target:e,type:t,listener:n},r=f.bind(i);return r.listener=n,i.wrapFn=r,r}function p(e,t,n){var i=e._events;if(void 0===i)return[];var r=i[t];return void 0===r?[]:"function"==typeof r?n?[r.listener||r]:[r]:n?function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(r):m(r,r.length)}function g(e){var t=this._events;if(void 0!==t){var n=t[e];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function m(e,t){for(var n=new Array(t),i=0;i<t;++i)n[i]=e[i];return n}function y(e,t,n,i){if("function"==typeof e.on)i.once?e.once(t,n):e.on(t,n);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,(function r(o){i.once&&e.removeEventListener(t,r),n(o)}))}}Object.defineProperty(c,"defaultMaxListeners",{enumerable:!0,get:function(){return s},set:function(e){if("number"!=typeof e||e<0||a(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");s=e}}),c.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},c.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||a(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},c.prototype.getMaxListeners=function(){return d(this)},c.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t.push(arguments[n]);var i="error"===e,r=this._events;if(void 0!==r)i=i&&void 0===r.error;else if(!i)return!1;if(i){var a;if(t.length>0&&(a=t[0]),a instanceof Error)throw a;var c=new Error("Unhandled error."+(a?" ("+a.message+")":""));throw c.context=a,c}var s=r[e];if(void 0===s)return!1;if("function"==typeof s)o(s,this,t);else{var u=s.length,d=m(s,u);for(n=0;n<u;++n)o(d[n],this,t)}return!0},c.prototype.addListener=function(e,t){return l(this,e,t,!1)},c.prototype.on=c.prototype.addListener,c.prototype.prependListener=function(e,t){return l(this,e,t,!0)},c.prototype.once=function(e,t){return u(t),this.on(e,h(this,e,t)),this},c.prototype.prependOnceListener=function(e,t){return u(t),this.prependListener(e,h(this,e,t)),this},c.prototype.removeListener=function(e,t){var n,i,r,o,a;if(u(t),void 0===(i=this._events))return this;if(void 0===(n=i[e]))return this;if(n===t||n.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete i[e],i.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(r=-1,o=n.length-1;o>=0;o--)if(n[o]===t||n[o].listener===t){a=n[o].listener,r=o;break}if(r<0)return this;0===r?n.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(n,r),1===n.length&&(i[e]=n[0]),void 0!==i.removeListener&&this.emit("removeListener",e,a||t)}return this},c.prototype.off=c.prototype.removeListener,c.prototype.removeAllListeners=function(e){var t,n,i;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[e]),this;if(0===arguments.length){var r,o=Object.keys(n);for(i=0;i<o.length;++i)"removeListener"!==(r=o[i])&&this.removeAllListeners(r);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(void 0!==t)for(i=t.length-1;i>=0;i--)this.removeListener(e,t[i]);return this},c.prototype.listeners=function(e){return p(this,e,!0)},c.prototype.rawListeners=function(e){return p(this,e,!1)},c.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):g.call(e,t)},c.prototype.listenerCount=g,c.prototype.eventNames=function(){return this._eventsCount>0?i(this._events):[]}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},,,,,,function(e,t,n){(function(){var t,i,r,o,a,c,s,u,d,l,f,h,p,g,m={}.hasOwnProperty;g=n(29),p=g.isObject,h=g.isFunction,f=g.isEmpty,l=g.getValue,c=null,t=null,i=null,r=null,o=null,u=null,d=null,s=null,a=null,e.exports=function(){function e(e){this.parent=e,this.parent&&(this.options=this.parent.options,this.stringify=this.parent.stringify),this.children=[],c||(c=n(60),t=n(61),i=n(62),r=n(63),o=n(64),u=n(69),d=n(70),s=n(71),a=n(102))}return e.prototype.element=function(e,t,n){var i,r,o,a,c,s,u,d,g,y,b;if(s=null,null===t&&null==n&&(t=(g=[{},null])[0],n=g[1]),null==t&&(t={}),t=l(t),p(t)||(n=(y=[t,n])[0],t=y[1]),null!=e&&(e=l(e)),Array.isArray(e))for(o=0,u=e.length;o<u;o++)r=e[o],s=this.element(r);else if(h(e))s=this.element(e.apply());else if(p(e)){for(c in e)if(m.call(e,c))if(b=e[c],h(b)&&(b=b.apply()),p(b)&&f(b)&&(b=null),!this.options.ignoreDecorators&&this.stringify.convertAttKey&&0===c.indexOf(this.stringify.convertAttKey))s=this.attribute(c.substr(this.stringify.convertAttKey.length),b);else if(!this.options.separateArrayItems&&Array.isArray(b))for(a=0,d=b.length;a<d;a++)r=b[a],(i={})[c]=r,s=this.element(i);else p(b)?(s=this.element(c)).element(b):s=this.element(c,b)}else s=this.options.skipNullNodes&&null===n?this.dummy():!this.options.ignoreDecorators&&this.stringify.convertTextKey&&0===e.indexOf(this.stringify.convertTextKey)?this.text(n):!this.options.ignoreDecorators&&this.stringify.convertCDataKey&&0===e.indexOf(this.stringify.convertCDataKey)?this.cdata(n):!this.options.ignoreDecorators&&this.stringify.convertCommentKey&&0===e.indexOf(this.stringify.convertCommentKey)?this.comment(n):!this.options.ignoreDecorators&&this.stringify.convertRawKey&&0===e.indexOf(this.stringify.convertRawKey)?this.raw(n):!this.options.ignoreDecorators&&this.stringify.convertPIKey&&0===e.indexOf(this.stringify.convertPIKey)?this.instruction(e.substr(this.stringify.convertPIKey.length),n):this.node(e,t,n);if(null==s)throw new Error("Could not create any elements with: "+e+". "+this.debugInfo());return s},e.prototype.insertBefore=function(e,t,n){var i,r,o;if(this.isRoot)throw new Error("Cannot insert elements at root level. "+this.debugInfo(e));return r=this.parent.children.indexOf(this),o=this.parent.children.splice(r),i=this.parent.element(e,t,n),Array.prototype.push.apply(this.parent.children,o),i},e.prototype.insertAfter=function(e,t,n){var i,r,o;if(this.isRoot)throw new Error("Cannot insert elements at root level. "+this.debugInfo(e));return r=this.parent.children.indexOf(this),o=this.parent.children.splice(r+1),i=this.parent.element(e,t,n),Array.prototype.push.apply(this.parent.children,o),i},e.prototype.remove=function(){var e;if(this.isRoot)throw new Error("Cannot remove the root element. "+this.debugInfo());return e=this.parent.children.indexOf(this),[].splice.apply(this.parent.children,[e,e-e+1].concat([])),this.parent},e.prototype.node=function(e,t,n){var i,r;return null!=e&&(e=l(e)),t||(t={}),t=l(t),p(t)||(n=(r=[t,n])[0],t=r[1]),i=new c(this,e,t),null!=n&&i.text(n),this.children.push(i),i},e.prototype.text=function(e){var t;return t=new d(this,e),this.children.push(t),this},e.prototype.cdata=function(e){var n;return n=new t(this,e),this.children.push(n),this},e.prototype.comment=function(e){var t;return t=new i(this,e),this.children.push(t),this},e.prototype.commentBefore=function(e){var t,n;return t=this.parent.children.indexOf(this),n=this.parent.children.splice(t),this.parent.comment(e),Array.prototype.push.apply(this.parent.children,n),this},e.prototype.commentAfter=function(e){var t,n;return t=this.parent.children.indexOf(this),n=this.parent.children.splice(t+1),this.parent.comment(e),Array.prototype.push.apply(this.parent.children,n),this},e.prototype.raw=function(e){var t;return t=new u(this,e),this.children.push(t),this},e.prototype.dummy=function(){var e;return e=new a(this),this.children.push(e),e},e.prototype.instruction=function(e,t){var n,i,r,o,a;if(null!=e&&(e=l(e)),null!=t&&(t=l(t)),Array.isArray(e))for(o=0,a=e.length;o<a;o++)n=e[o],this.instruction(n);else if(p(e))for(n in e)m.call(e,n)&&(i=e[n],this.instruction(n,i));else h(t)&&(t=t.apply()),r=new s(this,e,t),this.children.push(r);return this},e.prototype.instructionBefore=function(e,t){var n,i;return n=this.parent.children.indexOf(this),i=this.parent.children.splice(n),this.parent.instruction(e,t),Array.prototype.push.apply(this.parent.children,i),this},e.prototype.instructionAfter=function(e,t){var n,i;return n=this.parent.children.indexOf(this),i=this.parent.children.splice(n+1),this.parent.instruction(e,t),Array.prototype.push.apply(this.parent.children,i),this},e.prototype.declaration=function(e,t,n){var i,o;return i=this.document(),o=new r(i,e,t,n),i.children[0]instanceof r?i.children[0]=o:i.children.unshift(o),i.root()||i},e.prototype.doctype=function(e,t){var n,i,r,a,c,s,u,d,l;for(n=this.document(),i=new o(n,e,t),r=a=0,s=(d=n.children).length;a<s;r=++a)if(d[r]instanceof o)return n.children[r]=i,i;for(r=c=0,u=(l=n.children).length;c<u;r=++c)if(l[r].isRoot)return n.children.splice(r,0,i),i;return n.children.push(i),i},e.prototype.up=function(){if(this.isRoot)throw new Error("The root node has no parent. Use doc() if you need to get the document object.");return this.parent},e.prototype.root=function(){var e;for(e=this;e;){if(e.isDocument)return e.rootObject;if(e.isRoot)return e;e=e.parent}},e.prototype.document=function(){var e;for(e=this;e;){if(e.isDocument)return e;e=e.parent}},e.prototype.end=function(e){return this.document().end(e)},e.prototype.prev=function(){var e;for(e=this.parent.children.indexOf(this);e>0&&this.parent.children[e-1].isDummy;)e-=1;if(e<1)throw new Error("Already at the first node. "+this.debugInfo());return this.parent.children[e-1]},e.prototype.next=function(){var e;for(e=this.parent.children.indexOf(this);e<this.parent.children.length-1&&this.parent.children[e+1].isDummy;)e+=1;if(-1===e||e===this.parent.children.length-1)throw new Error("Already at the last node. "+this.debugInfo());return this.parent.children[e+1]},e.prototype.importDocument=function(e){var t;return(t=e.root().clone()).parent=this,t.isRoot=!1,this.children.push(t),this},e.prototype.debugInfo=function(e){var t,n;return null!=(e=e||this.name)||(null!=(t=this.parent)?t.name:void 0)?null==e?"parent: <"+this.parent.name+">":(null!=(n=this.parent)?n.name:void 0)?"node: <"+e+">, parent: <"+this.parent.name+">":"node: <"+e+">":""},e.prototype.ele=function(e,t,n){return this.element(e,t,n)},e.prototype.nod=function(e,t,n){return this.node(e,t,n)},e.prototype.txt=function(e){return this.text(e)},e.prototype.dat=function(e){return this.cdata(e)},e.prototype.com=function(e){return this.comment(e)},e.prototype.ins=function(e,t){return this.instruction(e,t)},e.prototype.doc=function(){return this.document()},e.prototype.dec=function(e,t,n){return this.declaration(e,t,n)},e.prototype.dtd=function(e,t){return this.doctype(e,t)},e.prototype.e=function(e,t,n){return this.element(e,t,n)},e.prototype.n=function(e,t,n){return this.node(e,t,n)},e.prototype.t=function(e){return this.text(e)},e.prototype.d=function(e){return this.cdata(e)},e.prototype.c=function(e){return this.comment(e)},e.prototype.r=function(e){return this.raw(e)},e.prototype.i=function(e,t){return this.instruction(e,t)},e.prototype.u=function(){return this.up()},e.prototype.importXMLBuilder=function(e){return this.importDocument(e)},e}()}).call(this)},,,function(e,t){var n,i,r=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function c(e){if(n===setTimeout)return setTimeout(e,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(e){n=o}try{i="function"==typeof clearTimeout?clearTimeout:a}catch(e){i=a}}();var s,u=[],d=!1,l=-1;function f(){d&&s&&(d=!1,s.length?u=s.concat(u):l=-1,u.length&&h())}function h(){if(!d){var e=c(f);d=!0;for(var t=u.length;t;){for(s=u,u=[];++l<t;)s&&s[l].run();l=-1,t=u.length}s=null,d=!1,function(e){if(i===clearTimeout)return clearTimeout(e);if((i===a||!i)&&clearTimeout)return i=clearTimeout,clearTimeout(e);try{i(e)}catch(t){try{return i.call(null,e)}catch(t){return i.call(this,e)}}}(e)}}function p(e,t){this.fun=e,this.array=t}function g(){}r.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];u.push(new p(e,t)),1!==u.length||d||c(h)},p.prototype.run=function(){this.fun.apply(null,this.array)},r.title="browser",r.browser=!0,r.env={},r.argv=[],r.version="",r.versions={},r.on=g,r.addListener=g,r.once=g,r.off=g,r.removeListener=g,r.removeAllListeners=g,r.emit=g,r.prependListener=g,r.prependOnceListener=g,r.listeners=function(e){return[]},r.binding=function(e){throw new Error("process.binding is not supported")},r.cwd=function(){return"/"},r.chdir=function(e){throw new Error("process.chdir is not supported")},r.umask=function(){return 0}},,,,,function(e,t,n){var i=n(7);function r(e,t){this.value=e,this.messages=t||[]}function o(e){var t=[];return i.flatten(i.pluck(e,"messages"),!0).forEach((function(e){(function(e,t){return void 0!==i.find(e,a.bind(null,t))})(t,e)||t.push(e)})),t}function a(e,t){return e.type===t.type&&e.message===t.message}t.Result=r,t.success=function(e){return new r(e,[])},t.warning=function(e){return{type:"warning",message:e}},t.error=function(e){return{type:"error",message:e.message,error:e}},r.prototype.map=function(e){return new r(e(this.value),this.messages)},r.prototype.flatMap=function(e){var t=e(this.value);return new r(t.value,o([this,t]))},r.prototype.flatMapThen=function(e){var t=this;return e(this.value).then((function(e){return new r(e.value,o([t,e]))}))},r.combine=function(e){return new r(i.flatten(i.pluck(e,"value")),o(e))}},function(e,t,n){e.exports=function(e){"use strict";var t=["0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f"];function n(e,t){var n=e[0],i=e[1],r=e[2],o=e[3];i=((i+=((r=((r+=((o=((o+=((n=((n+=(i&r|~i&o)+t[0]-680876936|0)<<7|n>>>25)+i|0)&i|~n&r)+t[1]-389564586|0)<<12|o>>>20)+n|0)&n|~o&i)+t[2]+606105819|0)<<17|r>>>15)+o|0)&o|~r&n)+t[3]-1044525330|0)<<22|i>>>10)+r|0,i=((i+=((r=((r+=((o=((o+=((n=((n+=(i&r|~i&o)+t[4]-176418897|0)<<7|n>>>25)+i|0)&i|~n&r)+t[5]+1200080426|0)<<12|o>>>20)+n|0)&n|~o&i)+t[6]-1473231341|0)<<17|r>>>15)+o|0)&o|~r&n)+t[7]-45705983|0)<<22|i>>>10)+r|0,i=((i+=((r=((r+=((o=((o+=((n=((n+=(i&r|~i&o)+t[8]+1770035416|0)<<7|n>>>25)+i|0)&i|~n&r)+t[9]-1958414417|0)<<12|o>>>20)+n|0)&n|~o&i)+t[10]-42063|0)<<17|r>>>15)+o|0)&o|~r&n)+t[11]-1990404162|0)<<22|i>>>10)+r|0,i=((i+=((r=((r+=((o=((o+=((n=((n+=(i&r|~i&o)+t[12]+1804603682|0)<<7|n>>>25)+i|0)&i|~n&r)+t[13]-40341101|0)<<12|o>>>20)+n|0)&n|~o&i)+t[14]-1502002290|0)<<17|r>>>15)+o|0)&o|~r&n)+t[15]+1236535329|0)<<22|i>>>10)+r|0,i=((i+=((r=((r+=((o=((o+=((n=((n+=(i&o|r&~o)+t[1]-165796510|0)<<5|n>>>27)+i|0)&r|i&~r)+t[6]-1069501632|0)<<9|o>>>23)+n|0)&i|n&~i)+t[11]+643717713|0)<<14|r>>>18)+o|0)&n|o&~n)+t[0]-373897302|0)<<20|i>>>12)+r|0,i=((i+=((r=((r+=((o=((o+=((n=((n+=(i&o|r&~o)+t[5]-701558691|0)<<5|n>>>27)+i|0)&r|i&~r)+t[10]+38016083|0)<<9|o>>>23)+n|0)&i|n&~i)+t[15]-660478335|0)<<14|r>>>18)+o|0)&n|o&~n)+t[4]-405537848|0)<<20|i>>>12)+r|0,i=((i+=((r=((r+=((o=((o+=((n=((n+=(i&o|r&~o)+t[9]+568446438|0)<<5|n>>>27)+i|0)&r|i&~r)+t[14]-1019803690|0)<<9|o>>>23)+n|0)&i|n&~i)+t[3]-187363961|0)<<14|r>>>18)+o|0)&n|o&~n)+t[8]+1163531501|0)<<20|i>>>12)+r|0,i=((i+=((r=((r+=((o=((o+=((n=((n+=(i&o|r&~o)+t[13]-1444681467|0)<<5|n>>>27)+i|0)&r|i&~r)+t[2]-51403784|0)<<9|o>>>23)+n|0)&i|n&~i)+t[7]+1735328473|0)<<14|r>>>18)+o|0)&n|o&~n)+t[12]-1926607734|0)<<20|i>>>12)+r|0,i=((i+=((r=((r+=((o=((o+=((n=((n+=(i^r^o)+t[5]-378558|0)<<4|n>>>28)+i|0)^i^r)+t[8]-2022574463|0)<<11|o>>>21)+n|0)^n^i)+t[11]+1839030562|0)<<16|r>>>16)+o|0)^o^n)+t[14]-35309556|0)<<23|i>>>9)+r|0,i=((i+=((r=((r+=((o=((o+=((n=((n+=(i^r^o)+t[1]-1530992060|0)<<4|n>>>28)+i|0)^i^r)+t[4]+1272893353|0)<<11|o>>>21)+n|0)^n^i)+t[7]-155497632|0)<<16|r>>>16)+o|0)^o^n)+t[10]-1094730640|0)<<23|i>>>9)+r|0,i=((i+=((r=((r+=((o=((o+=((n=((n+=(i^r^o)+t[13]+681279174|0)<<4|n>>>28)+i|0)^i^r)+t[0]-358537222|0)<<11|o>>>21)+n|0)^n^i)+t[3]-722521979|0)<<16|r>>>16)+o|0)^o^n)+t[6]+76029189|0)<<23|i>>>9)+r|0,i=((i+=((r=((r+=((o=((o+=((n=((n+=(i^r^o)+t[9]-640364487|0)<<4|n>>>28)+i|0)^i^r)+t[12]-421815835|0)<<11|o>>>21)+n|0)^n^i)+t[15]+530742520|0)<<16|r>>>16)+o|0)^o^n)+t[2]-995338651|0)<<23|i>>>9)+r|0,i=((i+=((o=((o+=(i^((n=((n+=(r^(i|~o))+t[0]-198630844|0)<<6|n>>>26)+i|0)|~r))+t[7]+1126891415|0)<<10|o>>>22)+n|0)^((r=((r+=(n^(o|~i))+t[14]-1416354905|0)<<15|r>>>17)+o|0)|~n))+t[5]-57434055|0)<<21|i>>>11)+r|0,i=((i+=((o=((o+=(i^((n=((n+=(r^(i|~o))+t[12]+1700485571|0)<<6|n>>>26)+i|0)|~r))+t[3]-1894986606|0)<<10|o>>>22)+n|0)^((r=((r+=(n^(o|~i))+t[10]-1051523|0)<<15|r>>>17)+o|0)|~n))+t[1]-2054922799|0)<<21|i>>>11)+r|0,i=((i+=((o=((o+=(i^((n=((n+=(r^(i|~o))+t[8]+1873313359|0)<<6|n>>>26)+i|0)|~r))+t[15]-30611744|0)<<10|o>>>22)+n|0)^((r=((r+=(n^(o|~i))+t[6]-1560198380|0)<<15|r>>>17)+o|0)|~n))+t[13]+1309151649|0)<<21|i>>>11)+r|0,i=((i+=((o=((o+=(i^((n=((n+=(r^(i|~o))+t[4]-145523070|0)<<6|n>>>26)+i|0)|~r))+t[11]-1120210379|0)<<10|o>>>22)+n|0)^((r=((r+=(n^(o|~i))+t[2]+718787259|0)<<15|r>>>17)+o|0)|~n))+t[9]-343485551|0)<<21|i>>>11)+r|0,e[0]=n+e[0]|0,e[1]=i+e[1]|0,e[2]=r+e[2]|0,e[3]=o+e[3]|0}function i(e){var t,n=[];for(t=0;t<64;t+=4)n[t>>2]=e.charCodeAt(t)+(e.charCodeAt(t+1)<<8)+(e.charCodeAt(t+2)<<16)+(e.charCodeAt(t+3)<<24);return n}function r(e){var t,n=[];for(t=0;t<64;t+=4)n[t>>2]=e[t]+(e[t+1]<<8)+(e[t+2]<<16)+(e[t+3]<<24);return n}function o(e){var t,r,o,a,c,s,u=e.length,d=[1732584193,-271733879,-1732584194,271733878];for(t=64;t<=u;t+=64)n(d,i(e.substring(t-64,t)));for(r=(e=e.substring(t-64)).length,o=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],t=0;t<r;t+=1)o[t>>2]|=e.charCodeAt(t)<<(t%4<<3);if(o[t>>2]|=128<<(t%4<<3),t>55)for(n(d,o),t=0;t<16;t+=1)o[t]=0;return a=(a=8*u).toString(16).match(/(.*?)(.{0,8})$/),c=parseInt(a[2],16),s=parseInt(a[1],16)||0,o[14]=c,o[15]=s,n(d,o),d}function a(e){var n,i="";for(n=0;n<4;n+=1)i+=t[e>>8*n+4&15]+t[e>>8*n&15];return i}function c(e){var t;for(t=0;t<e.length;t+=1)e[t]=a(e[t]);return e.join("")}function s(e){return/[\u0080-\uFFFF]/.test(e)&&(e=unescape(encodeURIComponent(e))),e}function u(e){var t,n=[],i=e.length;for(t=0;t<i-1;t+=2)n.push(parseInt(e.substr(t,2),16));return String.fromCharCode.apply(String,n)}function d(){this.reset()}return c(o("hello")),"undefined"==typeof ArrayBuffer||ArrayBuffer.prototype.slice||function(){function t(e,t){return(e=0|e||0)<0?Math.max(e+t,0):Math.min(e,t)}ArrayBuffer.prototype.slice=function(n,i){var r,o,a,c,s=this.byteLength,u=t(n,s),d=s;return i!==e&&(d=t(i,s)),u>d?new ArrayBuffer(0):(r=d-u,o=new ArrayBuffer(r),a=new Uint8Array(o),c=new Uint8Array(this,u,r),a.set(c),o)}}(),d.prototype.append=function(e){return this.appendBinary(s(e)),this},d.prototype.appendBinary=function(e){this._buff+=e,this._length+=e.length;var t,r=this._buff.length;for(t=64;t<=r;t+=64)n(this._hash,i(this._buff.substring(t-64,t)));return this._buff=this._buff.substring(t-64),this},d.prototype.end=function(e){var t,n,i=this._buff,r=i.length,o=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];for(t=0;t<r;t+=1)o[t>>2]|=i.charCodeAt(t)<<(t%4<<3);return this._finish(o,r),n=c(this._hash),e&&(n=u(n)),this.reset(),n},d.prototype.reset=function(){return this._buff="",this._length=0,this._hash=[1732584193,-271733879,-1732584194,271733878],this},d.prototype.getState=function(){return{buff:this._buff,length:this._length,hash:this._hash.slice()}},d.prototype.setState=function(e){return this._buff=e.buff,this._length=e.length,this._hash=e.hash,this},d.prototype.destroy=function(){delete this._hash,delete this._buff,delete this._length},d.prototype._finish=function(e,t){var i,r,o,a=t;if(e[a>>2]|=128<<(a%4<<3),a>55)for(n(this._hash,e),a=0;a<16;a+=1)e[a]=0;i=(i=8*this._length).toString(16).match(/(.*?)(.{0,8})$/),r=parseInt(i[2],16),o=parseInt(i[1],16)||0,e[14]=r,e[15]=o,n(this._hash,e)},d.hash=function(e,t){return d.hashBinary(s(e),t)},d.hashBinary=function(e,t){var n=c(o(e));return t?u(n):n},d.ArrayBuffer=function(){this.reset()},d.ArrayBuffer.prototype.append=function(e){var t,i,o,a,c,s=(i=this._buff.buffer,o=e,a=!0,(c=new Uint8Array(i.byteLength+o.byteLength)).set(new Uint8Array(i)),c.set(new Uint8Array(o),i.byteLength),a?c:c.buffer),u=s.length;for(this._length+=e.byteLength,t=64;t<=u;t+=64)n(this._hash,r(s.subarray(t-64,t)));return this._buff=t-64<u?new Uint8Array(s.buffer.slice(t-64)):new Uint8Array(0),this},d.ArrayBuffer.prototype.end=function(e){var t,n,i=this._buff,r=i.length,o=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];for(t=0;t<r;t+=1)o[t>>2]|=i[t]<<(t%4<<3);return this._finish(o,r),n=c(this._hash),e&&(n=u(n)),this.reset(),n},d.ArrayBuffer.prototype.reset=function(){return this._buff=new Uint8Array(0),this._length=0,this._hash=[1732584193,-271733879,-1732584194,271733878],this},d.ArrayBuffer.prototype.getState=function(){var e,t=d.prototype.getState.call(this);return t.buff=(e=t.buff,String.fromCharCode.apply(null,new Uint8Array(e))),t},d.ArrayBuffer.prototype.setState=function(e){return e.buff=function(e,t){var n,i=e.length,r=new ArrayBuffer(i),o=new Uint8Array(r);for(n=0;n<i;n+=1)o[n]=e.charCodeAt(n);return t?o:r}(e.buff,!0),d.prototype.setState.call(this,e)},d.ArrayBuffer.prototype.destroy=d.prototype.destroy,d.ArrayBuffer.prototype._finish=d.prototype._finish,d.ArrayBuffer.hash=function(e,t){var i=c(function(e){var t,i,o,a,c,s,u=e.length,d=[1732584193,-271733879,-1732584194,271733878];for(t=64;t<=u;t+=64)n(d,r(e.subarray(t-64,t)));for(e=t-64<u?e.subarray(t-64):new Uint8Array(0),i=e.length,o=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],t=0;t<i;t+=1)o[t>>2]|=e[t]<<(t%4<<3);if(o[t>>2]|=128<<(t%4<<3),t>55)for(n(d,o),t=0;t<16;t+=1)o[t]=0;return a=(a=8*u).toString(16).match(/(.*?)(.{0,8})$/),c=parseInt(a[2],16),s=parseInt(a[1],16)||0,o[14]=c,o[15]=s,n(d,o),d}(new Uint8Array(e)));return t?u(i):i},d}()},,,function(e,t,n){var i=n(7),r=n(389)();t.defer=function(){var e,t,n=new r.Promise((function(n,i){e=n,t=i}));return{resolve:e,reject:t,promise:n}},t.when=r.resolve,t.resolve=r.resolve,t.all=r.all,t.props=r.props,t.reject=r.reject,t.promisify=r.promisify,t.mapSeries=r.mapSeries,t.attempt=r.attempt,t.nfcall=function(e){var t=Array.prototype.slice.call(arguments,1),n=r.promisify(e);return n.apply(null,t)},r.prototype.fail=r.prototype.caught,r.prototype.also=function(e){return this.then((function(t){var n=i.extend({},t,e(t));return r.props(n)}))}},function(e,t,n){"use strict";var i,r,o=n(40),a=o.freeze,c=n(5),s=c.inherits,u=c.notEnumerableProp;function d(e,t){function n(i){if(!(this instanceof n))return new n(i);u(this,"message","string"==typeof i?i:t),u(this,"name",e),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):Error.call(this)}return s(n,Error),n}var l=d("Warning","warning"),f=d("CancellationError","cancellation error"),h=d("TimeoutError","timeout error"),p=d("AggregateError","aggregate error");try{i=TypeError,r=RangeError}catch(e){i=d("TypeError","type error"),r=d("RangeError","range error")}for(var g="join pop push shift unshift slice filter forEach some every map indexOf lastIndexOf reduce reduceRight sort reverse".split(" "),m=0;m<g.length;++m)"function"==typeof Array.prototype[g[m]]&&(p.prototype[g[m]]=Array.prototype[g[m]]);o.defineProperty(p.prototype,"length",{value:0,configurable:!1,writable:!0,enumerable:!0}),p.prototype.isOperational=!0;var y=0;function b(e){if(!(this instanceof b))return new b(e);u(this,"name","OperationalError"),u(this,"message",e),this.cause=e,this.isOperational=!0,e instanceof Error?(u(this,"message",e.message),u(this,"stack",e.stack)):Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}p.prototype.toString=function(){var e=Array(4*y+1).join(" "),t="\n"+e+"AggregateError of:\n";y++,e=Array(4*y+1).join(" ");for(var n=0;n<this.length;++n){for(var i=this[n]===this?"[Circular AggregateError]":this[n]+"",r=i.split("\n"),o=0;o<r.length;++o)r[o]=e+r[o];t+=(i=r.join("\n"))+"\n"}return y--,t},s(b,Error);var v=Error.__BluebirdErrorTypes__;v||(v=a({CancellationError:f,TimeoutError:h,OperationalError:b,RejectionError:b,AggregateError:p}),o.defineProperty(Error,"__BluebirdErrorTypes__",{value:v,writable:!1,enumerable:!1,configurable:!1})),e.exports={Error:Error,TypeError:i,RangeError:r,CancellationError:v.CancellationError,OperationalError:v.OperationalError,TimeoutError:v.TimeoutError,AggregateError:v.AggregateError,Warning:l}},function(e,t){(function(){var t,n,i,r,o,a,c,s=[].slice,u={}.hasOwnProperty;t=function(){var e,t,n,i,r,a;if(a=arguments[0],r=2<=arguments.length?s.call(arguments,1):[],o(Object.assign))Object.assign.apply(null,arguments);else for(e=0,n=r.length;e<n;e++)if(null!=(i=r[e]))for(t in i)u.call(i,t)&&(a[t]=i[t]);return a},o=function(e){return!!e&&"[object Function]"===Object.prototype.toString.call(e)},a=function(e){var t;return!!e&&("function"==(t=typeof e)||"object"===t)},i=function(e){return o(Array.isArray)?Array.isArray(e):"[object Array]"===Object.prototype.toString.call(e)},r=function(e){var t;if(i(e))return!e.length;for(t in e)if(u.call(e,t))return!1;return!0},c=function(e){var t,n;return a(e)&&(n=Object.getPrototypeOf(e))&&(t=n.constructor)&&"function"==typeof t&&t instanceof t&&Function.prototype.toString.call(t)===Function.prototype.toString.call(Object)},n=function(e){return o(e.valueOf)?e.valueOf():e},e.exports.assign=t,e.exports.isFunction=o,e.exports.isObject=a,e.exports.isArray=i,e.exports.isEmpty=r,e.exports.isPlainObject=c,e.exports.getValue=n}).call(this)},,,,,,function(e,t,n){(function(e){var i=n(7),r=t.types={document:"document",paragraph:"paragraph",run:"run",text:"text",tab:"tab",hyperlink:"hyperlink",noteReference:"noteReference",image:"image",note:"note",commentReference:"commentReference",comment:"comment",table:"table",tableRow:"tableRow",tableCell:"tableCell",break:"break",bookmarkStart:"bookmarkStart"};var o={baseline:"baseline",superscript:"superscript",subscript:"subscript"};function a(e){this._notes=i.indexBy(e,(function(e){return c(e.noteType,e.noteId)}))}function c(e,t){return e+"-"+t}function s(e){return{type:r.break,breakType:e}}a.prototype.resolve=function(e){return this.findNoteByKey(c(e.noteType,e.noteId))},a.prototype.findNoteByKey=function(e){return this._notes[e]||null},t.document=t.Document=function(e,t){return{type:r.document,children:e,notes:(t=t||{}).notes||new a({}),comments:t.comments||[]}},t.paragraph=t.Paragraph=function(e,t){var n=(t=t||{}).indent||{};return{type:r.paragraph,children:e,styleId:t.styleId||null,styleName:t.styleName||null,numbering:t.numbering||null,alignment:t.alignment||null,indent:{start:n.start||null,end:n.end||null,firstLine:n.firstLine||null,hanging:n.hanging||null}}},t.run=t.Run=function(e,t){return{type:r.run,children:e,styleId:(t=t||{}).styleId||null,styleName:t.styleName||null,isBold:!!t.isBold,isUnderline:!!t.isUnderline,isItalic:!!t.isItalic,isStrikethrough:!!t.isStrikethrough,isAllCaps:!!t.isAllCaps,isSmallCaps:!!t.isSmallCaps,verticalAlignment:t.verticalAlignment||o.baseline,font:t.font||null,fontSize:t.fontSize||null}},t.text=t.Text=function(e){return{type:r.text,value:e}},t.tab=t.Tab=function(){return{type:r.tab}},t.Hyperlink=function(e,t){return{type:r.hyperlink,children:e,href:t.href,anchor:t.anchor,targetFrame:t.targetFrame}},t.noteReference=t.NoteReference=function(e){return{type:r.noteReference,noteType:e.noteType,noteId:e.noteId}},t.Notes=a,t.Note=function(e){return{type:r.note,noteType:e.noteType,noteId:e.noteId,body:e.body}},t.commentReference=function(e){return{type:r.commentReference,commentId:e.commentId}},t.comment=function(e){return{type:r.comment,commentId:e.commentId,body:e.body,authorName:e.authorName,authorInitials:e.authorInitials}},t.Image=function(t){return{type:r.image,read:function(n){return n?t.readImage(n):t.readImage().then((function(t){return e.from(t)}))},readAsArrayBuffer:function(){return t.readImage()},readAsBase64String:function(){return t.readImage("base64")},readAsBuffer:function(){return t.readImage().then((function(t){return e.from(t)}))},altText:t.altText,contentType:t.contentType}},t.Table=function(e,t){return{type:r.table,children:e,styleId:(t=t||{}).styleId||null,styleName:t.styleName||null}},t.TableRow=function(e,t){return{type:r.tableRow,children:e,isHeader:(t=t||{}).isHeader||!1}},t.TableCell=function(e,t){return{type:r.tableCell,children:e,colSpan:null==(t=t||{}).colSpan?1:t.colSpan,rowSpan:null==t.rowSpan?1:t.rowSpan}},t.lineBreak=s("line"),t.pageBreak=s("page"),t.columnBreak=s("column"),t.BookmarkStart=function(e){return{type:r.bookmarkStart,name:e.name}},t.verticalAlignment=o}).call(this,n(100).Buffer)},function(e,t,n){"use strict";function i(e,t,n){var i=n[n.length-1];e===i.element&&(n.pop(),i=n[n.length-1]);var r=i.element,o=i.index;if(Array.isArray(r))r.push(e);else if(o===t.length-2){r[t.pop()]=e}else t.push(e)}t.stringify=function(e){var t=[];t.push({obj:e});for(var n,i,r,o,a,c,s,u,d,l,f="";n=t.pop();)if(i=n.obj,f+=n.prefix||"",r=n.val||"")f+=r;else if("object"!=typeof i)f+=void 0===i?null:JSON.stringify(i);else if(null===i)f+="null";else if(Array.isArray(i)){for(t.push({val:"]"}),o=i.length-1;o>=0;o--)a=0===o?"":",",t.push({obj:i[o],prefix:a});t.push({val:"["})}else{for(s in c=[],i)i.hasOwnProperty(s)&&c.push(s);for(t.push({val:"}"}),o=c.length-1;o>=0;o--)d=i[u=c[o]],l=o>0?",":"",l+=JSON.stringify(u)+":",t.push({obj:d,prefix:l});t.push({val:"{"})}return f},t.parse=function(e){for(var t,n,r,o,a,c,s,u,d,l=[],f=[],h=0;;)if("}"!==(t=e[h++])&&"]"!==t&&void 0!==t)switch(t){case" ":case"\t":case"\n":case":":case",":break;case"n":h+=3,i(null,l,f);break;case"t":h+=3,i(!0,l,f);break;case"f":h+=4,i(!1,l,f);break;case"0":case"1":case"2":case"3":case"4":case"5":case"6":case"7":case"8":case"9":case"-":for(n="",h--;;){if(r=e[h++],!/[\d\.\-e\+]/.test(r)){h--;break}n+=r}i(parseFloat(n),l,f);break;case'"':for(o="",a=void 0,c=0;'"'!==(s=e[h++])||"\\"===a&&c%2==1;)o+=s,"\\"===(a=s)?c++:c=0;i(JSON.parse('"'+o+'"'),l,f);break;case"[":u={element:[],index:l.length},l.push(u.element),f.push(u);break;case"{":d={element:{},index:l.length},l.push(d.element),f.push(d);break;default:throw new Error("unexpectedly reached end of input: "+t)}else{if(1===l.length)return l.pop();i(l.pop(),l,f)}}},function(e,t,n){"use strict";var i,r=new Uint8Array(16);function o(){if(!i&&!(i="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return i(r)}var a=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;for(var c=function(e){return"string"==typeof e&&a.test(e)},s=[],u=0;u<256;++u)s.push((u+256).toString(16).substr(1));var d=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=(s[e[t+0]]+s[e[t+1]]+s[e[t+2]]+s[e[t+3]]+"-"+s[e[t+4]]+s[e[t+5]]+"-"+s[e[t+6]]+s[e[t+7]]+"-"+s[e[t+8]]+s[e[t+9]]+"-"+s[e[t+10]]+s[e[t+11]]+s[e[t+12]]+s[e[t+13]]+s[e[t+14]]+s[e[t+15]]).toLowerCase();if(!c(n))throw TypeError("Stringified UUID is invalid");return n};t.a=function(e,t,n){var i=(e=e||{}).random||(e.rng||o)();if(i[6]=15&i[6]|64,i[8]=63&i[8]|128,t){n=n||0;for(var r=0;r<16;++r)t[n+r]=i[r];return t}return d(i)}},,,function(e,t){var n=function(){"use strict";return void 0===this}();if(n)e.exports={freeze:Object.freeze,defineProperty:Object.defineProperty,getDescriptor:Object.getOwnPropertyDescriptor,keys:Object.keys,names:Object.getOwnPropertyNames,getPrototypeOf:Object.getPrototypeOf,isArray:Array.isArray,isES5:n,propertyIsWritable:function(e,t){var n=Object.getOwnPropertyDescriptor(e,t);return!(n&&!n.writable&&!n.set)}};else{var i={}.hasOwnProperty,r={}.toString,o={}.constructor.prototype,a=function(e){var t=[];for(var n in e)i.call(e,n)&&t.push(n);return t};e.exports={isArray:function(e){try{return"[object Array]"===r.call(e)}catch(e){return!1}},keys:a,names:a,defineProperty:function(e,t,n){return e[t]=n.value,e},getDescriptor:function(e,t){return{value:e[t]}},freeze:function(e){return e},getPrototypeOf:function(e){try{return Object(e).constructor.prototype}catch(e){return o}},isES5:n,propertyIsWritable:function(){return!0}}}},,,,,,function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FileSystemManager=t.FileSystemTools=t.EntryType=void 0;var i=n(382);Object.defineProperty(t,"EntryType",{enumerable:!0,get:function(){return i.EntryType}});var r=n(383);Object.defineProperty(t,"FileSystemTools",{enumerable:!0,get:function(){return r.FileSystemTools}});var o=n(384);Object.defineProperty(t,"FileSystemManager",{enumerable:!0,get:function(){return o.FileSystemManager}})},,function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ModalWindow=t.ModalWindowView=void 0;const i=n(75),r=n(76);var o,a;!function(e){e[e.EDIT_TEXT=0]="EDIT_TEXT",e[e.HOTKEYS=1]="HOTKEYS",e[e.ERROR_LOG=2]="ERROR_LOG",e[e.DOCUMENT_UPLOAD=3]="DOCUMENT_UPLOAD",e[e.MOVE_TO=4]="MOVE_TO",e[e.NEW_FOLDER=5]="NEW_FOLDER",e[e.RENAME=6]="RENAME"}(o||(t.ModalWindowView=o={})),function(e){e[e.OPEN=0]="OPEN",e[e.CLOSED=1]="CLOSED"}(a||(a={}));t.ModalWindow=class{constructor(){this.openEditSylTextModalWindow=function(){Array.from(document.getElementsByClassName("cress-modal-window-content")).forEach(e=>{e.classList.remove("visible")}),document.getElementById("cress-modal-window-content-edit-text").classList.add("visible"),document.getElementById("cress-modal-window-edit-text-cancel").removeEventListener("click",this.hideModalWindow),document.getElementById("cress-modal-window-edit-text-cancel").addEventListener("click",this.hideModalWindow.bind(this)),document.getElementById("cress-modal-window-edit-text-save").removeEventListener("click",this.updateSylText.bind(this)),document.getElementById("cress-modal-window-edit-text-save").addEventListener("click",this.updateSylText.bind(this)),document.getElementById("cress-modal-window-container").style.display="flex",this.focusModalWindow()},this.updateSylText=function(){this.hideModalWindow()},this.keydownListener=function(e){switch(e.stopImmediatePropagation(),this.modalWindowView){case o.EDIT_TEXT:"Enter"===e.key&&this.updateSylText();default:"Escape"===e.key&&this.hideModalWindow()}},this.focusModalWindow=function(){switch(this.modalWindowView){case o.EDIT_TEXT:document.getElementById("cress-modal-window-edit-text-input").select();break;case o.DOCUMENT_UPLOAD:case o.NEW_FOLDER:case o.RENAME:break;default:document.getElementById("cress-modal-window").focus()}},this.modalWindowState=a.CLOSED,this.setupEventListeners()}setupEventListeners(){document.getElementById("cress-modal-window-header-close").addEventListener("click",this.hideModalWindow.bind(this)),document.getElementById("cress-modal-window").addEventListener("keydown",this.keydownListener.bind(this)),document.getElementById("cress-modal-window-container").addEventListener("click",this.focusModalWindow.bind(this))}removeEventListeners(){document.getElementById("cress-modal-window-header-close").removeEventListener("click",this.hideModalWindow.bind(this)),document.getElementById("cress-modal-window").removeEventListener("keydown",this.keydownListener.bind(this)),document.getElementById("cress-modal-window-container").removeEventListener("click",this.focusModalWindow.bind(this))}setModalWindowView(e,t){this.modalWindowView=e,this.setModalWindowContent(t)}getModalWindowView(){return this.modalWindowView.toString()}openModalWindow(){switch(Array.from(document.getElementsByClassName("cress-modal-window-content")).forEach(e=>{e.classList.remove("visible")}),this.modalWindowView){case o.EDIT_TEXT:this.openEditSylTextModalWindow();break;case o.HOTKEYS:document.getElementById("cress-modal-window-content-hotkeys").classList.add("visible");case o.DOCUMENT_UPLOAD:case o.MOVE_TO:case o.NEW_FOLDER:case o.RENAME:default:document.getElementById("cress-modal-window-container").style.display="flex",this.focusModalWindow()}document.body.style.overflowX="hidden",document.body.style.overflowY="hidden",this.modalWindowState=a.OPEN}hideModalWindow(){switch(this.modalWindowView){case o.EDIT_TEXT:document.getElementById("syl_text").querySelectorAll("span.selected-to-edit")[0].classList.remove("selected-to-edit");break;case o.DOCUMENT_UPLOAD:case o.MOVE_TO:case o.NEW_FOLDER:case o.RENAME:document.getElementById("cress-modal-window-content-container").innerHTML=""}document.getElementById("cress-modal-window-container").style.display="none",document.body.style.overflowX="hidden",document.body.style.overflowY="scroll",this.modalWindowState=a.CLOSED,this.removeEventListeners()}setModalWindowContent(e){const t=document.getElementById("cress-modal-window-content-container"),n=document.getElementById("cress-modal-window-header-title");switch(this.modalWindowView){case o.EDIT_TEXT:t.innerHTML=i.editTextModal,n.innerText="EDIT SYLLABLE TEXT";const a=/\u{25CA}/u,c=document.getElementById("syl_text").querySelectorAll("span.selected-to-edit")[0].textContent.replace(a,"").trim();document.getElementById("cress-modal-window-edit-text-input").value=c;break;case o.HOTKEYS:t.innerHTML=i.hotkeysModal,n.innerText="HOTKEYS";break;case o.ERROR_LOG:t.innerHTML=`<div style="margin-bottom: 30px;white-space: pre-line;">${e}</div>\n          <div class="cress-modal-window-btn">\n            <a href="data:text/plain;charset=utf-8,${encodeURI(e)}" download="error.log">\n              Export\n            </a>\n            </div>`,n.innerText="ERROR LOG";break;case o.DOCUMENT_UPLOAD:n.innerText="DOCUMENT UPLOAD",t.innerHTML=r.uploadAreaHTML;break;case o.MOVE_TO:n.innerText="MOVE TO";break;case o.NEW_FOLDER:n.innerText="NEW FOLDER",t.innerHTML=r.newFolderHTML;break;case o.RENAME:n.innerText="RENAME",t.innerHTML=r.renameHTML;break;default:console.error("Unknown selection type. This should not have occurred.")}}updateSelectedBBox(e){}}},,,,,,,,,,,function(e,t,n){"use strict";function i(e,t){return void 0===t&&(t=Object),t&&"function"==typeof t.freeze?t.freeze(e):e}var r=i({HTML:"text/html",isHTML:function(e){return e===r.HTML},XML_APPLICATION:"application/xml",XML_TEXT:"text/xml",XML_XHTML_APPLICATION:"application/xhtml+xml",XML_SVG_IMAGE:"image/svg+xml"}),o=i({HTML:"http://www.w3.org/1999/xhtml",isHTML:function(e){return e===o.HTML},SVG:"http://www.w3.org/2000/svg",XML:"http://www.w3.org/XML/1998/namespace",XMLNS:"http://www.w3.org/2000/xmlns/"});t.assign=function(e,t){if(null===e||"object"!=typeof e)throw new TypeError("target is not an object");for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e},t.find=function(e,t,n){if(void 0===n&&(n=Array.prototype),e&&"function"==typeof n.find)return n.find.call(e,t);for(var i=0;i<e.length;i++)if(Object.prototype.hasOwnProperty.call(e,i)){var r=e[i];if(t.call(void 0,r,i,e))return r}},t.freeze=i,t.MIME_TYPE=r,t.NAMESPACE=o},function(e,t,n){(function(){var t,i,r,o,a,c,s={}.hasOwnProperty;c=n(29),a=c.isObject,o=c.isFunction,r=c.getValue,i=n(15),t=n(279),e.exports=function(e){function n(e,t,i){if(n.__super__.constructor.call(this,e),null==t)throw new Error("Missing element name. "+this.debugInfo());this.name=this.stringify.eleName(t),this.attributes={},null!=i&&this.attribute(i),e.isDocument&&(this.isRoot=!0,this.documentObject=e,e.rootObject=this)}return function(e,t){for(var n in t)s.call(t,n)&&(e[n]=t[n]);function i(){this.constructor=e}i.prototype=t.prototype,e.prototype=new i,e.__super__=t.prototype}(n,e),n.prototype.clone=function(){var e,t,n,i;for(t in(n=Object.create(this)).isRoot&&(n.documentObject=null),n.attributes={},i=this.attributes)s.call(i,t)&&(e=i[t],n.attributes[t]=e.clone());return n.children=[],this.children.forEach((function(e){var t;return(t=e.clone()).parent=n,n.children.push(t)})),n},n.prototype.attribute=function(e,n){var i,c;if(null!=e&&(e=r(e)),a(e))for(i in e)s.call(e,i)&&(c=e[i],this.attribute(i,c));else o(n)&&(n=n.apply()),this.options.skipNullAttributes&&null==n||(this.attributes[e]=new t(this,e,n));return this},n.prototype.removeAttribute=function(e){var t,n,i;if(null==e)throw new Error("Missing attribute name. "+this.debugInfo());if(e=r(e),Array.isArray(e))for(n=0,i=e.length;n<i;n++)t=e[n],delete this.attributes[t];else delete this.attributes[e];return this},n.prototype.toString=function(e){return this.options.writer.set(e).element(this)},n.prototype.att=function(e,t){return this.attribute(e,t)},n.prototype.a=function(e,t){return this.attribute(e,t)},n}(i)}).call(this)},function(e,t,n){(function(){var t,i={}.hasOwnProperty;t=n(15),e.exports=function(e){function t(e,n){if(t.__super__.constructor.call(this,e),null==n)throw new Error("Missing CDATA text. "+this.debugInfo());this.text=this.stringify.cdata(n)}return function(e,t){for(var n in t)i.call(t,n)&&(e[n]=t[n]);function r(){this.constructor=e}r.prototype=t.prototype,e.prototype=new r,e.__super__=t.prototype}(t,e),t.prototype.clone=function(){return Object.create(this)},t.prototype.toString=function(e){return this.options.writer.set(e).cdata(this)},t}(t)}).call(this)},function(e,t,n){(function(){var t,i={}.hasOwnProperty;t=n(15),e.exports=function(e){function t(e,n){if(t.__super__.constructor.call(this,e),null==n)throw new Error("Missing comment text. "+this.debugInfo());this.text=this.stringify.comment(n)}return function(e,t){for(var n in t)i.call(t,n)&&(e[n]=t[n]);function r(){this.constructor=e}r.prototype=t.prototype,e.prototype=new r,e.__super__=t.prototype}(t,e),t.prototype.clone=function(){return Object.create(this)},t.prototype.toString=function(e){return this.options.writer.set(e).comment(this)},t}(t)}).call(this)},function(e,t,n){(function(){var t,i,r={}.hasOwnProperty;i=n(29).isObject,t=n(15),e.exports=function(e){function t(e,n,r,o){var a;t.__super__.constructor.call(this,e),i(n)&&(n=(a=n).version,r=a.encoding,o=a.standalone),n||(n="1.0"),this.version=this.stringify.xmlVersion(n),null!=r&&(this.encoding=this.stringify.xmlEncoding(r)),null!=o&&(this.standalone=this.stringify.xmlStandalone(o))}return function(e,t){for(var n in t)r.call(t,n)&&(e[n]=t[n]);function i(){this.constructor=e}i.prototype=t.prototype,e.prototype=new i,e.__super__=t.prototype}(t,e),t.prototype.toString=function(e){return this.options.writer.set(e).declaration(this)},t}(t)}).call(this)},function(e,t,n){(function(){var t,i,r,o,a,c,s={}.hasOwnProperty;c=n(29).isObject,a=n(15),t=n(65),r=n(66),i=n(67),o=n(68),e.exports=function(e){function n(e,t,i){var r,o;n.__super__.constructor.call(this,e),this.name="!DOCTYPE",this.documentObject=e,c(t)&&(t=(r=t).pubID,i=r.sysID),null==i&&(i=(o=[t,i])[0],t=o[1]),null!=t&&(this.pubID=this.stringify.dtdPubID(t)),null!=i&&(this.sysID=this.stringify.dtdSysID(i))}return function(e,t){for(var n in t)s.call(t,n)&&(e[n]=t[n]);function i(){this.constructor=e}i.prototype=t.prototype,e.prototype=new i,e.__super__=t.prototype}(n,e),n.prototype.element=function(e,t){var n;return n=new i(this,e,t),this.children.push(n),this},n.prototype.attList=function(e,n,i,r,o){var a;return a=new t(this,e,n,i,r,o),this.children.push(a),this},n.prototype.entity=function(e,t){var n;return n=new r(this,!1,e,t),this.children.push(n),this},n.prototype.pEntity=function(e,t){var n;return n=new r(this,!0,e,t),this.children.push(n),this},n.prototype.notation=function(e,t){var n;return n=new o(this,e,t),this.children.push(n),this},n.prototype.toString=function(e){return this.options.writer.set(e).docType(this)},n.prototype.ele=function(e,t){return this.element(e,t)},n.prototype.att=function(e,t,n,i,r){return this.attList(e,t,n,i,r)},n.prototype.ent=function(e,t){return this.entity(e,t)},n.prototype.pent=function(e,t){return this.pEntity(e,t)},n.prototype.not=function(e,t){return this.notation(e,t)},n.prototype.up=function(){return this.root()||this.documentObject},n}(a)}).call(this)},function(e,t,n){(function(){var t,i={}.hasOwnProperty;t=n(15),e.exports=function(e){function t(e,n,i,r,o,a){if(t.__super__.constructor.call(this,e),null==n)throw new Error("Missing DTD element name. "+this.debugInfo());if(null==i)throw new Error("Missing DTD attribute name. "+this.debugInfo(n));if(!r)throw new Error("Missing DTD attribute type. "+this.debugInfo(n));if(!o)throw new Error("Missing DTD attribute default. "+this.debugInfo(n));if(0!==o.indexOf("#")&&(o="#"+o),!o.match(/^(#REQUIRED|#IMPLIED|#FIXED|#DEFAULT)$/))throw new Error("Invalid default value type; expected: #REQUIRED, #IMPLIED, #FIXED or #DEFAULT. "+this.debugInfo(n));if(a&&!o.match(/^(#FIXED|#DEFAULT)$/))throw new Error("Default value only applies to #FIXED or #DEFAULT. "+this.debugInfo(n));this.elementName=this.stringify.eleName(n),this.attributeName=this.stringify.attName(i),this.attributeType=this.stringify.dtdAttType(r),this.defaultValue=this.stringify.dtdAttDefault(a),this.defaultValueType=o}return function(e,t){for(var n in t)i.call(t,n)&&(e[n]=t[n]);function r(){this.constructor=e}r.prototype=t.prototype,e.prototype=new r,e.__super__=t.prototype}(t,e),t.prototype.toString=function(e){return this.options.writer.set(e).dtdAttList(this)},t}(t)}).call(this)},function(e,t,n){(function(){var t,i,r={}.hasOwnProperty;i=n(29).isObject,t=n(15),e.exports=function(e){function t(e,n,r,o){if(t.__super__.constructor.call(this,e),null==r)throw new Error("Missing DTD entity name. "+this.debugInfo(r));if(null==o)throw new Error("Missing DTD entity value. "+this.debugInfo(r));if(this.pe=!!n,this.name=this.stringify.eleName(r),i(o)){if(!o.pubID&&!o.sysID)throw new Error("Public and/or system identifiers are required for an external entity. "+this.debugInfo(r));if(o.pubID&&!o.sysID)throw new Error("System identifier is required for a public external entity. "+this.debugInfo(r));if(null!=o.pubID&&(this.pubID=this.stringify.dtdPubID(o.pubID)),null!=o.sysID&&(this.sysID=this.stringify.dtdSysID(o.sysID)),null!=o.nData&&(this.nData=this.stringify.dtdNData(o.nData)),this.pe&&this.nData)throw new Error("Notation declaration is not allowed in a parameter entity. "+this.debugInfo(r))}else this.value=this.stringify.dtdEntityValue(o)}return function(e,t){for(var n in t)r.call(t,n)&&(e[n]=t[n]);function i(){this.constructor=e}i.prototype=t.prototype,e.prototype=new i,e.__super__=t.prototype}(t,e),t.prototype.toString=function(e){return this.options.writer.set(e).dtdEntity(this)},t}(t)}).call(this)},function(e,t,n){(function(){var t,i={}.hasOwnProperty;t=n(15),e.exports=function(e){function t(e,n,i){if(t.__super__.constructor.call(this,e),null==n)throw new Error("Missing DTD element name. "+this.debugInfo());i||(i="(#PCDATA)"),Array.isArray(i)&&(i="("+i.join(",")+")"),this.name=this.stringify.eleName(n),this.value=this.stringify.dtdElementValue(i)}return function(e,t){for(var n in t)i.call(t,n)&&(e[n]=t[n]);function r(){this.constructor=e}r.prototype=t.prototype,e.prototype=new r,e.__super__=t.prototype}(t,e),t.prototype.toString=function(e){return this.options.writer.set(e).dtdElement(this)},t}(t)}).call(this)},function(e,t,n){(function(){var t,i={}.hasOwnProperty;t=n(15),e.exports=function(e){function t(e,n,i){if(t.__super__.constructor.call(this,e),null==n)throw new Error("Missing DTD notation name. "+this.debugInfo(n));if(!i.pubID&&!i.sysID)throw new Error("Public or system identifiers are required for an external entity. "+this.debugInfo(n));this.name=this.stringify.eleName(n),null!=i.pubID&&(this.pubID=this.stringify.dtdPubID(i.pubID)),null!=i.sysID&&(this.sysID=this.stringify.dtdSysID(i.sysID))}return function(e,t){for(var n in t)i.call(t,n)&&(e[n]=t[n]);function r(){this.constructor=e}r.prototype=t.prototype,e.prototype=new r,e.__super__=t.prototype}(t,e),t.prototype.toString=function(e){return this.options.writer.set(e).dtdNotation(this)},t}(t)}).call(this)},function(e,t,n){(function(){var t,i={}.hasOwnProperty;t=n(15),e.exports=function(e){function t(e,n){if(t.__super__.constructor.call(this,e),null==n)throw new Error("Missing raw text. "+this.debugInfo());this.value=this.stringify.raw(n)}return function(e,t){for(var n in t)i.call(t,n)&&(e[n]=t[n]);function r(){this.constructor=e}r.prototype=t.prototype,e.prototype=new r,e.__super__=t.prototype}(t,e),t.prototype.clone=function(){return Object.create(this)},t.prototype.toString=function(e){return this.options.writer.set(e).raw(this)},t}(t)}).call(this)},function(e,t,n){(function(){var t,i={}.hasOwnProperty;t=n(15),e.exports=function(e){function t(e,n){if(t.__super__.constructor.call(this,e),null==n)throw new Error("Missing element text. "+this.debugInfo());this.value=this.stringify.eleText(n)}return function(e,t){for(var n in t)i.call(t,n)&&(e[n]=t[n]);function r(){this.constructor=e}r.prototype=t.prototype,e.prototype=new r,e.__super__=t.prototype}(t,e),t.prototype.clone=function(){return Object.create(this)},t.prototype.toString=function(e){return this.options.writer.set(e).text(this)},t}(t)}).call(this)},function(e,t,n){(function(){var t,i={}.hasOwnProperty;t=n(15),e.exports=function(e){function t(e,n,i){if(t.__super__.constructor.call(this,e),null==n)throw new Error("Missing instruction target. "+this.debugInfo());this.target=this.stringify.insTarget(n),i&&(this.value=this.stringify.insValue(i))}return function(e,t){for(var n in t)i.call(t,n)&&(e[n]=t[n]);function r(){this.constructor=e}r.prototype=t.prototype,e.prototype=new r,e.__super__=t.prototype}(t,e),t.prototype.clone=function(){return Object.create(this)},t.prototype.toString=function(e){return this.options.writer.set(e).processingInstruction(this)},t}(t)}).call(this)},function(e,t,n){var i=n(7),r=n(73);function o(e){return new a(e.map((function(e){return i.isString(e)?c(e):e})))}function a(e){this._elements=e}function c(e,t,n){return new s(e,t,n=n||{})}function s(e,t,n){var r={};i.isArray(e)?(e.forEach((function(e){r[e]=!0})),e=e[0]):r[e]=!0,this.tagName=e,this.tagNames=r,this.attributes=t||{},this.fresh=n.fresh,this.separator=n.separator}t.topLevelElement=function(e,t){return o([c(e,t,{fresh:!0})])},t.elements=o,t.element=c,a.prototype.wrap=function(e){for(var t=e(),n=this._elements.length-1;n>=0;n--)t=this._elements[n].wrapNodes(t);return t},s.prototype.matchesElement=function(e){return this.tagNames[e.tagName]&&i.isEqual(this.attributes||{},e.attributes||{})},s.prototype.wrap=function(e){return this.wrapNodes(e())},s.prototype.wrapNodes=function(e){return[r.elementWithTag(this,e)]},t.empty=o([]),t.ignore={wrap:function(){return[]}}},function(e,t,n){var i=n(282);function r(e,t){t.forEach((function(t){!function(e,t){o[t.type](e,t)}(e,t)}))}t.freshElement=i.freshElement,t.nonFreshElement=i.nonFreshElement,t.elementWithTag=i.elementWithTag,t.text=i.text,t.forceWrite=i.forceWrite,t.simplify=n(448);var o={element:function(e,t){i.isVoidElement(t)?e.selfClosing(t.tag.tagName,t.tag.attributes):(e.open(t.tag.tagName,t.tag.attributes),r(e,t.children),e.close(t.tag.tagName))},text:function(e,t){e.text(t.value)},forceWrite:function(){}};t.write=r},,function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.errorLogsPanelContents=t.syllableActionsContent=t.hotkeysModal=t.editTextModal=t.groupingMenu=t.bboxActionContents=t.divLineActionContents=t.clefActionContents=t.columnActionContents=t.staffMergeActionContents=t.staffSplitActionContents=t.accidActionContents=t.layerElementInActionContents=t.layerElementOutActionContents=t.custosActionContents=t.defaultSylActionContents=t.defaultActionContents=t.neumeActionContents=t.defaultNeumeActionContents=t.ncActionContents=t.editControlsPanel=t.insertControlsPanel=t.insertTabHtml=void 0,t.insertTabHtml={primitiveTab:'<p class="insert-element-container">\n            <button id="punctum" class="side-panel-btn insertel smallel" aria-label="punctum" title="punctum"><img src="/Cress-gh/assets/img/punctum.png" class="image"/></button>\n        </p>\n        <p class="insert-element-container">\n            <button id="virga" class="side-panel-btn insertel smallel" aria-label="virga" title="virga"><img src="/Cress-gh/assets/img/virga.png" class="image"></button>\n        </p>\n        <p class="insert-element-container">\n            <button id="virgaReversed" class="side-panel-btn insertel smallel" aria-label="Reversed Virga" title="Reversed Virga"><img src="/Cress-gh/assets/img/virga_reversed.png" class="image"></button>\n        </p>\n        <p class="insert-element-container">\n            <button id="diamond" class="side-panel-btn insertel smallel" aria-label="inclinatum" title="inclinatum"><img src="/Cress-gh/assets/img/diamond.png" class="image"></button>\n        </p>\n        <p class="insert-element-container">\n            <button id="custos" class="side-panel-btn insertel smallel" aria-label="custos" title="custos"><img src="/Cress-gh/assets/img/custos.png" class="image"></button>\n        </p>\n        <p class="insert-element-container">\n            <button id="cClef" class="side-panel-btn insertel smallel" aria-label="C Clef" title=" C Clef"><img src="/Cress-gh/assets/img/cClef.png" class="image"></button>\n        </p>\n        <p class="insert-element-container">\n            <button id="fClef" class="side-panel-btn insertel smallel" aria-label="F Clef" title="F Clef"><img src="/Cress-gh/assets/img/fClef.png" class="image"></button>\n        </p>\n        <p class="insert-element-container">\n            <button id="liquescentA" class="side-panel-btn insertel smallel" aria-label="Liquescent A" title="Liquescent A"><img src="/Cress-gh/assets/img/liquescentA.png" class="image"></button>\n        </p>\n        <p class="insert-element-container">\n            <button id="liquescentC" class="side-panel-btn insertel smallel" aria-label="Liquescent C" title="Liquescent C"><img src="/Cress-gh/assets/img/liquescentC.png" class="image"></button>\n        </p>\n        <p class="insert-element-container">\n            <button id="flat" class="side-panel-btn insertel smallel" aria-label="Flat" title="Flat"><img src="/Cress-gh/assets/img/accidFlat.png" class="image"></button>\n        </p>\n        <p class="insert-element-container">\n            <button id="natural" class="side-panel-btn insertel smallel" aria-label="Natural" title="Natural"><img src="/Cress-gh/assets/img/accidNatural.png" class="image"></button>\n        </p> \n        <p class="insert-element-container">\n            <button id="divLineMaxima" class="side-panel-btn insertel smallel" aria-label="DivLine Maxima" title="DivLine Maxima"><img src="/Cress-gh/assets/img/divisio.png" class="image"></button>\n        </p>',groupingTab:'<p class="insert-element-container">\n            <button id="pes" class="side-panel-btn insertel smallel" aria-label="pes" title="pes"><img src="/Cress-gh/assets/img/pes.png" class="image"></button>\n        </p>\n        <p class="insert-element-container">\n            <button id="clivis" class="side-panel-btn insertel smallel" aria-label="clivis" title="clivis"><img src="/Cress-gh/assets/img/clivis.png" class="image"></button>\n        </p>\n        <p class="insert-element-container">\n            <button id="scandicus" class="side-panel-btn insertel smallel" aria-label="scandicus" title="scandicus"><img src="/Cress-gh/assets/img/scandicus.png" class="image"></button>\n        </p>\n        <p class="insert-element-container">\n            <button id="climacus" class="side-panel-btn insertel smallel" aria-label="climacus" title="climacus"><img src="/Cress-gh/assets/img/climacus.png" class="image"></button>\n        </p>\n        <p class="insert-element-container">\n            <button id="torculus" class="side-panel-btn insertel smallel" aria-label="toculus" title="toculus"><img src="/Cress-gh/assets/img/torculus.png" class="image"></button>\n        </p>\n        <p class="insert-element-container">\n            <button id="porrectus" class="side-panel-btn insertel smallel" aria-label="porrectus" title="porrectus"><img src="/Cress-gh/assets/img/porrectus.png" class="image"></button>\n        </p>\n        <p class="insert-element-container">\n            <button id="pressus" class="side-panel-btn insertel smallel" aria-label="pressus" title="pressus"><img src="/Cress-gh/assets/img/pressus.png" class="image"></button>\n        </p>',systemTab:'<p class="insert-element-container">\n            <button id="staff" class="side-panel-btn insertel longel" aria-label="system" title="system"><img src="/Cress-gh/assets/img/staff.png" class="image"></button>\n        </p>\n        <p>Click upper left and lower right corners of new staff.</p>'},t.insertControlsPanel='<div class="panel-heading" id="insertMenu">\n        <div class="panel-heading-title">INSERT</div>\n        <svg class="icon is-pulled-right">\n            <use id="toggleInsert" xlink:href="/Cress-gh/assets/img/icons.svg#dropdown-down"></use>\n        </svg>\n    </div>\n\t<div class="panel-content-subsection first-subsection">\n        <div id="insertContents" class="panel-contents" style="overflow-y: hidden;">\n            <p class="panel-tabs">\n                <a id="primitiveTab" class="insertTab">Primitive Elements</a>\n                <a id="groupingTab" class="insertTab">Grouping</a>\n                <a id="systemTab" class="insertTab">System</a>\n            </p>\n            <div id="insert_data"></div>\n        </div>\n    </div>',t.editControlsPanel='<div class="panel-heading" id="editMenu">\n        <div class="panel-heading-title focused">EDIT</div>\n        <svg class="icon is-pulled-right">\n            <use id="toggleEdit" xlink:href="/Cress-gh/assets/img/icons.svg#dropdown-down"></use>\n        </svg>\n    </div>\n    <div id="editContents" class="panel-contents">\n        <div class="panel-content-subsection first-subsection">\n            <div id="selection-mode-container">\n                <div class="panel-sub-title">Selection Mode:</div>\n                <div id="selection-mode-btns-container"  class="right-side-panel-btns-container" style="overflow-x: auto;">\n                    \n                        <button class="side-panel-btn sel-by" id="selBySyllable">Syllable</button>\n                        <button class="side-panel-btn sel-by" id="selByNeume">Neume</button>\n                        <button class="side-panel-btn sel-by" id="selByNc">Neume Component</button>\n                        <button class="side-panel-btn sel-by" id="selByStaff">Staff</button>\n                        <button class="side-panel-btn sel-by" id="selByLayerElement">Layer Element</button>\n                    \n                </div>\n            </div>\n        </div>\n\n        <div id="display-slider-actions-container">\n                <div class="panel-content-subsection hidden">\n                    <div id="moreEdit"></div>\n                </div>\n                <div class="panel-content-subsection hidden">\n                    <div id="extraEdit"></div>\n                </div>\n                    \x3c!--\n                    * The extraEdit panel is added for edit options that have dropdown menus\n                    * Like the Neume and Clef menus\n                    * This is done because the moreEdit menu needs to have overflow for cases where it has lots of buttons\n                    * But overflow ruins dropdown menus\n                    --\x3e\n                <div class="panel-content-subsection hidden">\n                    <div id="neumeEdit"></div>\n                </div>\n                <div class="panel-content-subsection">\n                    <div id="undoRedo_controls"></div>\n                </div>\n        </div>\n    </div>',t.ncActionContents='<label>Change Head Shape:</label>\n    <div class="drop_select dropdown">\n        <div class="dropdown-trigger">\n            <button id="select-options" class="side-panel-btn" aria-haspopup="true" aria-controls="dropdown-menu">\n                <span>Head Shapes</span>\n                <svg class="icon"><use xlink:href="/Cress-gh/assets/img/icons.svg#dropdown-down"></use></svg>\n            </button>\n        </div>\n        <div class="dropdown-menu" id="dropdown-menu" role="menu">\n            <div class="dropdown-content">\n                <a id="Punctum" class="dropdown-item">Punctum</a>\n                <a id="Virga" class="dropdown-item">Virga</a> \n                <a id="VirgaReversed" class="dropdown-item">Reversed Virga</a>\n                <a id="Inclinatum" class="dropdown-item">Inclinatum</a>\n                <a id="LiquescentAnticlockwise" class="dropdown-item">Liquescent A</a>\n                <a id="LiquescentClockwise" class="dropdown-item">Liquescent C</a>\n            </div>\n        </div>\n    </div>',t.defaultNeumeActionContents='<div class="right-side-panel-btns-container">\n        <button class="side-panel-btn" id="delete">Delete</button>\n        <button class="side-panel-btn" id="split-neume">Split Neumes</button>\n    </div>',t.neumeActionContents='<label>Grouping Options:</label>\n    <div class="right-side-panel-btns-container">\n        <div class="drop_select dropdown">\n            <div class="dropdown-trigger">\n                <button id="select-options" class="side-panel-btn" aria-haspopup="true" aria-controls="dropdown-menu">\n                    <span>Groupings</span>\n                    <svg class="icon">\n                        <use xlink:href="/Cress-gh/assets/img/icons.svg#dropdown-down"></use>\n                    </svg>\n                </button>\n            </div>\n            <div class="dropdown-menu" id="dropdown-menu" role="menu">\n            <div class="dropdown-content scrollable-dropdown">\n                <a id="Climacus" class="dropdown-item grouping">Climacus</a>\n                <a id="ClimacusResupinus" class="dropdown-item grouping">Climacus Resupinus</a>\n                <a id="Clivis" class="dropdown-item grouping">Clivis</a>\n                <a id="Pes" class="dropdown-item grouping">Pes</a>\n                <a id="PesSubpunctis" class="dropdown-item grouping">Pes Subpunctis</a>\n                <a id="Porrectus" class="dropdown-item grouping">Porrectus</a>\n                <a id="PorrectusFlexus" class="dropdown-item grouping">Porrectus Flexus</a>\n                <a id="PorrectusSubpunctis" class="dropdown-item grouping">Porrectus Subpunctis</a>\n                <a id="Pressus" class="dropdown-item grouping">Pressus</a>\n                <a id="Scandicus" class="dropdown-item grouping">Scandicus</a>\n                <a id="ScandicusFlexus" class="dropdown-item grouping">Scandicus Flexus</a>\n                <a id="ScandicusSubpunctis" class="dropdown-item grouping">Scandicus Subpunctis</a>\n                <a id="Torculus" class="dropdown-item grouping">Torculus</a>\n                <a id="TorculusResupinus" class="dropdown-item grouping">Torculus Resupinus</a>\n            </div>\n        </div>\n    </div>\n    <button class="side-panel-btn" id="ungroupNcs">Ungroup</button>',t.defaultActionContents='<div class="right-side-panel-btns-container">\n        <button class="side-panel-btn" id="delete">Delete</button>\n    </div>',t.defaultSylActionContents='<button class="side-panel-btn" id="delete">Delete</button>\n    <button class="side-panel-btn" id="changeStaff">Re-associate to nearest staff</button>',t.custosActionContents='<div class="right-side-panel-btns-container">\n        <button class="side-panel-btn" id="delete">Delete</button>\n        <button class="side-panel-btn" id="changeStaff">Re-associate to nearest staff</button>\n    </div>',t.layerElementOutActionContents='<div class="right-side-panel-btns-container">\n        <button class="side-panel-btn" id="delete">Delete</button>\n        <button class="side-panel-btn" id="insertToSyllable">Insert to nearest syllable</button>\n        <button class="side-panel-btn" id="changeStaff">Re-associate to nearest staff</button>\n    </div>',t.layerElementInActionContents='<div class="right-side-panel-btns-container">\n        <button class="side-panel-btn" id="delete">Delete</button>\n        <button class="side-panel-btn" id="moveOutsideSyllable">Move outside syllable</button>\n        <button class="side-panel-btn" id="changeStaff">Re-associate to nearest staff</button>\n    </div>',t.accidActionContents='<label>Change Accidental:</label>\n    <div class="drop_select dropdown">\n        <div class="dropdown-trigger"overflow="auto">\n            <button id="select-options" class="side-panel-btn" aria-haspopup="true" aria-controls="dropdown-menu">\n                <span>Shapes</span>\n                <svg class="icon"><use xlink:href="/Cress-gh/assets/img/icons.svg#dropdown-down"></use></svg>\n            </button>\n        </div>\n        <div class="dropdown-menu" id="dropdown-menu" role="menu">\n            <div class="dropdown-content">\n                <a id="ChangeToFlat" class="dropdown-item">Flat</a>\n                <a id="ChangeToNatural" class="dropdown-item">Natural</a>\n            </div>\n        </div>\n    </div>',t.staffSplitActionContents='<div>Split System:</div>\n    <div id="split-system-btns-container" class="right-side-panel-btns-container">\n        <button id="split-system" class="side-panel-btn">Split</button>\n        <button id="reset-rotate" class="side-panel-btn">Reset Rotate</button>\n        <button class="side-panel-btn" id="delete">Delete</button>\n    </div>',t.staffMergeActionContents='<label>Merge Systems:</label>\n    <div id="merge-system-btns-container" class="right-side-panel-btns-container">\n        <button id="merge-systems" class="side-panel-btn">Merge</button>\n        <button class="side-panel-btn" id="delete">Delete</button>\n    </div>',t.columnActionContents='<div class="col-edit-container">\n        Edit Column Information: \n        <div id="col-stepper-btns-container" class="right-side-panel-btns-container">\n            <button id="col-decrement" class="side-panel-btn col-stepper-btn">–</button>\n            <input type="text" id="col-input" class="side-panel-stepper-input" value="0">\n            <button id="col-increment" class="side-panel-btn col-stepper-btn">+</button>\n            <button id="col-confirm" class="side-panel-btn side-panel-confirm-btn" style="display:none">Confirm</button>\n            <div id="col-warning" class="side-panel-warning"></div> \n        </div>\n    </div>',t.clefActionContents='\n    <div class="right-side-panel-btns-container">\n        <div class="drop_select dropdown">\n            <div class="dropdown-trigger" overflow="auto">\n                <button id="select-options" class="side-panel-btn" aria-haspopup="true" aria-controls="dropdown-menu">\n                    <span>Displace Octave</span>\n                    <svg class="icon"><use xlink:href="/Cress-gh/assets/img/icons.svg#dropdown-down"></use></svg>\n                </button>\n            </div>\n            <div class="dropdown-menu" id="dropdown-menu" role="menu">\n                <div class="dropdown-content">\n                    <a id="increment-octave" class="dropdown-item">+1 Octave</a>\n                    <a id="decrement-octave" class="dropdown-item">-1 Octave</a>\n                </div>\n            </div>\n        </div>\n        <div class="drop_select dropdown">\n            <div class="dropdown-trigger" overflow="auto">\n                <button id="select-options" class="side-panel-btn" aria-haspopup="true" aria-controls="dropdown-menu">\n                    <span>Change Clef Shape</span>\n                    <svg class="icon"><use xlink:href="/Cress-gh/assets/img/icons.svg#dropdown-down"></use></svg>\n                </button>\n            </div>\n            <div class="dropdown-menu" id="dropdown-menu" role="menu">\n                <div class="dropdown-content">\n                    <a id="CClef" class="dropdown-item">C Clef</a>\n                    <a id="FClef" class="dropdown-item">F Clef</a>\n                </div>\n            </div>\n        </div>\n    </div>\n    ',t.divLineActionContents='<label>Change DivLine:</label>\n<div class="drop_select dropdown">\n    <div class="dropdown-trigger"overflow="auto">\n        <button id="select-options" class="side-panel-btn" aria-haspopup="true" aria-controls="dropdown-menu">\n            <span>Shapes</span>\n            <svg class="icon"><use xlink:href="/Cress-gh/assets/img/icons.svg#dropdown-down"></use></svg>\n        </button>\n    </div>\n    <div class="dropdown-menu" id="dropdown-menu" role="menu">\n        <div class="dropdown-content">\n            <a id="ChangeToCaesura" class="dropdown-item">Caesura</a>\n            <a id="ChangeToFinalis" class="dropdown-item">Finalis</a>\n            <a id="ChangeToMinima" class="dropdown-item">Minima</a>\n            <a id="ChangeToMaior" class="dropdown-item">Maior</a>\n            <a id="ChangeToMaxima" class="dropdown-item">Maxima</a>\n            <a id="ChangeToVirgula" class="dropdown-item">Virgula</a>\n        </div>\n    </div>\n</div>',t.bboxActionContents='<div class="right-side-panel-btns-container">\n        <button class="side-panel-btn" id="matchHeight">Match Height for Entire Row</button>\n        <button class="side-panel-btn" id="delete">Delete</button>\n    </div>',t.groupingMenu={nc:'<div class="more-edit-btn panel-btn">\n            <div class="right-side-panel-btns-container">\n                <button class="side-panel-btn more-edit-btn" id="groupNcs">Group Neume Components</button>\n                <button class="side-panel-btn" id="delete">Delete</button>\n            </div>\n        </div>',neume:'<div class="more-edit-btn panel-btn">\n            <div class="right-side-panel-btns-container">\n                <button class="side-panel-btn" id="groupNeumes">Group Neumes</button>\n                <button class="side-panel-btn" id="delete">Delete</button>\n            </div>\n        </div>',syl:'<div class="more-edit-btn panel-btn">\n            <div class="right-side-panel-btns-container">\n                <button class="side-panel-btn" id="mergeSyls">Merge Syllables</button>\n                <button class="side-panel-btn" id="delete">Delete</button>\n                <button class="side-panel-btn" id="changeStaff">Re-associate to nearest staff</button>\n            </div>\n\t\t</div>',ligatureNc:'<div class="more-edit-btn panel-btn">\n                    <div class="right-side-panel-btns-container">\n                        <button class="side-panel-btn" id="groupNcs">Group Neume Components</button>\n                        <button class="side-panel-btn" id="toggle-ligature">Toggle Ligature</button>\n                        <button class="side-panel-btn" id="delete">Delete</button>\n                    </div>\n                </div>',ligature:'<div class="more-edit-btn panel-btn">\n                <div class="right-side-panel-btns-container">\n                    <button class="side-panel-btn" id="toggle-ligature">Toggle Ligature</button>\n                    <button class="side-panel-btn" id="delete">Delete</button>\n                </div>\n            </div>',splitSyllable:'<div class="more-edit-btn panel-btn">\n                    <div class="right-side-panel-btns-container">\n                        <button class="side-panel-btn" id="toggle-link">Toggle Linked Syllables</button>\n                        <button class="side-panel-btn" id="delete">Delete</button>\n                    </div>\n                </div>'},t.editTextModal='<div class="neon-modal-window-content" id="neon-modal-window-content-edit-text">\n        <label for="neon-modal-window-edit-text-input" id="neon-modal-window-edit-text-label">Enter Syllable Text:</label>\n        <input id="neon-modal-window-edit-text-input" type="text">\n        <div id="neon-modal-window-edit-text-btns">\n        <div class="neon-modal-window-btn" id="neon-modal-window-edit-text-cancel">Cancel</div>\n        <div class="neon-modal-window-btn" id="neon-modal-window-edit-text-save">Save</div>        \n        </div>\n    </div>',t.hotkeysModal='\n    <div class="neon-modal-window-content" id="neon-modal-window-content-hotkeys">\n        \x3c!-- "Display" hotkeys --\x3e\n        <div class="hotkey-subcategory-container">\n            <div class="hotkey-subcategory-title">Display</div>\n            <div class="hotkey-entry-container">\n                <div class="hotkey-container">\n                    <div class="hotkey-entry">Shift</div>\n                    <div>+</div>\n                    <div class="hotkey-entry">+</div>\n                </div>\n                <div class="hotkey-entry-description">Zoom In</div>\n            </div>\n            <div class="hotkey-entry-container">\n                <div class="hotkey-container">\n                    <div class="hotkey-entry">Shift</div>\n                    <div>+</div>\n                    <div class="hotkey-entry">-</div>\n                </div>\n                <div class="hotkey-entry-description">Zoom Out</div>\n            </div>\n            <div class="hotkey-entry-container">\n                <div class="hotkey-container">\n                    <div class="hotkey-entry">0</div>\n                </div>\n                <div class="hotkey-entry-description">Zoom Reset</div>\n            </div>\n            <div class="hotkey-entry-container">\n                <div class="hotkey-container">\n                    <div class="hotkey-entry">h</div>\n                </div>\n                <div class="hotkey-entry-description">Hide Glyph</div>\n            </div>\n            <div class="hotkey-entry-container">\n                <div class="hotkey-container">\n                    <div class="hotkey-entry">Shift</div>\n                    <div>+</div>\n                    <div class="hotkey-entry">T</div>\n                </div>\n                <div class="hotkey-entry-description">Scroll To Syllable Text</div>\n            </div>\n        </div>\n\n        \x3c!-- "Edit" hotkeys --\x3e\n        <div class="hotkey-subcategory-container">\n            <div class="hotkey-subcategory-title">Edit</div>\n            <div class="hotkey-entry-container">\n                <div class="hotkey-container">\n                    <div class="hotkey-entry">Ctrl</div>\n                    <div>+</div>\n                    <div class="hotkey-entry">z</div>\n                    <div>or</div>\n                    <div class="hotkey-entry">⌘</div>\n                    <div>+</div>\n                    <div class="hotkey-entry">z</div>\n                </div>\n                <div class="hotkey-entry-description">Undo</div>\n            </div>\n            <div class="hotkey-entry-container">\n                <div class="hotkey-container">\n                    <div class="hotkey-entry">Ctrl</div>\n                    <div>+</div>\n                    <div class="hotkey-entry">Shift</div>\n                    <div>+</div>\n                    <div class="hotkey-entry">z</div>\n                    <div>or</div>\n                    <div class="hotkey-entry">⌘</div>\n                    <div>+</div>\n                    <div class="hotkey-entry">Shift</div>\n                    <div>+</div>\n                    <div class="hotkey-entry">z</div>\n                </div>\n                <div class="hotkey-entry-description">Redo</div>\n            </div>\n            <div class="hotkey-entry-container">\n                <div class="hotkey-container">\n                    <div class="hotkey-entry">q/w/e/r/t/y</div>\n                </div>\n                <div class="hotkey-entry-description">\n                    Highlight by Staff/Syllable/Neume/LayerElement/Selection/Off\n                </div>\n            </div>\n            <div class="hotkey-entry-container">\n                <div class="hotkey-container">\n                    <div class="hotkey-entry">1/2/3/4/5/6</div>\n                </div>\n                <div class="hotkey-entry-description">\n                    Select by Syllable/Neume/Neume Component/Staff/Layer Element/BBox\n                </div>\n            </div>\n            <div class="hotkey-entry-container">\n                <div class="hotkey-container">\n                    <div class="hotkey-entry">Shift</div>\n                    <div>+</div>\n                    <div class="hotkey-entry">Number</div>\n                </div>\n                <div class="hotkey-entry-description">\n                    Begin Insert for the <i>nth</i> option in the selected tab\n                </div>\n            </div>\n        </div>\n\n        \x3c!-- "Other" hotkeys --\x3e\n        <div class="hotkey-subcategory-container">\n            <div class="hotkey-subcategory-title">Other</div>\n            <div class="hotkey-entry-container">\n                <div class="hotkey-container">\n                    <div class="hotkey-entry">s</div>\n                </div>\n                <div class="hotkey-entry-description">Save File</div>\n            </div>\n            <div class="hotkey-entry-container">\n                <div class="hotkey-container">\n                    <div class="hotkey-entry">Esc</div>\n                </div>\n                <div class="hotkey-entry-description">Return to Edit Mode</div>\n            </div>\n        </div>\n    </div>',t.syllableActionsContent='\n  <div class="right-side-panel-btns-container">\n    <button class="side-panel-btn" id="mergeSyls">Merge Syllables</button>\n    <button class="side-panel-btn" id="ungroupNeumes">Ungroup</button>\n    <button class="side-panel-btn" id="delete">Delete</button>\n    <button class="side-panel-btn" id="changeStaff">Re-associate to nearest staff</button>\n  </div>\n',t.errorLogsPanelContents='<div class="panel-heading" id="errorLogHeading">\n        <div class="panel-heading-title">Error Log</div>\n        <svg class="icon">\n            <use id="toggleErrorLog" xlink:href="/Cress-gh//assets/img/icons.svg#dropdown-down"></use>\n        </svg>\n    </div>\n    <div class="panel-contents" id="errorLogContents" style="overflow: scroll; padding: 0.5em 0.75em; max-height: 300px;"><div>'},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.renameHTML=t.newFolderHTML=t.uploadAreaHTML=void 0,t.uploadAreaHTML='<div id="document-upload-container">\n\n    <div id="initial_upload_container">\n      <div id="initial_upload_area">\n        <div id="initial_upload_message">Upload Files</div>\n      </div>\n    </div>\n\n    <div class="file_container" id="uploading_container">\n\n      <div class="file-container-title">Uploading Documents</div>\n      <div class="doc_list" id="uploading_list"></div>\n\n      <div id="upload_button_container">\n        <div class="action_button" id="upload_button">\n          Upload\n          <div id="uploading_spinner">↻</div>\n        </div>\n      </div>\n\n    </div>\n\n  </div>',t.newFolderHTML='\n    <div id="rename_container">\n      <div id="dashboard_input_container">\n      </div>\n      <div id="rename_buttons_container">\n        <button id="cancel_dashboard">Cancel</button>\n        <button id="confirm_dashboard">Create</button>\n      </div>\n    </div>\n  ',t.renameHTML='\n    <div id="rename_container">\n      <div id="dashboard_input_container">\n      </div>\n      <div id="rename_buttons_container">\n        <button id="cancel_dashboard">Cancel</button>\n        <button id="confirm_dashboard">Confirm</button>\n      </div>\n    </div>\n  '},,,,,,,,,,,,,,,function(e,t,n){"use strict";n.r(t),function(e){var i,r,o=n(6),a=n.n(o),c=n(24),s=n.n(c),u=n(37),d=n(36),l=n.n(d),f=n(8),h=n.n(f);function p(e){return"$"+e}function g(e){return e.substring(1)}function m(){this._store={}}function y(e){if(this._store=new m,e&&Array.isArray(e))for(var t=0,n=e.length;t<n;t++)this.add(e[t])}function b(e){if(e instanceof ArrayBuffer)return function(e){if("function"==typeof e.slice)return e.slice(0);var t=new ArrayBuffer(e.byteLength),n=new Uint8Array(t),i=new Uint8Array(e);return n.set(i),t}(e);var t=e.size,n=e.type;return"function"==typeof e.slice?e.slice(0,t,n):e.webkitSlice(0,t,n)}m.prototype.get=function(e){var t=p(e);return this._store[t]},m.prototype.set=function(e,t){var n=p(e);return this._store[n]=t,!0},m.prototype.has=function(e){return p(e)in this._store},m.prototype.keys=function(){return Object.keys(this._store).map(e=>g(e))},m.prototype.delete=function(e){var t=p(e),n=t in this._store;return delete this._store[t],n},m.prototype.forEach=function(e){for(var t=Object.keys(this._store),n=0,i=t.length;n<i;n++){var r=t[n];e(this._store[r],r=g(r))}},Object.defineProperty(m.prototype,"size",{get:function(){return Object.keys(this._store).length}}),y.prototype.add=function(e){return this._store.set(e,!0)},y.prototype.has=function(e){return this._store.has(e)},y.prototype.forEach=function(e){this._store.forEach((function(t,n){e(n)}))},Object.defineProperty(y.prototype,"size",{get:function(){return this._store.size}}),!function(){if("undefined"==typeof Symbol||"undefined"==typeof Map||"undefined"==typeof Set)return!1;var e=Object.getOwnPropertyDescriptor(Map,Symbol.species);return e&&"get"in e&&Map[Symbol.species]===Map}()?(i=y,r=m):(i=Set,r=Map);var v=Function.prototype.toString,_=v.call(Object);function x(e){var t,n,i;if(!e||"object"!=typeof e)return e;if(Array.isArray(e)){for(t=[],n=0,i=e.length;n<i;n++)t[n]=x(e[n]);return t}if(e instanceof Date&&isFinite(e))return e.toISOString();if(function(e){return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer||"undefined"!=typeof Blob&&e instanceof Blob}(e))return b(e);if(!function(e){var t=Object.getPrototypeOf(e);if(null===t)return!0;var n=t.constructor;return"function"==typeof n&&n instanceof n&&v.call(n)==_}(e))return e;for(n in t={},e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=x(e[n]);void 0!==r&&(t[n]=r)}return t}function D(e){var t=!1;return function(...n){if(t)throw new Error("once called more than once");t=!0,e.apply(this,n)}}function w(e){return function(...t){t=x(t);var n=this,i="function"==typeof t[t.length-1]&&t.pop(),r=new Promise((function(i,r){var o;try{var a=D((function(e,t){e?r(e):i(t)}));t.push(a),(o=e.apply(n,t))&&"function"==typeof o.then&&i(o)}catch(e){r(e)}}));return i&&r.then((function(e){i(null,e)}),i),r}}function U(e,t){return w((function(...n){if(this._closed)return Promise.reject(new Error("database is closed"));if(this._destroyed)return Promise.reject(new Error("database is destroyed"));var i=this;return function(e,t,n){if(e.constructor.listeners("debug").length){for(var i=["api",e.name,t],r=0;r<n.length-1;r++)i.push(n[r]);e.constructor.emit("debug",i);var o=n[n.length-1];n[n.length-1]=function(n,i){var r=["api",e.name,t];r=r.concat(n?["error",n]:["success",i]),e.constructor.emit("debug",r),o(n,i)}}}(i,e,n),this.taskqueue.isReady?t.apply(this,n):new Promise((function(t,r){i.taskqueue.addTask((function(o){o?r(o):t(i[e].apply(i,n))}))}))}))}function T(e,t){for(var n={},i=0,r=t.length;i<r;i++){var o=t[i];o in e&&(n[o]=e[o])}return n}var E;function k(e){return e}function C(e){return[{ok:e}]}function S(e,t,n){var i=t.docs,o=new r;i.forEach((function(e){o.has(e.id)?o.get(e.id).push(e):o.set(e.id,[e])}));var a=o.size,c=0,s=new Array(a);function u(){var e;++c===a&&(e=[],s.forEach((function(t){t.docs.forEach((function(n){e.push({id:t.id,docs:[n]})}))})),n(null,{results:e}))}var d=[];o.forEach((function(e,t){d.push(t)}));var l=0;function f(){if(!(l>=d.length)){var n=Math.min(l+6,d.length),i=d.slice(l,n);!function(n,i){n.forEach((function(n,r){var a=i+r,c=o.get(n),d=T(c[0],["atts_since","attachments"]);d.open_revs=c.map((function(e){return e.rev})),d.open_revs=d.open_revs.filter(k);var l=k;0===d.open_revs.length&&(delete d.open_revs,l=C),["revs","attachments","binary","ajax","latest"].forEach((function(e){e in t&&(d[e]=t[e])})),e.get(n,d,(function(e,t){var i,r,o;i=e?[{error:e}]:l(t),r=n,o=i,s[a]={id:r,docs:o},u(),f()}))}))}(i,l),l+=i.length}}f()}try{localStorage.setItem("_pouch_check_localstorage",1),E=!!localStorage.getItem("_pouch_check_localstorage")}catch(e){E=!1}function F(){return E}class A extends h.a{constructor(){super(),this._listeners={},F()&&addEventListener("storage",e=>{this.emit(e.key)})}addListener(e,t,n,i){if(!this._listeners[t]){var r=!1,o=this;this._listeners[t]=c,this.on(e,c)}function c(){if(o._listeners[t])if(r)r="waiting";else{r=!0;var e=T(i,["style","include_docs","attachments","conflicts","filter","doc_ids","view","since","query_params","binary","return_docs"]);n.changes(e).on("change",(function(e){e.seq>i.since&&!i.cancelled&&(i.since=e.seq,i.onChange(e))})).on("complete",(function(){"waiting"===r&&a()(c),r=!1})).on("error",(function(){r=!1}))}}}removeListener(e,t){t in this._listeners&&(super.removeListener(e,this._listeners[t]),delete this._listeners[t])}notifyLocalWindows(e){F()&&(localStorage[e]="a"===localStorage[e]?"b":"a")}notify(e){this.emit(e),this.notifyLocalWindows(e)}}function O(e){if("undefined"!=typeof console&&"function"==typeof console[e]){var t=Array.prototype.slice.call(arguments,1);console[e].apply(console,t)}}function W(e){var t=0;return e||(t=2e3),function(e,t){return e=parseInt(e,10)||0,(t=parseInt(t,10))!=t||t<=e?t=(e||1)<<1:t+=1,t>6e5&&(e=3e5,t=6e5),~~((t-e)*Math.random()+e)}(e,t)}function B(e,t){O("info","The above "+e+" is totally normal. "+t)}var I="function"==typeof Object.assign?Object.assign:function(e){for(var t=Object(e),n=1;n<arguments.length;n++){var i=arguments[n];if(null!=i)for(var r in i)Object.prototype.hasOwnProperty.call(i,r)&&(t[r]=i[r])}return t};class N extends Error{constructor(e,t,n){super(),this.status=e,this.name=t,this.message=n,this.error=!0}toString(){return JSON.stringify({status:this.status,name:this.name,message:this.message,reason:this.reason})}}new N(401,"unauthorized","Name or password is incorrect.");var L=new N(400,"bad_request","Missing JSON list of 'docs'"),R=new N(404,"not_found","missing"),P=new N(409,"conflict","Document update conflict"),j=new N(400,"bad_request","_id field must contain a string"),q=new N(412,"missing_id","_id is required for puts"),M=new N(400,"bad_request","Only reserved document ids may start with underscore."),z=(new N(412,"precondition_failed","Database not open"),new N(500,"unknown_error","Database encountered an unknown error")),V=new N(500,"badarg","Some query argument is invalid"),H=(new N(400,"invalid_request","Request was invalid"),new N(400,"query_parse_error","Some query parameter is invalid")),$=new N(500,"doc_validation","Bad special document member"),G=new N(400,"bad_request","Something wrong with the request"),K=new N(400,"bad_request","Document must be a JSON object"),Y=(new N(404,"not_found","Database not found"),new N(500,"indexed_db_went_bad","unknown")),Z=(new N(500,"web_sql_went_bad","unknown"),new N(500,"levelDB_went_went_bad","unknown"),new N(403,"forbidden","Forbidden by design doc validate_doc_update function"),new N(400,"bad_request","Invalid rev format")),X=(new N(412,"file_exists","The database could not be created, the file already exists."),new N(412,"missing_stub","A pre-existing attachment stub wasn't found"));new N(413,"invalid_url","Provided URL is invalid");function J(e,t){function n(t){for(var n=Object.getOwnPropertyNames(e),i=0,r=n.length;i<r;i++)"function"!=typeof e[n[i]]&&(this[n[i]]=e[n[i]]);void 0===this.stack&&(this.stack=(new Error).stack),void 0!==t&&(this.reason=t)}return n.prototype=N.prototype,new n(t)}function Q(e){if("object"!=typeof e){var t=e;(e=z).data=t}return"error"in e&&"conflict"===e.error&&(e.name="conflict",e.status=409),"name"in e||(e.name=e.error||"unknown"),"status"in e||(e.status=500),"message"in e||(e.message=e.message||e.reason),"stack"in e||(e.stack=(new Error).stack),e}function ee(e){var t={},n=e.filter&&"function"==typeof e.filter;return t.query=e.query_params,function(i){i.doc||(i.doc={});var r=n&&function(e,t,n){try{return!e(t,n)}catch(e){var i="Filter function threw: "+e.toString();return J(G,i)}}(e.filter,i.doc,t);if("object"==typeof r)return r;if(r)return!1;if(e.include_docs){if(!e.attachments)for(var o in i.doc._attachments)Object.prototype.hasOwnProperty.call(i.doc._attachments,o)&&(i.doc._attachments[o].stub=!0)}else delete i.doc;return!0}}function te(e){for(var t=[],n=0,i=e.length;n<i;n++)t=t.concat(e[n]);return t}function ne(e){var t;if(e?"string"!=typeof e?t=J(j):/^_/.test(e)&&!/^_(design|local)/.test(e)&&(t=J(M)):t=J(q),t)throw t}function ie(e){return"boolean"==typeof e._remote?e._remote:"function"==typeof e.type&&(O("warn","db.type() is deprecated and will be removed in a future version of PouchDB"),"http"===e.type())}function re(e){if(!e)return null;var t=e.split("/");return 2===t.length?t:1===t.length?[e,e]:null}function oe(e){var t=re(e);return t?t.join("/"):null}var ae=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"],ce=/(?:^|&)([^&=]*)=?([^&]*)/g,se=/^(?:(?![^:@]+:[^:@\/]*@)([^:\/?#.]+):)?(?:\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;function ue(e){for(var t=se.exec(e),n={},i=14;i--;){var r=ae[i],o=t[i]||"",a=-1!==["user","password"].indexOf(r);n[r]=a?decodeURIComponent(o):o}return n.queryKey={},n[ae[12]].replace(ce,(function(e,t,i){t&&(n.queryKey[t]=i)})),n}function de(e,t){var n=[],i=[];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(n.push(r),i.push(t[r]));return n.push(e),Function.apply(null,n).apply(null,i)}function le(e,t,n){return e.get(t).catch((function(e){if(404!==e.status)throw e;return{}})).then((function(i){var r=i._rev,o=n(i);return o?(o._id=t,o._rev=r,function(e,t,n){return e.put(t).then((function(e){return{updated:!0,rev:e.rev}}),(function(i){if(409!==i.status)throw i;return le(e,t._id,n)}))}(e,o,n)):{updated:!1,rev:r}}))}var fe=function(e){return atob(e)},he=function(e){return btoa(e)};function pe(e,t){e=e||[],t=t||{};try{return new Blob(e,t)}catch(r){if("TypeError"!==r.name)throw r;for(var n=new("undefined"!=typeof BlobBuilder?BlobBuilder:"undefined"!=typeof MSBlobBuilder?MSBlobBuilder:"undefined"!=typeof MozBlobBuilder?MozBlobBuilder:WebKitBlobBuilder),i=0;i<e.length;i+=1)n.append(e[i]);return n.getBlob(t.type)}}function ge(e){for(var t=e.length,n=new ArrayBuffer(t),i=new Uint8Array(n),r=0;r<t;r++)i[r]=e.charCodeAt(r);return n}function me(e,t){return pe([ge(e)],{type:t})}function ye(e,t){return me(fe(e),t)}function be(e,t){var n=new FileReader,i="function"==typeof n.readAsBinaryString;n.onloadend=function(e){var n=e.target.result||"";if(i)return t(n);t(function(e){for(var t="",n=new Uint8Array(e),i=n.byteLength,r=0;r<i;r++)t+=String.fromCharCode(n[r]);return t}(n))},i?n.readAsBinaryString(e):n.readAsArrayBuffer(e)}function ve(e,t){be(e,(function(e){t(e)}))}function _e(e,t){ve(e,(function(e){t(he(e))}))}var xe=self.setImmediate||self.setTimeout;function De(e,t,n,i,r){(n>0||i<t.size)&&(t=function(e,t,n){return e.webkitSlice?e.webkitSlice(t,n):e.slice(t,n)}(t,n,i)),function(e,t){var n=new FileReader;n.onloadend=function(e){var n=e.target.result||new ArrayBuffer(0);t(n)},n.readAsArrayBuffer(e)}(t,(function(t){e.append(t),r()}))}function we(e,t,n,i,r){(n>0||i<t.length)&&(t=t.substring(n,i)),e.appendBinary(t),r()}function Ue(e,t){var n="string"==typeof e,i=n?e.length:e.size,r=Math.min(32768,i),o=Math.ceil(i/r),a=0,c=n?new s.a:new s.a.ArrayBuffer,u=n?we:De;function d(){xe(f)}function l(){var e=function(e){return he(e)}(c.end(!0));t(e),c.destroy()}function f(){var t=a*r,n=t+r;a++,u(c,e,t,n,a<o?d:l)}f()}function Te(e){return s.a.hash(e)}function Ee(e,t){if(!t)return Object(u.a)().replace(/-/g,"").toLowerCase();var n=I({},e);return delete n._rev_tree,Te(JSON.stringify(n))}var ke=u.a;function Ce(e){for(var t,n,i,r,o=e.rev_tree.slice();r=o.pop();){var a=r.ids,c=a[2],s=r.pos;if(c.length)for(var u=0,d=c.length;u<d;u++)o.push({pos:s+1,ids:c[u]});else{var l=!!a[1].deleted,f=a[0];t&&!(i!==l?i:n!==s?n<s:t<f)||(t=f,n=s,i=l)}}return n+"-"+t}function Se(e,t){for(var n,i=e.slice();n=i.pop();)for(var r=n.pos,o=n.ids,a=o[2],c=t(0===a.length,r,o[0],n.ctx,o[1]),s=0,u=a.length;s<u;s++)i.push({pos:r+1,ids:a[s],ctx:c})}function Fe(e,t){return e.pos-t.pos}function Ae(e){var t=[];Se(e,(function(e,n,i,r,o){e&&t.push({rev:n+"-"+i,pos:n,opts:o})})),t.sort(Fe).reverse();for(var n=0,i=t.length;n<i;n++)delete t[n].pos;return t}function Oe(e){for(var t=Ce(e),n=Ae(e.rev_tree),i=[],r=0,o=n.length;r<o;r++){var a=n[r];a.rev===t||a.opts.deleted||i.push(a.rev)}return i}function We(e){for(var t,n=[],i=e.slice();t=i.pop();){var r=t.pos,o=t.ids,a=o[0],c=o[1],s=o[2],u=0===s.length,d=t.history?t.history.slice():[];d.push({id:a,opts:c}),u&&n.push({pos:r+1-d.length,ids:d});for(var l=0,f=s.length;l<f;l++)i.push({pos:r+1,ids:s[l],history:d})}return n.reverse()}function Be(e,t){return e.pos-t.pos}function Ie(e,t,n){var i=function(e,t,n){for(var i,r=0,o=e.length;r<o;)n(e[i=r+o>>>1],t)<0?r=i+1:o=i;return r}(e,t,n);e.splice(i,0,t)}function Ne(e,t){for(var n,i,r=t,o=e.length;r<o;r++){var a=e[r],c=[a.id,a.opts,[]];i?(i[2].push(c),i=c):n=i=c}return n}function Le(e,t){return e[0]<t[0]?-1:1}function Re(e,t){for(var n=[{tree1:e,tree2:t}],i=!1;n.length>0;){var r=n.pop(),o=r.tree1,a=r.tree2;(o[1].status||a[1].status)&&(o[1].status="available"===o[1].status||"available"===a[1].status?"available":"missing");for(var c=0;c<a[2].length;c++)if(o[2][0]){for(var s=!1,u=0;u<o[2].length;u++)o[2][u][0]===a[2][c][0]&&(n.push({tree1:o[2][u],tree2:a[2][c]}),s=!0);s||(i="new_branch",Ie(o[2],a[2][c],Le))}else i="new_leaf",o[2][0]=a[2][c]}return{conflicts:i,tree:e}}function Pe(e,t,n){var i,r=[],o=!1,a=!1;if(!e.length)return{tree:[t],conflicts:"new_leaf"};for(var c=0,s=e.length;c<s;c++){var u=e[c];if(u.pos===t.pos&&u.ids[0]===t.ids[0])i=Re(u.ids,t.ids),r.push({pos:u.pos,ids:i.tree}),o=o||i.conflicts,a=!0;else if(!0!==n){var d=u.pos<t.pos?u:t,l=u.pos<t.pos?t:u,f=l.pos-d.pos,h=[],p=[];for(p.push({ids:d.ids,diff:f,parent:null,parentIdx:null});p.length>0;){var g=p.pop();if(0!==g.diff)for(var m=g.ids[2],y=0,b=m.length;y<b;y++)p.push({ids:m[y],diff:g.diff-1,parent:g.ids,parentIdx:y});else g.ids[0]===l.ids[0]&&h.push(g)}var v=h[0];v?(i=Re(v.ids,l.ids),v.parent[2][v.parentIdx]=i.tree,r.push({pos:d.pos,ids:d.ids}),o=o||i.conflicts,a=!0):r.push(u)}else r.push(u)}return a||r.push(t),r.sort(Be),{tree:r,conflicts:o||"internal_node"}}function je(e,t,n){var i=Pe(e,t),r=function(e,t){for(var n,i,r=We(e),o=0,a=r.length;o<a;o++){var c,s=r[o],u=s.ids;if(u.length>t){n||(n={});var d=u.length-t;c={pos:s.pos+d,ids:Ne(u,d)};for(var l=0;l<d;l++){var f=s.pos+l+"-"+u[l].id;n[f]=!0}}else c={pos:s.pos,ids:Ne(u,0)};i=i?Pe(i,c,!0).tree:[c]}return n&&Se(i,(function(e,t,i){delete n[t+"-"+i]})),{tree:i,revs:n?Object.keys(n):[]}}(i.tree,n);return{tree:r.tree,stemmedRevs:r.revs,conflicts:i.conflicts}}function qe(e){return e.ids}function Me(e,t){t||(t=Ce(e));for(var n,i=t.substring(t.indexOf("-")+1),r=e.rev_tree.map(qe);n=r.pop();){if(n[0]===i)return!!n[1].deleted;r=r.concat(n[2])}}function ze(e){return/^_local/.test(e)}function Ve(e,t,n){var i=[{rev:e._rev}];"all_docs"===n.style&&(i=Ae(t.rev_tree).map((function(e){return{rev:e.rev}})));var r={id:t.id,changes:i,doc:e};return Me(t,e._rev)&&(r.deleted=!0),n.conflicts&&(r.doc._conflicts=Oe(t),r.doc._conflicts.length||delete r.doc._conflicts),r}class He extends h.a{constructor(e,t,n){super(),this.db=e;var i=(t=t?x(t):{}).complete=D((t,n)=>{var i,o;t?(o="error",("listenerCount"in(i=this)?i.listenerCount(o):h.a.listenerCount(i,o))>0&&this.emit("error",t)):this.emit("complete",n),this.removeAllListeners(),e.removeListener("destroyed",r)});n&&(this.on("complete",(function(e){n(null,e)})),this.on("error",n));const r=()=>{this.cancel()};e.once("destroyed",r),t.onChange=(e,t,n)=>{this.isCancelled||function(e,t,n,i){try{e.emit("change",t,n,i)}catch(e){O("error",'Error in .on("change", function):',e)}}(this,e,t,n)};var o=new Promise((function(e,n){t.complete=function(t,i){t?n(t):e(i)}}));this.once("cancel",(function(){e.removeListener("destroyed",r),t.complete(null,{status:"cancelled"})})),this.then=o.then.bind(o),this.catch=o.catch.bind(o),this.then((function(e){i(null,e)}),i),e.taskqueue.isReady?this.validateChanges(t):e.taskqueue.addTask(e=>{e?t.complete(e):this.isCancelled?this.emit("cancel"):this.validateChanges(t)})}cancel(){this.isCancelled=!0,this.db.taskqueue.isReady&&this.emit("cancel")}validateChanges(e){var t=e.complete;et._changesFilterPlugin?et._changesFilterPlugin.validate(e,n=>{if(n)return t(n);this.doChanges(e)}):this.doChanges(e)}doChanges(e){var t=e.complete;if("live"in(e=x(e))&&!("continuous"in e)&&(e.continuous=e.live),e.processChange=Ve,"latest"===e.since&&(e.since="now"),e.since||(e.since=0),"now"!==e.since){if(et._changesFilterPlugin){if(et._changesFilterPlugin.normalize(e),et._changesFilterPlugin.shouldFilter(this,e))return et._changesFilterPlugin.filter(this,e)}else["doc_ids","filter","selector","view"].forEach((function(t){t in e&&O("warn",'The "'+t+'" option was passed in to changes/replicate, but pouchdb-changes-filter plugin is not installed, so it was ignored. Please install the plugin to enable filtering.')}));"descending"in e||(e.descending=!1),e.limit=0===e.limit?1:e.limit,e.complete=t;var n=this.db._changes(e);if(n&&"function"==typeof n.cancel){const e=this.cancel;this.cancel=(...t)=>{n.cancel(),e.apply(this,t)}}}else this.db.info().then(n=>{this.isCancelled?t(null,{status:"cancelled"}):(e.since=n.update_seq,this.doChanges(e))},t)}}function $e(e,t){return e<t?-1:e>t?1:0}function Ge(e,t){return function(n,i){n||i[0]&&i[0].error?((n=n||i[0]).docId=t,e(n)):e(null,i.length?i[0]:i)}}function Ke(e,t){var n=$e(e._id,t._id);return 0!==n?n:$e(e._revisions?e._revisions.start:0,t._revisions?t._revisions.start:0)}function Ye(e,t,n){return e.get("_local/purges").then((function(e){const i=e.purgeSeq+1;return e.purges.push({docId:t,rev:n,purgeSeq:i}),e.purges.length>self.purged_infos_limit&&e.purges.splice(0,e.purges.length-self.purged_infos_limit),e.purgeSeq=i,e})).catch((function(e){if(404!==e.status)throw e;return{_id:"_local/purges",purges:[{docId:t,rev:n,purgeSeq:0}],purgeSeq:0}})).then((function(t){return e.put(t)}))}class Ze extends h.a{_setup(){this.post=U("post",(function(e,t,n){if("function"==typeof t&&(n=t,t={}),"object"!=typeof e||Array.isArray(e))return n(J(K));this.bulkDocs({docs:[e]},t,Ge(n,e._id))})).bind(this),this.put=U("put",(function(e,t,n){if("function"==typeof t&&(n=t,t={}),"object"!=typeof e||Array.isArray(e))return n(J(K));if(ne(e._id),ze(e._id)&&"function"==typeof this._putLocal)return e._deleted?this._removeLocal(e,n):this._putLocal(e,n);const i=n=>{"function"==typeof this._put&&!1!==t.new_edits?this._put(e,t,n):this.bulkDocs({docs:[e]},t,Ge(n,e._id))};var r,o,a,c;t.force&&e._rev?(r=e._rev.split("-"),o=r[1],a=parseInt(r[0],10)+1,c=Ee(),e._revisions={start:a,ids:[c,o]},e._rev=a+"-"+c,t.new_edits=!1,i((function(t){var i=t?null:{ok:!0,id:e._id,rev:e._rev};n(t,i)}))):i(n)})).bind(this),this.putAttachment=U("putAttachment",(function(e,t,n,i,r){var o=this;function a(e){var n="_rev"in e?parseInt(e._rev,10):0;return e._attachments=e._attachments||{},e._attachments[t]={content_type:r,data:i,revpos:++n},o.put(e)}return"function"==typeof r&&(r=i,i=n,n=null),void 0===r&&(r=i,i=n,n=null),r||O("warn","Attachment",t,"on document",e,"is missing content_type"),o.get(e).then((function(e){if(e._rev!==n)throw J(P);return a(e)}),(function(t){if(t.reason===R.message)return a({_id:e});throw t}))})).bind(this),this.removeAttachment=U("removeAttachment",(function(e,t,n,i){this.get(e,(e,r)=>{if(e)i(e);else if(r._rev===n){if(!r._attachments)return i();delete r._attachments[t],0===Object.keys(r._attachments).length&&delete r._attachments,this.put(r,i)}else i(J(P))})})).bind(this),this.remove=U("remove",(function(e,t,n,i){var r;"string"==typeof t?(r={_id:e,_rev:t},"function"==typeof n&&(i=n,n={})):(r=e,"function"==typeof t?(i=t,n={}):(i=n,n=t)),(n=n||{}).was_delete=!0;var o={_id:r._id,_rev:r._rev||n.rev,_deleted:!0};if(ze(o._id)&&"function"==typeof this._removeLocal)return this._removeLocal(r,i);this.bulkDocs({docs:[o]},n,Ge(i,o._id))})).bind(this),this.revsDiff=U("revsDiff",(function(e,t,n){"function"==typeof t&&(n=t,t={});var i=Object.keys(e);if(!i.length)return n(null,{});var o=0,a=new r;function c(e,t){a.has(e)||a.set(e,{missing:[]}),a.get(e).missing.push(t)}i.map((function(t){this._getRevisionTree(t,(function(r,s){if(r&&404===r.status&&"missing"===r.message)a.set(t,{missing:e[t]});else{if(r)return n(r);!function(t,n){var i=e[t].slice(0);Se(n,(function(e,n,r,o,a){var s=n+"-"+r,u=i.indexOf(s);-1!==u&&(i.splice(u,1),"available"!==a.status&&c(t,s))})),i.forEach((function(e){c(t,e)}))}(t,s)}if(++o===i.length){var u={};return a.forEach((function(e,t){u[t]=e})),n(null,u)}}))}),this)})).bind(this),this.bulkGet=U("bulkGet",(function(e,t){S(this,e,t)})).bind(this),this.compactDocument=U("compactDocument",(function(e,t,n){this._getRevisionTree(e,(i,r)=>{if(i)return n(i);var o=function(e){var t={},n=[];return Se(e,(function(e,i,r,o){var a=i+"-"+r;return e&&(t[a]=0),void 0!==o&&n.push({from:o,to:a}),a})),n.reverse(),n.forEach((function(e){void 0===t[e.from]?t[e.from]=1+t[e.to]:t[e.from]=Math.min(t[e.from],1+t[e.to])})),t}(r),a=[],c=[];Object.keys(o).forEach((function(e){o[e]>t&&a.push(e)})),Se(r,(function(e,t,n,i,r){var o=t+"-"+n;"available"===r.status&&-1!==a.indexOf(o)&&c.push(o)})),this._doCompaction(e,c,n)})})).bind(this),this.compact=U("compact",(function(e,t){"function"==typeof e&&(t=e,e={}),e=e||{},this._compactionQueue=this._compactionQueue||[],this._compactionQueue.push({opts:e,callback:t}),1===this._compactionQueue.length&&function e(t){var n=t._compactionQueue[0],i=n.opts,r=n.callback;t.get("_local/compaction").catch((function(){return!1})).then((function(n){n&&n.last_seq&&(i.last_seq=n.last_seq),t._compact(i,(function(n,i){n?r(n):r(null,i),a()((function(){t._compactionQueue.shift(),t._compactionQueue.length&&e(t)}))}))}))}(this)})).bind(this),this.get=U("get",(function(e,t,n){if("function"==typeof t&&(n=t,t={}),"string"!=typeof e)return n(J(j));if(ze(e)&&"function"==typeof this._getLocal)return this._getLocal(e,n);var i=[];const r=()=>{var r=[],o=i.length;if(!o)return n(null,r);i.forEach(i=>{this.get(e,{rev:i,revs:t.revs,latest:t.latest,attachments:t.attachments,binary:t.binary},(function(e,t){if(e)r.push({missing:i});else{for(var a,c=0,s=r.length;c<s;c++)if(r[c].ok&&r[c].ok._rev===t._rev){a=!0;break}a||r.push({ok:t})}--o||n(null,r)}))})};if(!t.open_revs)return this._get(e,t,(i,r)=>{if(i)return i.docId=e,n(i);var o=r.doc,a=r.metadata,c=r.ctx;if(t.conflicts){var s=Oe(a);s.length&&(o._conflicts=s)}if(Me(a,o._rev)&&(o._deleted=!0),t.revs||t.revs_info){for(var u=o._rev.split("-"),d=parseInt(u[0],10),l=u[1],f=We(a.rev_tree),h=null,p=0;p<f.length;p++){var g=f[p],m=g.ids.map((function(e){return e.id})).indexOf(l);(m===d-1||!h&&-1!==m)&&(h=g)}if(!h)return(i=new Error("invalid rev tree")).docId=e,n(i);var y=h.ids.map((function(e){return e.id})).indexOf(o._rev.split("-")[1])+1,b=h.ids.length-y;if(h.ids.splice(y,b),h.ids.reverse(),t.revs&&(o._revisions={start:h.pos+h.ids.length-1,ids:h.ids.map((function(e){return e.id}))}),t.revs_info){var v=h.pos+h.ids.length;o._revs_info=h.ids.map((function(e){return{rev:--v+"-"+e.id,status:e.opts.status}}))}}if(t.attachments&&o._attachments){var _=o._attachments,x=Object.keys(_).length;if(0===x)return n(null,o);Object.keys(_).forEach(e=>{this._getAttachment(o._id,e,_[e],{rev:o._rev,binary:t.binary,ctx:c},(function(t,i){var r=o._attachments[e];r.data=i,delete r.stub,delete r.length,--x||n(null,o)}))})}else{if(o._attachments)for(var D in o._attachments)Object.prototype.hasOwnProperty.call(o._attachments,D)&&(o._attachments[D].stub=!0);n(null,o)}});if("all"===t.open_revs)this._getRevisionTree(e,(function(e,t){if(e)return n(e);i=Ae(t).map((function(e){return e.rev})),r()}));else{if(!Array.isArray(t.open_revs))return n(J(z,"function_clause"));i=t.open_revs;for(var o=0;o<i.length;o++){var a=i[o];if("string"!=typeof a||!/^\d+-/.test(a))return n(J(Z))}r()}})).bind(this),this.getAttachment=U("getAttachment",(function(e,t,n,i){n instanceof Function&&(i=n,n={}),this._get(e,n,(r,o)=>r?i(r):o.doc._attachments&&o.doc._attachments[t]?(n.ctx=o.ctx,n.binary=!0,void this._getAttachment(e,t,o.doc._attachments[t],n,i)):i(J(R)))})).bind(this),this.allDocs=U("allDocs",(function(e,t){if("function"==typeof e&&(t=e,e={}),e.skip=void 0!==e.skip?e.skip:0,e.start_key&&(e.startkey=e.start_key),e.end_key&&(e.endkey=e.end_key),"keys"in e){if(!Array.isArray(e.keys))return t(new TypeError("options.keys must be an array"));var n=["startkey","endkey","key"].filter((function(t){return t in e}))[0];if(n)return void t(J(H,"Query parameter `"+n+"` is not compatible with multi-get"));if(!ie(this)&&(function(e){var t="limit"in e?e.keys.slice(e.skip,e.limit+e.skip):e.skip>0?e.keys.slice(e.skip):e.keys;e.keys=t,e.skip=0,delete e.limit,e.descending&&(t.reverse(),e.descending=!1)}(e),0===e.keys.length))return this._allDocs({limit:0},t)}return this._allDocs(e,t)})).bind(this),this.close=U("close",(function(e){return this._closed=!0,this.emit("closed"),this._close(e)})).bind(this),this.info=U("info",(function(e){this._info((t,n)=>{if(t)return e(t);n.db_name=n.db_name||this.name,n.auto_compaction=!(!this.auto_compaction||ie(this)),n.adapter=this.adapter,e(null,n)})})).bind(this),this.id=U("id",(function(e){return this._id(e)})).bind(this),this.bulkDocs=U("bulkDocs",(function(e,t,n){if("function"==typeof t&&(n=t,t={}),t=t||{},Array.isArray(e)&&(e={docs:e}),!e||!e.docs||!Array.isArray(e.docs))return n(J(L));for(var i=0;i<e.docs.length;++i)if("object"!=typeof e.docs[i]||Array.isArray(e.docs[i]))return n(J(K));var r;if(e.docs.forEach((function(e){e._attachments&&Object.keys(e._attachments).forEach((function(t){r=r||function(e){return"_"===e.charAt(0)&&e+" is not a valid attachment name, attachment names cannot start with '_'"}(t),e._attachments[t].content_type||O("warn","Attachment",t,"on document",e._id,"is missing content_type")}))})),r)return n(J(G,r));"new_edits"in t||(t.new_edits=!("new_edits"in e)||e.new_edits);var o=this;t.new_edits||ie(o)||e.docs.sort(Ke),function(e){for(var t=0;t<e.length;t++){var n=e[t];if(n._deleted)delete n._attachments;else if(n._attachments)for(var i=Object.keys(n._attachments),r=0;r<i.length;r++){var o=i[r];n._attachments[o]=T(n._attachments[o],["data","digest","content_type","length","revpos","stub"])}}}(e.docs);var a=e.docs.map((function(e){return e._id}));this._bulkDocs(e,t,(function(e,i){if(e)return n(e);if(t.new_edits||(i=i.filter((function(e){return e.error}))),!ie(o))for(var r=0,c=i.length;r<c;r++)i[r].id=i[r].id||a[r];n(null,i)}))})).bind(this),this.registerDependentDatabase=U("registerDependentDatabase",(function(e,t){var n=x(this.__opts);this.__opts.view_adapter&&(n.adapter=this.__opts.view_adapter);var i=new this.constructor(e,n);le(this,"_local/_pouch_dependentDbs",(function(t){return t.dependentDbs=t.dependentDbs||{},!t.dependentDbs[e]&&(t.dependentDbs[e]=!0,t)})).then((function(){t(null,{db:i})})).catch(t)})).bind(this),this.destroy=U("destroy",(function(e,t){"function"==typeof e&&(t=e,e={});var n=!("use_prefix"in this)||this.use_prefix;const i=()=>{this._destroy(e,(e,n)=>{if(e)return t(e);this._destroyed=!0,this.emit("destroyed"),t(null,n||{ok:!0})})};if(ie(this))return i();this.get("_local/_pouch_dependentDbs",(e,r)=>{if(e)return 404!==e.status?t(e):i();var o=r.dependentDbs,a=this.constructor,c=Object.keys(o).map(e=>{var t=n?e.replace(new RegExp("^"+a.prefix),""):e;return new a(t,this.__opts).destroy()});Promise.all(c).then(i,t)})})).bind(this)}_compact(e,t){var n,i={return_docs:!1,last_seq:e.last_seq||0},r=[],o=0;const a=e=>{this.activeTasks.update(n,{completed_items:++o}),r.push(this.compactDocument(e.id,0))},c=e=>{this.activeTasks.remove(n,e),t(e)},s=e=>{var i=e.last_seq;Promise.all(r).then(()=>le(this,"_local/compaction",e=>(!e.last_seq||e.last_seq<i)&&(e.last_seq=i,e))).then(()=>{this.activeTasks.remove(n),t(null,{ok:!0})}).catch(c)};this.info().then(e=>{n=this.activeTasks.add({name:"database_compaction",total_items:e.update_seq-i.last_seq}),this.changes(i).on("change",a).on("complete",s).on("error",c)})}changes(e,t){return"function"==typeof e&&(t=e,e={}),(e=e||{}).return_docs="return_docs"in e?e.return_docs:!e.live,new He(this,e,t)}type(){return"function"==typeof this._type?this._type():this.adapter}}Ze.prototype.purge=U("_purge",(function(e,t,n){if(void 0===this._purge)return n(J(z,"Purge is not implemented in the "+this.adapter+" adapter."));var i=this;i._getRevisionTree(e,(r,o)=>{if(r)return n(r);if(!o)return n(J(R));let a;try{a=function(e,t){let n=[];const i=e.slice();let r;for(;r=i.pop();){const{pos:e,ids:o}=r,a=`${e}-${o[0]}`,c=o[2];if(n.push(a),a===t){if(0!==c.length)throw new Error("The requested revision is not a leaf");return n.reverse()}(0===c.length||c.length>1)&&(n=[]);for(let t=0,n=c.length;t<n;t++)i.push({pos:e+1,ids:c[t]})}if(0===n.length)throw new Error("The requested revision does not exist");return n.reverse()}(o,t)}catch(r){return n(r.message||r)}i._purge(e,a,(r,o)=>{if(r)return n(r);Ye(i,e,t).then((function(){return n(null,o)}))})})}));class Xe{constructor(){this.isReady=!1,this.failed=!1,this.queue=[]}execute(){var e;if(this.failed)for(;e=this.queue.shift();)e(this.failed);else for(;e=this.queue.shift();)e()}fail(e){this.failed=e,this.execute()}ready(e){this.isReady=!0,this.db=e,this.execute()}addTask(e){this.queue.push(e),this.failed&&this.execute()}}function Je(e,t){let n=function(...e){if(!(this instanceof n))return new n(...e);t.apply(this,e)};var i,r;return r=e,(i=n).prototype=Object.create(r.prototype,{constructor:{value:i}}),n}class Qe extends Ze{constructor(e,t){super(),this._setup(e,t)}_setup(e,t){if(super._setup(),t=t||{},e&&"object"==typeof e&&(e=(t=e).name,delete t.name),void 0===t.deterministic_revs&&(t.deterministic_revs=!0),this.__opts=t=x(t),this.auto_compaction=t.auto_compaction,this.purged_infos_limit=t.purged_infos_limit||1e3,this.prefix=et.prefix,"string"!=typeof e)throw new Error("Missing/invalid DB name");var n=function(e,t){var n=e.match(/([a-z-]*):\/\/(.*)/);if(n)return{name:/https?/.test(n[1])?n[1]+"://"+n[2]:n[2],adapter:n[1]};var i=et.adapters,r=et.preferredAdapters,o=et.prefix,a=t.adapter;if(!a)for(var c=0;c<r.length&&("idb"===(a=r[c])&&"websql"in i&&F()&&localStorage["_pouch__websqldb_"+o+e]);++c)O("log",'PouchDB is downgrading "'+e+'" to WebSQL to avoid data loss, because it was already opened with WebSQL.');var s=i[a];return{name:!s||!("use_prefix"in s)||s.use_prefix?o+e:e,adapter:a}}((t.prefix||"")+e,t);if(t.name=n.name,t.adapter=t.adapter||n.adapter,this.name=e,this._adapter=t.adapter,et.emit("debug",["adapter","Picked adapter: ",t.adapter]),!et.adapters[t.adapter]||!et.adapters[t.adapter].valid())throw new Error("Invalid Adapter: "+t.adapter);if(t.view_adapter&&(!et.adapters[t.view_adapter]||!et.adapters[t.view_adapter].valid()))throw new Error("Invalid View Adapter: "+t.view_adapter);this.taskqueue=new Xe,this.adapter=t.adapter,et.adapters[t.adapter].call(this,t,e=>{if(e)return this.taskqueue.fail(e);!function(e){function t(t){e.removeListener("closed",n),t||e.constructor.emit("destroyed",e.name)}function n(){e.removeListener("destroyed",t),e.constructor.emit("unref",e)}e.once("destroyed",t),e.once("closed",n),e.constructor.emit("ref",e)}(this),this.emit("created",this),et.emit("created",this.name),this.taskqueue.ready(this)})}}const et=Je(Qe,(function(e,t){Qe.prototype._setup.call(this,e,t)}));var tt="undefined"!=typeof AbortController?AbortController:function(){return{abort:function(){}}},nt=fetch,it=Headers;et.adapters={},et.preferredAdapters=[],et.prefix="_pouch_";var rt=new h.a;!function(e){Object.keys(h.a.prototype).forEach((function(t){"function"==typeof h.a.prototype[t]&&(e[t]=rt[t].bind(rt))}));var t=e._destructionListeners=new r;e.on("ref",(function(e){t.has(e.name)||t.set(e.name,[]),t.get(e.name).push(e)})),e.on("unref",(function(e){if(t.has(e.name)){var n=t.get(e.name),i=n.indexOf(e);i<0||(n.splice(i,1),n.length>1?t.set(e.name,n):t.delete(e.name))}})),e.on("destroyed",(function(e){if(t.has(e)){var n=t.get(e);t.delete(e),n.forEach((function(e){e.emit("destroyed",!0)}))}}))}(et),et.adapter=function(e,t,n){t.valid()&&(et.adapters[e]=t,n&&et.preferredAdapters.push(e))},et.plugin=function(e){if("function"==typeof e)e(et);else{if("object"!=typeof e||0===Object.keys(e).length)throw new Error('Invalid plugin: got "'+e+'", expected an object or a function');Object.keys(e).forEach((function(t){et.prototype[t]=e[t]}))}return this.__defaults&&(et.__defaults=I({},this.__defaults)),et},et.defaults=function(e){let t=Je(et,(function(e,n){n=n||{},e&&"object"==typeof e&&(e=(n=e).name,delete n.name),n=I({},t.__defaults,n),et.call(this,e,n)}));return t.preferredAdapters=et.preferredAdapters.slice(),Object.keys(et).forEach((function(e){e in t||(t[e]=et[e])})),t.__defaults=I({},this.__defaults,e),t},et.fetch=function(e,t){return nt(e,t)},et.prototype.activeTasks=et.activeTasks=new class{constructor(){this.tasks={}}list(){return Object.values(this.tasks)}add(e){const t=Object(u.a)();return this.tasks[t]={id:t,name:e.name,total_items:e.total_items,created_at:(new Date).toJSON()},t}get(e){return this.tasks[e]}remove(e,t){return delete this.tasks[e],this.tasks}update(e,t){const n=this.tasks[e];if(void 0!==n){const i={id:n.id,name:n.name,created_at:n.created_at,total_items:t.total_items||n.total_items,completed_items:t.completed_items||n.completed_items,updated_at:(new Date).toJSON()};this.tasks[e]=i}return this.tasks}};function ot(e,t){for(var n=e,i=0,r=t.length;i<r;i++){if(!(n=n[t[i]]))break}return n}function at(e){for(var t=[],n="",i=0,r=e.length;i<r;i++){var o=e[i];i>0&&"\\"===e[i-1]&&("$"===o||"."===o)?n=n.substring(0,n.length-1)+o:"."===o?(t.push(n),n=""):n+=o}return t.push(n),t}var ct=["$or","$nor","$not"];function st(e){return ct.indexOf(e)>-1}function ut(e){return Object.keys(e)[0]}function dt(e){var t={},n={$or:!0,$nor:!0};return e.forEach((function(e){Object.keys(e).forEach((function(i){var r=e[i];if("object"!=typeof r&&(r={$eq:r}),st(i))if(r instanceof Array){if(n[i])return n[i]=!1,void(t[i]=r);var o=[];t[i].forEach((function(e){Object.keys(r).forEach((function(t){var n=r[t],i=Math.max(Object.keys(e).length,Object.keys(n).length),a=dt([e,n]);Object.keys(a).length<=i||o.push(a)}))})),t[i]=o}else t[i]=dt([r]);else{var a=t[i]=t[i]||{};Object.keys(r).forEach((function(e){var t=r[e];return"$gt"===e||"$gte"===e?function(e,t,n){if(void 0!==n.$eq)return;void 0!==n.$gte?"$gte"===e?t>n.$gte&&(n.$gte=t):t>=n.$gte&&(delete n.$gte,n.$gt=t):void 0!==n.$gt?"$gte"===e?t>n.$gt&&(delete n.$gt,n.$gte=t):t>n.$gt&&(n.$gt=t):n[e]=t}(e,t,a):"$lt"===e||"$lte"===e?function(e,t,n){if(void 0!==n.$eq)return;void 0!==n.$lte?"$lte"===e?t<n.$lte&&(n.$lte=t):t<=n.$lte&&(delete n.$lte,n.$lt=t):void 0!==n.$lt?"$lte"===e?t<n.$lt&&(delete n.$lt,n.$lte=t):t<n.$lt&&(n.$lt=t):n[e]=t}(e,t,a):"$ne"===e?function(e,t){"$ne"in t?t.$ne.push(e):t.$ne=[e]}(t,a):"$eq"===e?function(e,t){delete t.$gt,delete t.$gte,delete t.$lt,delete t.$lte,delete t.$ne,t.$eq=e}(t,a):"$regex"===e?function(e,t){"$regex"in t?t.$regex.push(e):t.$regex=[e]}(t,a):void(a[e]=t)}))}}))})),t}function lt(e){var t=x(e);(function e(t,n){for(var i in t){"$and"===i&&(n=!0);var r=t[i];"object"==typeof r&&(n=e(r,n))}return n})(t,!1)&&"$and"in(t=function e(t){for(var n in t){if(Array.isArray(t))for(var i in t)t[i].$and&&(t[i]=dt(t[i].$and));var r=t[n];"object"==typeof r&&e(r)}return t}(t))&&(t=dt(t.$and)),["$or","$nor"].forEach((function(e){e in t&&t[e].forEach((function(e){for(var t=Object.keys(e),n=0;n<t.length;n++){var i=t[n],r=e[i];"object"==typeof r&&null!==r||(e[i]={$eq:r})}}))})),"$not"in t&&(t.$not=dt([t.$not]));for(var n=Object.keys(t),i=0;i<n.length;i++){var r=n[i],o=t[r];"object"==typeof o&&null!==o||(o={$eq:o}),t[r]=o}return function e(t){Object.keys(t).forEach((function(n){var i=t[n];Array.isArray(i)?i.forEach((function(t){t&&"object"==typeof t&&e(t)})):"$ne"===n?t.$ne=[i]:"$regex"===n?t.$regex=[i]:i&&"object"==typeof i&&e(i)}))}(t),t}function ft(e,t){if(e===t)return 0;e=ht(e),t=ht(t);var n=bt(e),i=bt(t);if(n-i!=0)return n-i;switch(typeof e){case"number":return e-t;case"boolean":return e<t?-1:1;case"string":return function(e,t){return e===t?0:e>t?1:-1}(e,t)}return Array.isArray(e)?function(e,t){for(var n=Math.min(e.length,t.length),i=0;i<n;i++){var r=ft(e[i],t[i]);if(0!==r)return r}return e.length===t.length?0:e.length>t.length?1:-1}(e,t):function(e,t){for(var n=Object.keys(e),i=Object.keys(t),r=Math.min(n.length,i.length),o=0;o<r;o++){var a=ft(n[o],i[o]);if(0!==a)return a;if(0!==(a=ft(e[n[o]],t[i[o]])))return a}return n.length===i.length?0:n.length>i.length?1:-1}(e,t)}function ht(e){switch(typeof e){case"undefined":return null;case"number":return e===1/0||e===-1/0||isNaN(e)?null:e;case"object":var t=e;if(Array.isArray(e)){var n=e.length;e=new Array(n);for(var i=0;i<n;i++)e[i]=ht(t[i])}else{if(e instanceof Date)return e.toJSON();if(null!==e)for(var r in e={},t)if(Object.prototype.hasOwnProperty.call(t,r)){var o=t[r];void 0!==o&&(e[r]=ht(o))}}}return e}function pt(e){if(null!==e)switch(typeof e){case"boolean":return e?1:0;case"number":return function(e){if(0===e)return"1";var t=e.toExponential().split(/e\+?/),n=parseInt(t[1],10),i=e<0,r=i?"0":"2",o=(a=((i?-n:n)- -324).toString(),c="0",s=3,function(e,t,n){for(var i="",r=n-e.length;i.length<r;)i+=t;return i}(a,c,s)+a);var a,c,s;r+=""+o;var u=Math.abs(parseFloat(t[0]));i&&(u=10-u);var d=u.toFixed(20);return d=d.replace(/\.?0+$/,""),r+=""+d}(e);case"string":return e.replace(/\u0002/g,"").replace(/\u0001/g,"").replace(/\u0000/g,"");case"object":var t=Array.isArray(e),n=t?e:Object.keys(e),i=-1,r=n.length,o="";if(t)for(;++i<r;)o+=gt(n[i]);else for(;++i<r;){var a=n[i];o+=gt(a)+gt(e[a])}return o}return""}function gt(e){return bt(e=ht(e))+""+pt(e)+"\0"}function mt(e,t){var n,i=t;if("1"===e[t])n=0,t++;else{var r="0"===e[t];t++;var o="",a=e.substring(t,t+3),c=parseInt(a,10)+-324;for(r&&(c=-c),t+=3;;){var s=e[t];if("\0"===s)break;o+=s,t++}n=1===(o=o.split(".")).length?parseInt(o,10):parseFloat(o[0]+"."+o[1]),r&&(n-=10),0!==c&&(n=parseFloat(n+"e"+c))}return{num:n,length:t-i}}function yt(e,t){var n=e.pop();if(t.length){var i=t[t.length-1];n===i.element&&(t.pop(),i=t[t.length-1]);var r=i.element,o=i.index;if(Array.isArray(r))r.push(n);else if(o===e.length-2){r[e.pop()]=n}else e.push(n)}}function bt(e){var t=["boolean","number","string","object"].indexOf(typeof e);return~t?null===e?1:Array.isArray(e)?5:t<3?t+2:t+3:Array.isArray(e)?5:void 0}function vt(e,t,n){if(e=e.filter((function(e){return _t(e.doc,t.selector,n)})),t.sort){var i=function(e){function t(t){return e.map((function(e){var n=at(ut(e));return ot(t,n)}))}return function(e,n){var i,r,o=ft(t(e.doc),t(n.doc));return 0!==o?o:(i=e.doc._id,r=n.doc._id,i<r?-1:i>r?1:0)}}(t.sort);e=e.sort(i),"string"!=typeof t.sort[0]&&"desc"===(r=t.sort[0])[ut(r)]&&(e=e.reverse())}var r;if("limit"in t||"skip"in t){var o=t.skip||0,a=("limit"in t?t.limit:e.length)+o;e=e.slice(o,a)}return e}function _t(e,t,n){return n.every((function(n){var i=t[n],r=at(n),o=ot(e,r);return st(n)?function(e,t,n){if("$or"===e)return t.some((function(e){return _t(n,e,Object.keys(e))}));if("$not"===e)return!_t(n,t,Object.keys(t));return!t.find((function(e){return _t(n,e,Object.keys(e))}))}(n,i,e):xt(i,e,r,o)}))}function xt(e,t,n,i){return!e||("object"==typeof e?Object.keys(e).every((function(r){var o=e[r];if(0===r.indexOf("$"))return Dt(r,t,o,n,i);var a=at(r);if(void 0===i&&"object"!=typeof o&&a.length>0)return!1;var c=ot(i,a);return"object"==typeof o?xt(o,t,n,c):Dt("$eq",t,o,a,c)})):e===i)}function Dt(e,t,n,i,r){if(!Et[e])throw new Error('unknown operator "'+e+'" - should be one of $eq, $lte, $lt, $gt, $gte, $exists, $ne, $in, $nin, $size, $mod, $regex, $elemMatch, $type, $allMatch or $all');return Et[e](t,n,i,r)}function wt(e){return null!=e}function Ut(e){return void 0!==e}function Tt(e,t){return t.some((function(t){return e instanceof Array?e.some((function(e){return 0===ft(t,e)})):0===ft(t,e)}))}var Et={$elemMatch:function(e,t,n,i){return!!Array.isArray(i)&&(0!==i.length&&("object"==typeof i[0]&&null!==i[0]?i.some((function(e){return _t(e,t,Object.keys(t))})):i.some((function(i){return xt(t,e,n,i)}))))},$allMatch:function(e,t,n,i){return!!Array.isArray(i)&&(0!==i.length&&("object"==typeof i[0]&&null!==i[0]?i.every((function(e){return _t(e,t,Object.keys(t))})):i.every((function(i){return xt(t,e,n,i)}))))},$eq:function(e,t,n,i){return Ut(i)&&0===ft(i,t)},$gte:function(e,t,n,i){return Ut(i)&&ft(i,t)>=0},$gt:function(e,t,n,i){return Ut(i)&&ft(i,t)>0},$lte:function(e,t,n,i){return Ut(i)&&ft(i,t)<=0},$lt:function(e,t,n,i){return Ut(i)&&ft(i,t)<0},$exists:function(e,t,n,i){return t?Ut(i):!Ut(i)},$mod:function(e,t,n,i){return wt(i)&&function(e,t){return"number"==typeof e&&parseInt(e,10)===e&&e%t[0]===t[1]}(i,t)},$ne:function(e,t,n,i){return t.every((function(e){return 0!==ft(i,e)}))},$in:function(e,t,n,i){return wt(i)&&Tt(i,t)},$nin:function(e,t,n,i){return wt(i)&&!Tt(i,t)},$size:function(e,t,n,i){return wt(i)&&Array.isArray(i)&&function(e,t){return e.length===t}(i,t)},$all:function(e,t,n,i){return Array.isArray(i)&&function(e,t){return t.every((function(t){return e.some((function(e){return 0===ft(t,e)}))}))}(i,t)},$regex:function(e,t,n,i){return wt(i)&&"string"==typeof i&&t.every((function(e){return function(e,t){return new RegExp(t).test(e)}(i,e)}))},$type:function(e,t,n,i){return function(e,t){switch(t){case"null":return null===e;case"boolean":return"boolean"==typeof e;case"number":return"number"==typeof e;case"string":return"string"==typeof e;case"array":return e instanceof Array;case"object":return"[object Object]"==={}.toString.call(e)}}(i,t)}};function kt(e,t){if(e.selector&&e.filter&&"_selector"!==e.filter){var n="string"==typeof e.filter?e.filter:"function";return t(new Error('selector invalid for filter "'+n+'"'))}t()}function Ct(e){e.view&&!e.filter&&(e.filter="_view"),e.selector&&!e.filter&&(e.filter="_selector"),e.filter&&"string"==typeof e.filter&&("_view"===e.filter?e.view=oe(e.view):e.filter=oe(e.filter))}function St(e,t){return t.filter&&"string"==typeof t.filter&&!t.doc_ids&&!ie(e.db)}function Ft(e,t){var n=t.complete;if("_view"===t.filter){if(!t.view||"string"!=typeof t.view){var i=J(G,"`view` filter parameter not found or invalid.");return n(i)}var r=re(t.view);e.db.get("_design/"+r[0],(function(i,o){if(e.isCancelled)return n(null,{status:"cancelled"});if(i)return n(Q(i));var a=o&&o.views&&o.views[r[1]]&&o.views[r[1]].map;if(!a)return n(J(R,o.views?"missing json key: "+r[1]:"missing json key: views"));t.filter=de(["return function(doc) {",'  "use strict";',"  var emitted = false;","  var emit = function (a, b) {","    emitted = true;","  };","  var view = "+a+";","  view(doc);","  if (emitted) {","    return true;","  }","};"].join("\n"),{}),e.doChanges(t)}))}else if(t.selector)t.filter=function(e){return function(e,t){if("object"!=typeof t)throw new Error("Selector error: expected a JSON object");var n=vt([{doc:e}],{selector:t=lt(t)},Object.keys(t));return n&&1===n.length}(e,t.selector)},e.doChanges(t);else{var o=re(t.filter);e.db.get("_design/"+o[0],(function(i,r){if(e.isCancelled)return n(null,{status:"cancelled"});if(i)return n(Q(i));var a=r&&r.filters&&r.filters[o[1]];if(!a)return n(J(R,r&&r.filters?"missing json key: "+o[1]:"missing json key: filters"));t.filter=de('"use strict";\nreturn '+a+";",{}),e.doChanges(t)}))}}function At(e){return e.reduce((function(e,t){return e[t]=!0,e}),{})}et.plugin((function(e){e._changesFilterPlugin={validate:kt,normalize:Ct,shouldFilter:St,filter:Ft}})),et.version="8.0.1";var Ot=At(["_id","_rev","_access","_attachments","_deleted","_revisions","_revs_info","_conflicts","_deleted_conflicts","_local_seq","_rev_tree","_replication_id","_replication_state","_replication_state_time","_replication_state_reason","_replication_stats","_removed"]),Wt=At(["_access","_attachments","_replication_id","_replication_state","_replication_state_time","_replication_state_reason","_replication_stats"]);function Bt(e){if(!/^\d+-/.test(e))return J(Z);var t=e.indexOf("-"),n=e.substring(0,t),i=e.substring(t+1);return{prefix:parseInt(n,10),id:i}}function It(e,t,n){var i,r,o;n||(n={deterministic_revs:!0});var a={status:"available"};if(e._deleted&&(a.deleted=!0),t)if(e._id||(e._id=ke()),r=Ee(e,n.deterministic_revs),e._rev){if((o=Bt(e._rev)).error)return o;e._rev_tree=[{pos:o.prefix,ids:[o.id,{status:"missing"},[[r,a,[]]]]}],i=o.prefix+1}else e._rev_tree=[{pos:1,ids:[r,a,[]]}],i=1;else if(e._revisions&&(e._rev_tree=function(e,t){for(var n=e.start-e.ids.length+1,i=e.ids,r=[i[0],t,[]],o=1,a=i.length;o<a;o++)r=[i[o],{status:"missing"},[r]];return[{pos:n,ids:r}]}(e._revisions,a),i=e._revisions.start,r=e._revisions.ids[0]),!e._rev_tree){if((o=Bt(e._rev)).error)return o;i=o.prefix,r=o.id,e._rev_tree=[{pos:i,ids:[r,a,[]]}]}ne(e._id),e._rev=i+"-"+r;var c={metadata:{},data:{}};for(var s in e)if(Object.prototype.hasOwnProperty.call(e,s)){var u="_"===s[0];if(u&&!Ot[s]){var d=J($,s);throw d.message=$.message+": "+s,d}u&&!Wt[s]?c.metadata[s.slice(1)]=e[s]:c.data[s]=e[s]}return c}function Nt(e,t,n){var i=function(e){try{return fe(e)}catch(e){return{error:J(V,"Attachment is not a valid base64 string")}}}(e.data);if(i.error)return n(i.error);e.length=i.length,e.data="blob"===t?me(i,e.content_type):"base64"===t?he(i):i,Ue(i,(function(t){e.digest="md5-"+t,n()}))}function Lt(e,t,n){if(e.stub)return n();"string"==typeof e.data?Nt(e,t,n):function(e,t,n){Ue(e.data,(function(i){e.digest="md5-"+i,e.length=e.data.size||e.data.length||0,"binary"===t?ve(e.data,(function(t){e.data=t,n()})):"base64"===t?_e(e.data,(function(t){e.data=t,n()})):n()}))}(e,t,n)}function Rt(e,t,n,i,r,o,a,c){if(function(e,t){for(var n,i=e.slice(),r=t.split("-"),o=parseInt(r[0],10),a=r[1];n=i.pop();){if(n.pos===o&&n.ids[0]===a)return!0;for(var c=n.ids[2],s=0,u=c.length;s<u;s++)i.push({pos:n.pos+1,ids:c[s]})}return!1}(t.rev_tree,n.metadata.rev)&&!c)return i[r]=n,o();var s=t.winningRev||Ce(t),u="deleted"in t?t.deleted:Me(t,s),d="deleted"in n.metadata?n.metadata.deleted:Me(n.metadata),l=/^1-/.test(n.metadata.rev);if(u&&!d&&c&&l){var f=n.data;f._rev=s,f._id=n.metadata.id,n=It(f,c)}var h=je(t.rev_tree,n.metadata.rev_tree[0],e);if(c&&(u&&d&&"new_leaf"!==h.conflicts||!u&&"new_leaf"!==h.conflicts||u&&!d&&"new_branch"===h.conflicts)){var p=J(P);return i[r]=p,o()}var g=n.metadata.rev;n.metadata.rev_tree=h.tree,n.stemmedRevs=h.stemmedRevs||[],t.rev_map&&(n.metadata.rev_map=t.rev_map);var m=Ce(n.metadata),y=Me(n.metadata,m),b=u===y?0:u<y?-1:1;a(n,m,y,g===m?y:Me(n.metadata,g),!0,b,r,o)}function Pt(e,t,n,i,o,a,c,s,u){e=e||1e3;var d=s.new_edits,l=new r,f=0,h=t.length;function p(){++f===h&&u&&u()}t.forEach((function(e,t){if(e._id&&ze(e._id)){var i=e._deleted?"_removeLocal":"_putLocal";n[i](e,{ctx:o},(function(e,n){a[t]=e||n,p()}))}else{var r=e.metadata.id;l.has(r)?(h--,l.get(r).push([e,t])):l.set(r,[[e,t]])}})),l.forEach((function(t,n){var r=0;function o(){++r<t.length?u():p()}function u(){var u=t[r],l=u[0],f=u[1];if(i.has(n))Rt(e,i.get(n),l,a,f,o,c,d);else{var h=je([],l.metadata.rev_tree[0],e);l.metadata.rev_tree=h.tree,l.stemmedRevs=h.stemmedRevs||[],function(e,t,n){var i=Ce(e.metadata),r=Me(e.metadata,i);if("was_delete"in s&&r)return a[t]=J(R,"deleted"),n();if(d&&function(e){return"missing"===e.metadata.rev_tree[0].ids[1].status}(e)){var o=J(P);return a[t]=o,n()}c(e,i,r,r,!1,r?0:1,t,n)}(l,f,o)}}u()}))}var jt="document-store",qt="meta-store";function Mt(e){try{return JSON.stringify(e)}catch(t){return l.a.stringify(e)}}function zt(e){return function(t){var n="unknown_error";t.target&&t.target.error&&(n=t.target.error.name||t.target.error.message),e(J(Y,n,t.type))}}function Vt(e,t,n){return{data:Mt(e),winningRev:t,deletedOrLocal:n?"1":"0",seq:e.seq,id:e.id}}function Ht(e){if(!e)return null;var t=function(e){try{return JSON.parse(e)}catch(t){return l.a.parse(e)}}(e.data);return t.winningRev=e.winningRev,t.deleted="1"===e.deletedOrLocal,t.seq=e.seq,t}function $t(e){if(!e)return e;var t=e._doc_id_rev.lastIndexOf(":");return e._id=e._doc_id_rev.substring(0,t-1),e._rev=e._doc_id_rev.substring(t+1),delete e._doc_id_rev,e}function Gt(e,t,n,i){n?i(e?"string"!=typeof e?e:ye(e,t):pe([""],{type:t})):e?"string"!=typeof e?be(e,(function(e){i(he(e))})):i(e):i("")}function Kt(e,t,n,i){var r=Object.keys(e._attachments||{});if(!r.length)return i&&i();var o=0;function a(){++o===r.length&&i&&i()}r.forEach((function(i){t.attachments&&t.include_docs?function(e,t){var i=e._attachments[t],r=i.digest;n.objectStore("attach-store").get(r).onsuccess=function(e){i.body=e.target.result.body,a()}}(e,i):(e._attachments[i].stub=!0,a())}))}function Yt(e,t){return Promise.all(e.map((function(e){if(e.doc&&e.doc._attachments){var n=Object.keys(e.doc._attachments);return Promise.all(n.map((function(n){var i=e.doc._attachments[n];if("body"in i){var r=i.body,o=i.content_type;return new Promise((function(a){Gt(r,o,t,(function(t){e.doc._attachments[n]=I(T(i,["digest","content_type"]),{data:t}),a()}))}))}})))}})))}function Zt(e,t,n){var i=[],r=n.objectStore("by-sequence"),o=n.objectStore("attach-store"),a=n.objectStore("attach-seq-store"),c=e.length;function s(){--c||function(){if(!i.length)return;i.forEach((function(e){a.index("digestSeq").count(IDBKeyRange.bound(e+"::",e+"::￿",!1,!1)).onsuccess=function(t){t.target.result||o.delete(e)}}))}()}e.forEach((function(e){var n=r.index("_doc_id_rev"),o=t+"::"+e;n.getKey(o).onsuccess=function(e){var t=e.target.result;if("number"!=typeof t)return s();r.delete(t),a.index("seq").openCursor(IDBKeyRange.only(t)).onsuccess=function(e){var t=e.target.result;if(t){var n=t.value.digestSeq.split("::")[0];i.push(n),a.delete(t.primaryKey),t.continue()}else s()}}}))}function Xt(e,t,n){try{return{txn:e.transaction(t,n)}}catch(e){return{error:e}}}var Jt=new A;function Qt(e,t,n,i,o,a){for(var c,s,u,d,l,f,h,p,g=t.docs,m=0,y=g.length;m<y;m++){var b=g[m];b._id&&ze(b._id)||(b=g[m]=It(b,n.new_edits,e)).error&&!h&&(h=b)}if(h)return a(h);var v=!1,_=0,x=new Array(g.length),D=new r,w=!1,U=i._meta.blobSupport?"blob":"base64";function T(){v=!0,E()}function E(){p&&v&&(p.docCount+=_,f.put(p))}function k(){w||(Jt.notify(i._meta.name),a(null,x))}function C(e,t,n,i,r,o,a,c){e.metadata.winningRev=t,e.metadata.deleted=n;var s=e.data;if(s._id=e.metadata.id,s._rev=e.metadata.rev,i&&(s._deleted=!0),s._attachments&&Object.keys(s._attachments).length)return function(e,t,n,i,r,o){var a=e.data,c=0,s=Object.keys(a._attachments);function u(){c===s.length&&S(e,t,n,i,r,o)}function l(){c++,u()}s.forEach((function(n){var i=e.data._attachments[n];if(i.stub)c++,u();else{var r=i.data;delete i.data,i.revpos=parseInt(t,10),function(e,t,n){d.count(e).onsuccess=function(i){if(i.target.result)return n();var r={digest:e,body:t};d.put(r).onsuccess=n}}(i.digest,r,l)}}))}(e,t,n,r,a,c);_+=o,E(),S(e,t,n,r,a,c)}function S(e,t,n,r,o,a){var d=e.data,f=e.metadata;function h(o){var a=e.stemmedRevs||[];r&&i.auto_compaction&&(a=a.concat(function(e){var t=[];return Se(e.rev_tree,(function(e,n,i,r,o){"available"!==o.status||e||(t.push(n+"-"+i),o.status="missing")})),t}(e.metadata))),a&&a.length&&Zt(a,e.metadata.id,c),f.seq=o.target.result;var u=Vt(f,t,n);s.put(u).onsuccess=p}function p(){x[o]={ok:!0,id:f.id,rev:f.rev},D.set(e.metadata.id,e.metadata),function(e,t,n){var i=0,r=Object.keys(e.data._attachments||{});if(!r.length)return n();function o(){++i===r.length&&n()}function a(n){var i=e.data._attachments[n].digest,r=l.put({seq:t,digestSeq:i+"::"+t});r.onsuccess=o,r.onerror=function(e){e.preventDefault(),e.stopPropagation(),o()}}for(var c=0;c<r.length;c++)a(r[c])}(e,f.seq,a)}d._doc_id_rev=f.id+"::"+f.rev,delete d._id,delete d._rev;var g=u.put(d);g.onsuccess=h,g.onerror=function(e){e.preventDefault(),e.stopPropagation(),u.index("_doc_id_rev").getKey(d._doc_id_rev).onsuccess=function(e){u.put(d,e.target.result).onsuccess=h}}}!function(e,t,n){if(!e.length)return n();var i,r=0;function o(){r++,e.length===r&&(i?n(i):n())}e.forEach((function(e){var n=e.data&&e.data._attachments?Object.keys(e.data._attachments):[],r=0;if(!n.length)return o();function a(e){i=e,++r===n.length&&o()}for(var c in e.data._attachments)Object.prototype.hasOwnProperty.call(e.data._attachments,c)&&Lt(e.data._attachments[c],t,a)}))}(g,U,(function(t){if(t)return a(t);!function(){var t=Xt(o,[jt,"by-sequence","attach-store","local-store","attach-seq-store",qt],"readwrite");if(t.error)return a(t.error);(c=t.txn).onabort=zt(a),c.ontimeout=zt(a),c.oncomplete=k,s=c.objectStore(jt),u=c.objectStore("by-sequence"),d=c.objectStore("attach-store"),l=c.objectStore("attach-seq-store"),(f=c.objectStore(qt)).get(qt).onsuccess=function(e){p=e.target.result,E()},function(e){var t=[];if(g.forEach((function(e){e.data&&e.data._attachments&&Object.keys(e.data._attachments).forEach((function(n){var i=e.data._attachments[n];i.stub&&t.push(i.digest)}))})),!t.length)return e();var n,i=0;t.forEach((function(r){!function(e,t){d.get(e).onsuccess=function(n){if(n.target.result)t();else{var i=J(X,"unknown stub attachment with digest "+e);i.status=412,t(i)}}}(r,(function(r){r&&!n&&(n=r),++i===t.length&&e(n)}))}))}((function(t){if(t)return w=!0,a(t);!function(){if(!g.length)return;var t=0;function r(){++t===g.length&&Pt(e.revs_limit,g,i,D,c,x,C,n,T)}function o(e){var t=Ht(e.target.result);t&&D.set(t.id,t),r()}for(var a=0,u=g.length;a<u;a++){var d=g[a];if(d._id&&ze(d._id))r();else s.get(d.metadata.id).onsuccess=o}}()}))}()}))}function en(e,t,n,i,r){var o,a,c;function s(e){a=e.target.result,o&&r(o,a,c)}function u(e){o=e.target.result,a&&r(o,a,c)}function d(e){var t=e.target.result;if(!t)return r();r([t.key],[t.value],t)}-1===i&&(i=1e3),"function"==typeof e.getAll&&"function"==typeof e.getAllKeys&&i>1&&!n?(c={continue:function(){if(!o.length)return r();var n,c=o[o.length-1];if(t&&t.upper)try{n=IDBKeyRange.bound(c,t.upper,!0,t.upperOpen)}catch(e){if("DataError"===e.name&&0===e.code)return r()}else n=IDBKeyRange.lowerBound(c,!0);t=n,o=null,a=null,e.getAll(t,i).onsuccess=s,e.getAllKeys(t,i).onsuccess=u}},e.getAll(t,i).onsuccess=s,e.getAllKeys(t,i).onsuccess=u):n?e.openCursor(t,"prev").onsuccess=d:e.openCursor(t).onsuccess=d}function tn(e,t,n){var i,r,o="startkey"in e&&e.startkey,a="endkey"in e&&e.endkey,c="key"in e&&e.key,s="keys"in e&&e.keys,u=e.skip||0,d="number"==typeof e.limit?e.limit:-1,l=!1!==e.inclusive_end;if(!s&&(r=(i=function(e,t,n,i,r){try{if(e&&t)return r?IDBKeyRange.bound(t,e,!n,!1):IDBKeyRange.bound(e,t,!1,!n);if(e)return r?IDBKeyRange.upperBound(e):IDBKeyRange.lowerBound(e);if(t)return r?IDBKeyRange.lowerBound(t,!n):IDBKeyRange.upperBound(t,!n);if(i)return IDBKeyRange.only(i)}catch(e){return{error:e}}return null}(o,a,l,c,e.descending))&&i.error)&&("DataError"!==r.name||0!==r.code))return n(J(Y,r.name,r.message));var f=[jt,"by-sequence",qt];e.attachments&&f.push("attach-store");var h=Xt(t,f,"readonly");if(h.error)return n(h.error);var p=h.txn;p.oncomplete=function(){e.attachments?Yt(D,e.binary).then(E):E()},p.onabort=zt(n);var g,m,y,b=p.objectStore(jt),v=p.objectStore("by-sequence"),_=p.objectStore(qt),x=v.index("_doc_id_rev"),D=[];function w(t,n){var i={id:n.id,key:n.id,value:{rev:t}};n.deleted?s&&(D.push(i),i.value.deleted=!0,i.doc=null):u--<=0&&(D.push(i),e.include_docs&&function(t,n,i){var r=t.id+"::"+i;x.get(r).onsuccess=function(i){if(n.doc=$t(i.target.result)||{},e.conflicts){var r=Oe(t);r.length&&(n.doc._conflicts=r)}Kt(n.doc,e,p)}}(n,i,t))}function U(e){for(var t=0,n=e.length;t<n&&D.length!==d;t++){var i=e[t];if(i.error&&s)D.push(i);else{var r=Ht(i);w(r.winningRev,r)}}}function T(e,t,n){n&&(U(t),D.length<d&&n.continue())}function E(){var t={total_rows:g,offset:e.skip,rows:D};e.update_seq&&void 0!==m&&(t.update_seq=m),n(null,t)}return _.get(qt).onsuccess=function(e){g=e.target.result.docCount},e.update_seq&&(y=function(e){e.target.result&&e.target.result.length>0&&(m=e.target.result[0])},v.openCursor(null,"prev").onsuccess=function(e){var t=e.target.result,n=void 0;return t&&t.key&&(n=t.key),y({target:{result:[n]}})}),r||0===d?void 0:s?function(e,t,n){var i=new Array(e.length),r=0;e.forEach((function(o,a){t.get(o).onsuccess=function(t){t.target.result?i[a]=t.target.result:i[a]={key:o,error:"not_found"},++r===e.length&&n(e,i,{})}}))}(e.keys,b,T):-1===d?function(e,t,n){if("function"!=typeof e.getAll){var i=[];e.openCursor(t).onsuccess=function(e){var t=e.target.result;t?(i.push(t.value),t.continue()):n({target:{result:i}})}}else e.getAll(t).onsuccess=n}(b,i,(function(t){var n=t.target.result;e.descending&&(n=n.reverse()),U(n)})):void en(b,i,e.descending,d+u,T)}var nn=!1,rn=[];function on(){!nn&&rn.length&&(nn=!0,rn.shift()())}function an(e,t,n,o){if((e=x(e)).continuous){var a=n+":"+ke();return Jt.addListener(n,a,t,e),Jt.notify(n),{cancel:function(){Jt.removeListener(n,a)}}}var c=e.doc_ids&&new i(e.doc_ids);e.since=e.since||0;var s=e.since,u="limit"in e?e.limit:-1;0===u&&(u=1);var d,l,f,h,p=[],g=0,m=ee(e),y=new r;function b(e,t,n,i){if(n.seq!==t)return i();if(n.winningRev===e._rev)return i(n,e);var r=e._id+"::"+n.winningRev;h.get(r).onsuccess=function(e){i(n,$t(e.target.result))}}function v(){e.complete(null,{results:p,last_seq:s})}var _=[jt,"by-sequence"];e.attachments&&_.push("attach-store");var D=Xt(o,_,"readonly");if(D.error)return e.complete(D.error);(d=D.txn).onabort=zt(e.complete),d.oncomplete=function(){!e.continuous&&e.attachments?Yt(p).then(v):v()},l=d.objectStore("by-sequence"),f=d.objectStore(jt),h=l.index("_doc_id_rev"),en(l,e.since&&!e.descending?IDBKeyRange.lowerBound(e.since,!0):null,e.descending,u,(function(t,n,i){if(i&&t.length){var r=new Array(t.length),o=new Array(t.length),a=0;n.forEach((function(n,s){!function(e,t,n){if(c&&!c.has(e._id))return n();var i=y.get(e._id);if(i)return b(e,t,i,n);f.get(e._id).onsuccess=function(r){i=Ht(r.target.result),y.set(e._id,i),b(e,t,i,n)}}($t(n),t[s],(function(n,c){o[s]=n,r[s]=c,++a===t.length&&function(){for(var t=[],n=0,a=r.length;n<a&&g!==u;n++){var c=r[n];if(c){var s=o[n];t.push(l(s,c))}}Promise.all(t).then((function(t){for(var n=0,i=t.length;n<i;n++)t[n]&&e.onChange(t[n])})).catch(e.complete),g!==u&&i.continue()}()}))}))}function l(t,n){var i=e.processChange(n,t,e);s=i.seq=t.seq;var r=m(i);return"object"==typeof r?Promise.reject(r):r?(g++,e.return_docs&&p.push(i),e.attachments&&e.include_docs?new Promise((function(t){Kt(n,e,d,(function(){Yt([i],e.binary).then((function(){t(i)}))}))})):Promise.resolve(i)):Promise.resolve()}}))}var cn,sn=new r,un=new r;function dn(e,t){var n=this;!function(e,t,n){rn.push((function(){e((function(e,i){!function(e,t,n,i){try{e(t,n)}catch(t){i.emit("error",t)}}(t,e,i,n),nn=!1,a()((function(){on()}))}))})),on()}((function(t){!function(e,t,n){var i=t.name,r=null,o=null;function c(e){return function(t,n){t&&t instanceof Error&&!t.reason&&o&&(t.reason=o),e(t,n)}}function s(e,t){var n=e.objectStore(jt);n.createIndex("deletedOrLocal","deletedOrLocal",{unique:!1}),n.openCursor().onsuccess=function(e){var i=e.target.result;if(i){var r=i.value,o=Me(r);r.deletedOrLocal=o?"1":"0",n.put(r),i.continue()}else t()}}function u(e,t){var n=e.objectStore("local-store"),i=e.objectStore(jt),r=e.objectStore("by-sequence");i.openCursor().onsuccess=function(e){var o=e.target.result;if(o){var a=o.value,c=a.id,s=ze(c),u=Ce(a);if(s){var d=c+"::"+u,l=c+"::",f=c+"::~",h=r.index("_doc_id_rev"),p=IDBKeyRange.bound(l,f,!1,!1),g=h.openCursor(p);g.onsuccess=function(e){if(g=e.target.result){var t=g.value;t._doc_id_rev===d&&n.put(t),r.delete(g.primaryKey),g.continue()}else i.delete(o.primaryKey),o.continue()}}else o.continue()}else t&&t()}}function d(e,t){var n=e.objectStore("by-sequence"),i=e.objectStore("attach-store"),r=e.objectStore("attach-seq-store");i.count().onsuccess=function(e){if(!e.target.result)return t();n.openCursor().onsuccess=function(e){var n=e.target.result;if(!n)return t();for(var i=n.value,o=n.primaryKey,a=Object.keys(i._attachments||{}),c={},s=0;s<a.length;s++){c[i._attachments[a[s]].digest]=!0}var u=Object.keys(c);for(s=0;s<u.length;s++){var d=u[s];r.put({seq:o,digestSeq:d+"::"+o})}n.continue()}}}function l(e){var t=e.objectStore("by-sequence"),n=e.objectStore(jt);n.openCursor().onsuccess=function(e){var i=e.target.result;if(i){var r,o=(r=i.value).data?Ht(r):(r.deleted="1"===r.deletedOrLocal,r);if(o.winningRev=o.winningRev||Ce(o),o.seq)return a();!function(){var e=o.id+"::",n=o.id+"::￿",i=t.index("_doc_id_rev").openCursor(IDBKeyRange.bound(e,n)),r=0;i.onsuccess=function(e){var t=e.target.result;if(!t)return o.seq=r,a();var n=t.primaryKey;n>r&&(r=n),t.continue()}}()}function a(){var e=Vt(o,o.winningRev,o.deleted);n.put(e).onsuccess=function(){i.continue()}}}}e._meta=null,e._remote=!1,e.type=function(){return"idb"},e._id=w((function(t){t(null,e._meta.instanceId)})),e._bulkDocs=function(n,i,o){Qt(t,n,i,e,r,c(o))},e._get=function(e,t,n){var i,o,a,c=t.ctx;if(!c){var s=Xt(r,[jt,"by-sequence","attach-store"],"readonly");if(s.error)return n(s.error);c=s.txn}function u(){n(a,{doc:i,metadata:o,ctx:c})}c.objectStore(jt).get(e).onsuccess=function(e){if(!(o=Ht(e.target.result)))return a=J(R,"missing"),u();var n;if(t.rev)n=t.latest?function(e,t){for(var n,i=t.rev_tree.slice();n=i.pop();){var r=n.pos,o=n.ids,a=o[0],c=o[1],s=o[2],u=0===s.length,d=n.history?n.history.slice():[];if(d.push({id:a,pos:r,opts:c}),u)for(var l=0,f=d.length;l<f;l++){var h=d[l];if(h.pos+"-"+h.id===e)return r+"-"+a}for(var p=0,g=s.length;p<g;p++)i.push({pos:r+1,ids:s[p],history:d})}throw new Error("Unable to resolve latest revision for id "+t.id+", rev "+e)}(t.rev,o):t.rev;else if(n=o.winningRev,Me(o))return a=J(R,"deleted"),u();var r=c.objectStore("by-sequence"),s=o.id+"::"+n;r.index("_doc_id_rev").get(s).onsuccess=function(e){if((i=e.target.result)&&(i=$t(i)),!i)return a=J(R,"missing"),u();u()}}},e._getAttachment=function(e,t,n,i,o){var a;if(i.ctx)a=i.ctx;else{var c=Xt(r,[jt,"by-sequence","attach-store"],"readonly");if(c.error)return o(c.error);a=c.txn}var s=n.digest,u=n.content_type;a.objectStore("attach-store").get(s).onsuccess=function(e){Gt(e.target.result.body,u,i.binary,(function(e){o(null,e)}))}},e._info=function(t){var n,i,o=Xt(r,[qt,"by-sequence"],"readonly");if(o.error)return t(o.error);var a=o.txn;a.objectStore(qt).get(qt).onsuccess=function(e){i=e.target.result.docCount},a.objectStore("by-sequence").openCursor(null,"prev").onsuccess=function(e){var t=e.target.result;n=t?t.key:0},a.oncomplete=function(){t(null,{doc_count:i,update_seq:n,idb_attachment_format:e._meta.blobSupport?"binary":"base64"})}},e._allDocs=function(e,t){tn(e,r,c(t))},e._changes=function(t){return an(t,e,i,r)},e._close=function(e){r.close(),sn.delete(i),e()},e._getRevisionTree=function(e,t){var n=Xt(r,[jt],"readonly");if(n.error)return t(n.error);n.txn.objectStore(jt).get(e).onsuccess=function(e){var n=Ht(e.target.result);n?t(null,n.rev_tree):t(J(R))}},e._doCompaction=function(e,t,n){var i=Xt(r,[jt,"by-sequence","attach-store","attach-seq-store"],"readwrite");if(i.error)return n(i.error);var o=i.txn;o.objectStore(jt).get(e).onsuccess=function(n){var i=Ht(n.target.result);Se(i.rev_tree,(function(e,n,i,r,o){var a=n+"-"+i;-1!==t.indexOf(a)&&(o.status="missing")})),Zt(t,e,o);var r=i.winningRev,a=i.deleted;o.objectStore(jt).put(Vt(i,r,a))},o.onabort=zt(n),o.oncomplete=function(){n()}},e._getLocal=function(e,t){var n=Xt(r,["local-store"],"readonly");if(n.error)return t(n.error);var i=n.txn.objectStore("local-store").get(e);i.onerror=zt(t),i.onsuccess=function(e){var n=e.target.result;n?(delete n._doc_id_rev,t(null,n)):t(J(R))}},e._putLocal=function(e,t,n){"function"==typeof t&&(n=t,t={}),delete e._revisions;var i=e._rev,o=e._id;e._rev=i?"0-"+(parseInt(i.split("-")[1],10)+1):"0-1";var a,c=t.ctx;if(!c){var s=Xt(r,["local-store"],"readwrite");if(s.error)return n(s.error);(c=s.txn).onerror=zt(n),c.oncomplete=function(){a&&n(null,a)}}var u,d=c.objectStore("local-store");i?(u=d.get(o)).onsuccess=function(r){var o=r.target.result;o&&o._rev===i?d.put(e).onsuccess=function(){a={ok:!0,id:e._id,rev:e._rev},t.ctx&&n(null,a)}:n(J(P))}:((u=d.add(e)).onerror=function(e){n(J(P)),e.preventDefault(),e.stopPropagation()},u.onsuccess=function(){a={ok:!0,id:e._id,rev:e._rev},t.ctx&&n(null,a)})},e._removeLocal=function(e,t,n){"function"==typeof t&&(n=t,t={});var i,o=t.ctx;if(!o){var a=Xt(r,["local-store"],"readwrite");if(a.error)return n(a.error);(o=a.txn).oncomplete=function(){i&&n(null,i)}}var c=e._id,s=o.objectStore("local-store"),u=s.get(c);u.onerror=zt(n),u.onsuccess=function(r){var o=r.target.result;o&&o._rev===e._rev?(s.delete(c),i={ok:!0,id:c,rev:"0-0"},t.ctx&&n(null,i)):n(J(R))}},e._destroy=function(e,t){Jt.removeAllListeners(i);var n=un.get(i);n&&n.result&&(n.result.close(),sn.delete(i));var r=indexedDB.deleteDatabase(i);r.onsuccess=function(){un.delete(i),F()&&i in localStorage&&delete localStorage[i],t(null,{ok:!0})},r.onerror=zt(t)};var f=sn.get(i);if(f)return r=f.idb,e._meta=f.global,a()((function(){n(null,e)}));var h=indexedDB.open(i,5);un.set(i,h),h.onupgradeneeded=function(e){var t=e.target.result;if(e.oldVersion<1)return function(e){var t=e.createObjectStore(jt,{keyPath:"id"});e.createObjectStore("by-sequence",{autoIncrement:!0}).createIndex("_doc_id_rev","_doc_id_rev",{unique:!0}),e.createObjectStore("attach-store",{keyPath:"digest"}),e.createObjectStore(qt,{keyPath:"id",autoIncrement:!1}),e.createObjectStore("detect-blob-support"),t.createIndex("deletedOrLocal","deletedOrLocal",{unique:!1}),e.createObjectStore("local-store",{keyPath:"_id"});var n=e.createObjectStore("attach-seq-store",{autoIncrement:!0});n.createIndex("seq","seq"),n.createIndex("digestSeq","digestSeq",{unique:!0})}(t);var n=e.currentTarget.transaction;e.oldVersion<3&&function(e){e.createObjectStore("local-store",{keyPath:"_id"}).createIndex("_doc_id_rev","_doc_id_rev",{unique:!0})}(t),e.oldVersion<4&&function(e){var t=e.createObjectStore("attach-seq-store",{autoIncrement:!0});t.createIndex("seq","seq"),t.createIndex("digestSeq","digestSeq",{unique:!0})}(t);var i=[s,u,d,l],r=e.oldVersion;!function e(){var t=i[r-1];r++,t&&t(n,e)}()},h.onsuccess=function(t){(r=t.target.result).onversionchange=function(){r.close(),sn.delete(i)},r.onabort=function(e){O("error","Database has a global failure",e.target.error),o=e.target.error,r.close(),sn.delete(i)};var a,c,s,u,d=r.transaction([qt,"detect-blob-support",jt],"readwrite"),l=!1;function f(){void 0!==s&&l&&(e._meta={name:i,instanceId:u,blobSupport:s},sn.set(i,{idb:r,global:e._meta}),n(null,e))}function h(){if(void 0!==c&&void 0!==a){var e=i+"_id";e in a?u=a[e]:a[e]=u=ke(),a.docCount=c,d.objectStore(qt).put(a)}}d.objectStore(qt).get(qt).onsuccess=function(e){a=e.target.result||{id:qt},h()},function(e,t){e.objectStore(jt).index("deletedOrLocal").count(IDBKeyRange.only("0")).onsuccess=function(e){t(e.target.result)}}(d,(function(e){c=e,h()})),cn||(cn=function(e){return new Promise((function(t){var n=pe([""]),i=e.objectStore("detect-blob-support").put(n,"key");i.onsuccess=function(){var e=navigator.userAgent.match(/Chrome\/(\d+)/),n=navigator.userAgent.match(/Edge\//);t(n||!e||parseInt(e[1],10)>=43)},i.onerror=e.onabort=function(e){e.preventDefault(),e.stopPropagation(),t(!1)}})).catch((function(){return!1}))}(d)),cn.then((function(e){s=e,f()})),d.oncomplete=function(){l=!0,f()},d.onabort=zt(n)},h.onerror=function(e){var t=e.target.error&&e.target.error.message;t?-1!==t.indexOf("stored database is a higher version")&&(t=new Error('This DB was created with the newer "indexeddb" adapter, but you are trying to open it with the older "idb" adapter')):t="Failed to open indexedDB, are you in private browsing mode?",O("error",t),n(J(Y,t))}}(n,e,t)}),t,n.constructor)}dn.valid=function(){try{return"undefined"!=typeof indexedDB&&"undefined"!=typeof IDBKeyRange}catch(e){return!1}};let ln={};function fn(e){let t=e.doc||e.ok,n=t&&t._attachments;n&&Object.keys(n).forEach((function(e){let t=n[e];t.data=ye(t.data,t.content_type)}))}function hn(e){return/^_design/.test(e)?"_design/"+encodeURIComponent(e.slice(8)):/^_local/.test(e)?"_local/"+encodeURIComponent(e.slice(7)):encodeURIComponent(e)}function pn(e){return e._attachments&&Object.keys(e._attachments)?Promise.all(Object.keys(e._attachments).map((function(t){let n=e._attachments[t];if(n.data&&"string"!=typeof n.data)return new Promise((function(e){_e(n.data,e)})).then((function(e){n.data=e}))}))):Promise.resolve()}function gn(e,t){if(function(e){if(!e.prefix)return!1;let t=ue(e.prefix).protocol;return"http"===t||"https"===t}(t)){let n=t.name.substr(t.prefix.length);e=t.prefix.replace(/\/?$/,"/")+encodeURIComponent(n)}let n=ue(e);(n.user||n.password)&&(n.auth={username:n.user,password:n.password});let i=n.path.replace(/(^\/|\/$)/g,"").split("/");return n.db=i.pop(),-1===n.db.indexOf("%")&&(n.db=encodeURIComponent(n.db)),n.path=i.join("/"),n}function mn(e,t){return yn(e,e.db+"/"+t)}function yn(e,t){let n=e.path?"/":"";return e.protocol+"://"+e.host+(e.port?":"+e.port:"")+"/"+e.path+n+t}function bn(e){return"?"+Object.keys(e).map((function(t){return t+"="+encodeURIComponent(e[t])})).join("&")}function vn(t,n){let i=this,r=gn(t.name,t),o=mn(r,"");t=x(t);const c=async function(e,n){if((n=n||{}).headers=n.headers||new it,n.credentials="include",t.auth||r.auth){let e=t.auth||r.auth,i=e.username+":"+e.password,o=he(unescape(encodeURIComponent(i)));n.headers.set("Authorization","Basic "+o)}let i=t.headers||{};Object.keys(i).forEach((function(e){n.headers.append(e,i[e])})),function(e){let t="undefined"!=typeof navigator&&navigator.userAgent?navigator.userAgent.toLowerCase():"",n=-1!==t.indexOf("msie"),i=-1!==t.indexOf("trident"),r=-1!==t.indexOf("edge"),o=!("method"in e)||"GET"===e.method;return(n||i||r)&&o}(n)&&(e+=(-1===e.indexOf("?")?"?":"&")+"_nonce="+Date.now());let o=t.fetch||nt;return await o(e,n)};function s(e,t){return U(e,(function(...e){l().then((function(){return t.apply(this,e)})).catch((function(t){e.pop()(t)}))})).bind(i)}async function u(e,t){let n={};(t=t||{}).headers=t.headers||new it,t.headers.get("Content-Type")||t.headers.set("Content-Type","application/json"),t.headers.get("Accept")||t.headers.set("Accept","application/json");const i=await c(e,t);n.ok=i.ok,n.status=i.status;const r=await i.json();if(n.data=r,!n.ok){throw n.data.status=n.status,Q(n.data)}return Array.isArray(n.data)&&(n.data=n.data.map((function(e){return e.error||e.missing?Q(e):e}))),n}let d;async function l(){return t.skip_setup?Promise.resolve():d||(d=u(o).catch((function(e){return e&&e.status&&404===e.status?(B(404,"PouchDB is just detecting if the remote exists."),u(o,{method:"PUT"})):Promise.reject(e)})).catch((function(e){return!(!e||!e.status||412!==e.status)||Promise.reject(e)})),d.catch((function(){d=null})),d)}function f(e){return e.split("/").map(encodeURIComponent).join("/")}a()((function(){n(null,i)})),i._remote=!0,i.type=function(){return"http"},i.id=s("id",(async function(e){let t;try{const e=await c(yn(r,""));t=await e.json()}catch(e){t={}}e(null,t&&t.uuid?t.uuid+r.db:mn(r,""))})),i.compact=s("compact",(async function(e,t){"function"==typeof e&&(t=e,e={}),e=x(e),await u(mn(r,"_compact"),{method:"POST"}),function n(){i.info((function(i,r){r&&!r.compact_running?t(null,{ok:!0}):setTimeout(n,e.interval||200)}))}()})),i.bulkGet=U("bulkGet",(function(e,t){let n=this;async function i(t){let n={};e.revs&&(n.revs=!0),e.attachments&&(n.attachments=!0),e.latest&&(n.latest=!0);try{const i=await u(mn(r,"_bulk_get"+bn(n)),{method:"POST",body:JSON.stringify({docs:e.docs})});e.attachments&&e.binary&&i.data.results.forEach((function(e){e.docs.forEach(fn)})),t(null,i.data)}catch(e){t(e)}}function o(){let i=Math.ceil(e.docs.length/50),r=0,o=new Array(i);function a(e){return function(n,a){o[e]=a.results,++r===i&&t(null,{results:te(o)})}}for(let t=0;t<i;t++){let i=T(e,["revs","attachments","binary","latest"]);i.docs=e.docs.slice(50*t,Math.min(e.docs.length,50*(t+1))),S(n,i,a(t))}}let a=yn(r,""),c=ln[a];"boolean"!=typeof c?i((function(e,n){e?(ln[a]=!1,B(e.status,"PouchDB is just detecting if the remote supports the _bulk_get API."),o()):(ln[a]=!0,t(null,n))})):c?i(t):o()})),i._info=async function(e){try{await l();const t=await c(mn(r,"")),n=await t.json();n.host=mn(r,""),e(null,n)}catch(t){e(t)}},i.fetch=async function(e,t){await l();const n="/"===e.substring(0,1)?yn(r,e.substring(1)):mn(r,e);return c(n,t)},i.get=s("get",(async function(e,t,n){"function"==typeof t&&(n=t,t={});let i={};function o(e){let n=e._attachments,i=n&&Object.keys(n);if(n&&i.length)return function(e,t){return new Promise((function(n,i){var r,o=0,a=0,c=0,s=e.length;function u(){++c===s?r?i(r):n():f()}function d(){o--,u()}function l(e){o--,r=r||e,u()}function f(){for(;o<t&&a<s;)o++,e[a++]().then(d,l)}f()}))}(i.map((function(i){return function(){return async function(i){const o=n[i],a=hn(e._id)+"/"+f(i)+"?rev="+e._rev,s=await c(mn(r,a));let u,d;if(u="buffer"in s?await s.buffer():await s.blob(),t.binary){let e=Object.getOwnPropertyDescriptor(u.__proto__,"type");e&&!e.set||(u.type=o.content_type),d=u}else d=await new Promise((function(e){_e(u,e)}));delete o.stub,delete o.length,o.data=d}(i)}})),5)}(t=x(t)).revs&&(i.revs=!0),t.revs_info&&(i.revs_info=!0),t.latest&&(i.latest=!0),t.open_revs&&("all"!==t.open_revs&&(t.open_revs=JSON.stringify(t.open_revs)),i.open_revs=t.open_revs),t.rev&&(i.rev=t.rev),t.conflicts&&(i.conflicts=t.conflicts),t.update_seq&&(i.update_seq=t.update_seq),e=hn(e);const a=mn(r,e+bn(i));try{const e=await u(a);t.attachments&&await(s=e.data,Array.isArray(s)?Promise.all(s.map((function(e){if(e.ok)return o(e.ok)}))):o(s)),n(null,e.data)}catch(t){t.docId=e,n(t)}var s})),i.remove=s("remove",(async function(e,t,n,i){let o;"string"==typeof t?(o={_id:e,_rev:t},"function"==typeof n&&(i=n,n={})):(o=e,"function"==typeof t?(i=t,n={}):(i=n,n=t));const a=o._rev||n.rev,c=mn(r,hn(o._id))+"?rev="+a;try{i(null,(await u(c,{method:"DELETE"})).data)}catch(e){i(e)}})),i.getAttachment=s("getAttachment",(async function(t,n,i,o){"function"==typeof i&&(o=i,i={});const a=i.rev?"?rev="+i.rev:"",s=mn(r,hn(t))+"/"+f(n)+a;let u;try{const t=await c(s,{method:"GET"});if(!t.ok)throw t;let n;if(u=t.headers.get("content-type"),n=void 0===e||e.browser||"function"!=typeof t.buffer?await t.blob():await t.buffer(),void 0!==e&&!e.browser){var d=Object.getOwnPropertyDescriptor(n.__proto__,"type");d&&!d.set||(n.type=u)}o(null,n)}catch(e){o(e)}})),i.removeAttachment=s("removeAttachment",(async function(e,t,n,i){const o=mn(r,hn(e)+"/"+f(t))+"?rev="+n;try{i(null,(await u(o,{method:"DELETE"})).data)}catch(e){i(e)}})),i.putAttachment=s("putAttachment",(async function(e,t,n,i,o,a){"function"==typeof o&&(a=o,o=i,i=n,n=null);const c=hn(e)+"/"+f(t);let s=mn(r,c);if(n&&(s+="?rev="+n),"string"==typeof i){let e;try{e=fe(i)}catch(e){return a(J(V,"Attachment is not a valid base64 string"))}i=e?me(e,o):""}try{a(null,(await u(s,{headers:new it({"Content-Type":o}),method:"PUT",body:i})).data)}catch(e){a(e)}})),i._bulkDocs=async function(e,t,n){e.new_edits=t.new_edits;try{await l(),await Promise.all(e.docs.map(pn));n(null,(await u(mn(r,"_bulk_docs"),{method:"POST",body:JSON.stringify(e)})).data)}catch(e){n(e)}},i._put=async function(e,t,n){try{await l(),await pn(e);n(null,(await u(mn(r,hn(e._id)),{method:"PUT",body:JSON.stringify(e)})).data)}catch(t){t.docId=e&&e._id,n(t)}},i.allDocs=s("allDocs",(async function(e,t){"function"==typeof e&&(t=e,e={});let n,i={},o="GET";(e=x(e)).conflicts&&(i.conflicts=!0),e.update_seq&&(i.update_seq=!0),e.descending&&(i.descending=!0),e.include_docs&&(i.include_docs=!0),e.attachments&&(i.attachments=!0),e.key&&(i.key=JSON.stringify(e.key)),e.start_key&&(e.startkey=e.start_key),e.startkey&&(i.startkey=JSON.stringify(e.startkey)),e.end_key&&(e.endkey=e.end_key),e.endkey&&(i.endkey=JSON.stringify(e.endkey)),void 0!==e.inclusive_end&&(i.inclusive_end=!!e.inclusive_end),void 0!==e.limit&&(i.limit=e.limit),void 0!==e.skip&&(i.skip=e.skip);let a=bn(i);void 0!==e.keys&&(o="POST",n={keys:e.keys});try{const i=await u(mn(r,"_all_docs"+a),{method:o,body:JSON.stringify(n)});e.include_docs&&e.attachments&&e.binary&&i.data.rows.forEach(fn),t(null,i.data)}catch(e){t(e)}})),i._changes=function(e){let t="batch_size"in e?e.batch_size:25;(e=x(e)).continuous&&!("heartbeat"in e)&&(e.heartbeat=1e4);let n="timeout"in e?e.timeout:3e4;"timeout"in e&&e.timeout&&n-e.timeout<5e3&&(n=e.timeout+5e3),"heartbeat"in e&&e.heartbeat&&n-e.heartbeat<5e3&&(n=e.heartbeat+5e3);let i={};"timeout"in e&&e.timeout&&(i.timeout=e.timeout);let o=void 0!==e.limit&&e.limit,c=o;if(e.style&&(i.style=e.style),(e.include_docs||e.filter&&"function"==typeof e.filter)&&(i.include_docs=!0),e.attachments&&(i.attachments=!0),e.continuous&&(i.feed="longpoll"),e.seq_interval&&(i.seq_interval=e.seq_interval),e.conflicts&&(i.conflicts=!0),e.descending&&(i.descending=!0),e.update_seq&&(i.update_seq=!0),"heartbeat"in e&&e.heartbeat&&(i.heartbeat=e.heartbeat),e.filter&&"string"==typeof e.filter&&(i.filter=e.filter),e.view&&"string"==typeof e.view&&(i.filter="_view",i.view=e.view),e.query_params&&"object"==typeof e.query_params)for(let t in e.query_params)Object.prototype.hasOwnProperty.call(e.query_params,t)&&(i[t]=e.query_params[t]);let s,d="GET";e.doc_ids?(i.filter="_doc_ids",d="POST",s={doc_ids:e.doc_ids}):e.selector&&(i.filter="_selector",d="POST",s={selector:e.selector});let f,h=new tt;const p=async function(n,a){if(e.aborted)return;i.since=n,"object"==typeof i.since&&(i.since=JSON.stringify(i.since)),e.descending?o&&(i.limit=c):i.limit=!o||c>t?t:c;let p=mn(r,"_changes"+bn(i)),g={signal:h.signal,method:d,body:JSON.stringify(s)};if(f=n,!e.aborted)try{await l();a(null,(await u(p,g)).data)}catch(e){a(e)}};let g={results:[]};const m=function(n,i){if(e.aborted)return;let r=0;if(i&&i.results){r=i.results.length,g.last_seq=i.last_seq;let t=null,n=null;"number"==typeof i.pending&&(t=i.pending),"string"!=typeof g.last_seq&&"number"!=typeof g.last_seq||(n=g.last_seq),{}.query=e.query_params,i.results=i.results.filter((function(i){c--;let r=ee(e)(i);return r&&(e.include_docs&&e.attachments&&e.binary&&fn(i),e.return_docs&&g.results.push(i),e.onChange(i,t,n)),r}))}else if(n)return e.aborted=!0,void e.complete(n);i&&i.last_seq&&(f=i.last_seq);let s=o&&c<=0||i&&r<t||e.descending;(!e.continuous||o&&c<=0)&&s?e.complete(null,g):a()((function(){p(f,m)}))};return p(e.since||0,m),{cancel:function(){e.aborted=!0,h.abort()}}},i.revsDiff=s("revsDiff",(async function(e,t,n){"function"==typeof t&&(n=t,t={});try{n(null,(await u(mn(r,"_revs_diff"),{method:"POST",body:JSON.stringify(e)})).data)}catch(e){n(e)}})),i._close=function(e){e()},i._destroy=async function(e,t){try{t(null,await u(mn(r,""),{method:"DELETE"}))}catch(e){404===e.status?t(null,{ok:!0}):t(e)}}}vn.valid=function(){return!0};class _n extends Error{constructor(e){super(),this.status=400,this.name="query_parse_error",this.message=e,this.error=!0;try{Error.captureStackTrace(this,_n)}catch(e){}}}class xn extends Error{constructor(e){super(),this.status=404,this.name="not_found",this.message=e,this.error=!0;try{Error.captureStackTrace(this,xn)}catch(e){}}}class Dn extends Error{constructor(e){super(),this.status=500,this.name="invalid_value",this.message=e,this.error=!0;try{Error.captureStackTrace(this,Dn)}catch(e){}}}function wn(e,t){return t&&e.then((function(e){a()((function(){t(null,e)}))}),(function(e){a()((function(){t(e)}))})),e}function Un(e,t){return function(){var n=arguments,i=this;return e.add((function(){return t.apply(i,n)}))}}function Tn(e){var t=new i(e),n=new Array(t.size),r=-1;return t.forEach((function(e){n[++r]=e})),n}function En(e){var t=new Array(e.size),n=-1;return e.forEach((function(e,i){t[++n]=i})),t}function kn(e){return new Dn("builtin "+e+" function requires map values to be numbers or number arrays")}function Cn(e){for(var t=0,n=0,i=e.length;n<i;n++){var r=e[n];if("number"!=typeof r){if(!Array.isArray(r))throw kn("_sum");t="number"==typeof t?[t]:t;for(var o=0,a=r.length;o<a;o++){var c=r[o];if("number"!=typeof c)throw kn("_sum");void 0===t[o]?t.push(c):t[o]+=c}}else"number"==typeof t?t+=r:t[0]+=r}return t}var Sn=O.bind(null,"log"),Fn=Array.isArray,An=JSON.parse;function On(e,t){return de("return ("+e.replace(/;\s*$/,"")+");",{emit:t,sum:Cn,log:Sn,isArray:Fn,toJSON:An})}class Wn{constructor(){this.promise=new Promise((function(e){e()}))}add(e){return this.promise=this.promise.catch((function(){})).then((function(){return e()})),this.promise}finish(){return this.promise}}function Bn(e){if(!e)return"undefined";switch(typeof e){case"function":case"string":return e.toString();default:return JSON.stringify(e)}}async function In(e,t,n,i,r,o){const a=function(e,t){return Bn(e)+Bn(t)+"undefined"}(n,i);let c;if(!r&&(c=e._cachedViews=e._cachedViews||{},c[a]))return c[a];const s=e.info().then((async function(s){const u=s.db_name+"-mrview-"+(r?"temp":Te(a));await le(e,"_local/"+o,(function(e){e.views=e.views||{};let n=t;-1===n.indexOf("/")&&(n=t+"/"+t);const i=e.views[n]=e.views[n]||{};if(!i[u])return i[u]=!0,e}));const d=(await e.registerDependentDatabase(u)).db;d.auto_compaction=!0;const l={name:u,db:d,sourceDB:e,adapter:e.adapter,mapFun:n,reduceFun:i};let f;try{f=await l.db.get("_local/lastSeq")}catch(e){if(404!==e.status)throw e}return l.seq=f?f.seq:0,c&&l.db.once("destroyed",(function(){delete c[a]})),l}));return c&&(c[a]=s),s}var Nn={},Ln=new Wn;function Rn(e){return-1===e.indexOf("/")?[e,e]:e.split("/")}function Pn(e,t,n){try{e.emit("error",t)}catch(e){O("error","The user's map/reduce function threw an uncaught error.\nYou can debug this error by doing:\nmyDatabase.on('error', function (err) { debugger; });\nPlease double-check your map/reduce function."),O("error",t,n)}}var jn=function(e,t){return Cn(t)},qn=function(e,t){return t.length},Mn=function(e,t){return{sum:Cn(t),min:Math.min.apply(null,t),max:Math.max.apply(null,t),count:t.length,sumsqr:function(e){for(var t=0,n=0,i=e.length;n<i;n++){var r=e[n];t+=r*r}return t}(t)}};var zn=function(e,t,n,o){function c(e,t,n){try{t(n)}catch(i){Pn(e,i,{fun:t,doc:n})}}function s(e,t,n,i,r){try{return{output:t(n,i,r)}}catch(o){return Pn(e,o,{fun:t,keys:n,values:i,rereduce:r}),{error:o}}}function u(e,t){const n=ft(e.key,t.key);return 0!==n?n:ft(e.value,t.value)}function d(e,t,n){return n=n||0,"number"==typeof t?e.slice(n,t+n):n>0?e.slice(n):e}function l(e){const t=e.value;return t&&"object"==typeof t&&t._id||e.id}function f(e){return function(t){return e.include_docs&&e.attachments&&e.binary&&function(e){e.rows.forEach((function(e){const t=e.doc&&e.doc._attachments;t&&Object.keys(t).forEach((function(e){const n=t[e];t[e].data=ye(n.data,n.content_type)}))}))}(t),t}}function h(e,t,n,i){let r=t[e];void 0!==r&&(i&&(r=encodeURIComponent(JSON.stringify(r))),n.push(e+"="+r))}function p(e){if(void 0!==e){const t=Number(e);return isNaN(t)||t!==parseInt(e,10)?e:t}}function g(e,t){const n=e.descending?"endkey":"startkey",i=e.descending?"startkey":"endkey";if(void 0!==e[n]&&void 0!==e[i]&&ft(e[n],e[i])>0)throw new _n("No rows can match your key range, reverse your start_key and end_key or set {descending : true}");if(t.reduce&&!1!==e.reduce){if(e.include_docs)throw new _n("{include_docs:true} is invalid for reduce");if(e.keys&&e.keys.length>1&&!e.group&&!e.group_level)throw new _n("Multi-key fetches for reduce views must use {group: true}")}["group_level","limit","skip"].forEach((function(t){const n=function(e){if(e){if("number"!=typeof e)return new _n(`Invalid value for integer: "${e}"`);if(e<0)return new _n(`Invalid value for positive integer: "${e}"`)}}(e[t]);if(n)throw n}))}function m(e){return function(t){if(404===t.status)return e;throw t}}function y(e,t,n){return e.db.get("_local/lastSeq").catch(m({_id:"_local/lastSeq",seq:0})).then((function(r){var o=En(t);return Promise.all(o.map((function(n){return async function(e,t,n){const r="_local/doc_"+e,o={_id:r,keys:[]},a=n.get(e),c=a[0],s=a[1],u=await(function(e){return 1===e.length&&/^1-/.test(e[0].rev)}(s)?Promise.resolve(o):t.db.get(r).catch(m(o)));return function(e,t){const n=[],r=new i;for(let e=0,i=t.rows.length;e<i;e++){const i=t.rows[e].doc;if(i&&(n.push(i),r.add(i._id),i._deleted=!c.has(i._id),!i._deleted)){const e=c.get(i._id);"value"in e&&(i.value=e.value)}}const o=En(c);return o.forEach((function(e){if(!r.has(e)){const t={_id:e},i=c.get(e);"value"in i&&(t.value=i.value),n.push(t)}})),e.keys=Tn(o.concat(e.keys)),n.push(e),n}(u,await function(e){return e.keys.length?t.db.allDocs({keys:e.keys,include_docs:!0}):Promise.resolve({rows:[]})}(u))}(n,e,t)}))).then((function(t){var i=te(t);return r.seq=n,i.push(r),e.db.bulkDocs({docs:i})})).then(()=>function(e){return e.sourceDB.get("_local/purges").then((function(t){const n=t.purgeSeq;return e.db.get("_local/purgeSeq").then((function(e){return e._rev})).catch((function(e){if(404!==e.status)throw e})).then((function(t){return e.db.put({_id:"_local/purgeSeq",_rev:t,purgeSeq:n})}))})).catch((function(e){if(404!==e.status)throw e}))}(e))}))}function b(e){const t="string"==typeof e?e:e.name;let n=Nn[t];return n||(n=Nn[t]=new Wn),n}async function v(e,n){return Un(b(e),(function(){return async function(e,n){let i,o,a;const s=t(e.mapFun,(function(e,t){const n={id:o._id,key:ht(e)};null!=t&&(n.value=ht(t)),i.push(n)}));let d=e.seq||0;let l=0;const f={view:e.name,indexed_docs:l};e.sourceDB.emit("indexing",f);const h=new Wn;async function p(){return function(t,f){var m=t.results;if(!m.length&&!f.length)return;for(let e of f){if(m.findIndex((function(t){return t.id===e.docId}))<0){const t={_id:e.docId,doc:{_id:e.docId,_deleted:1},changes:[]};e.doc&&(t.doc=e.doc,t.changes.push({rev:e.doc._rev})),m.push(t)}}var b=function(t){const n=new r;for(let r=0,a=t.length;r<a;r++){const a=t[r];if("_"!==a.doc._id[0]){i=[],o=a.doc,o._deleted||c(e.sourceDB,s,o),i.sort(u);const t=g(i);n.set(a.doc._id,[t,a.changes])}d=a.seq}return n}(m);h.add(function(t,n){return function(){return y(e,t,n)}}(b,d)),l+=m.length;const v={view:e.name,last_seq:t.last_seq,results_count:m.length,indexed_docs:l};if(e.sourceDB.emit("indexing",v),e.sourceDB.activeTasks.update(a,{completed_items:l}),m.length<n.changes_batch_size)return;return p()}(await e.sourceDB.changes({return_docs:!0,conflicts:!0,include_docs:!0,style:"all_docs",since:d,limit:n.changes_batch_size}),await e.db.get("_local/purgeSeq").then((function(e){return e.purgeSeq})).catch((function(e){if(e&&404!==e.status)throw e;return-1})).then((function(t){return e.sourceDB.get("_local/purges").then((function(n){const i=n.purges.filter((function(e,n){return n>t})).map(e=>e.docId),r=i.filter((function(e,t){return i.indexOf(e)===t}));return Promise.all(r.map((function(t){return e.sourceDB.get(t).then((function(e){return{docId:t,doc:e}})).catch((function(e){if(404!==e.status)throw e;return{docId:t}}))})))})).catch((function(e){if(e&&404!==e.status)throw e;return[]}))})))}function g(e){const t=new r;let n;for(let i=0,r=e.length;i<r;i++){const r=e[i],o=[r.key,r.id];i>0&&0===ft(r.key,n)&&o.push(i),t.set(gt(o),r),n=r.key}return t}try{await e.sourceDB.info().then((function(t){a=e.sourceDB.activeTasks.add({name:"view_indexing",total_items:t.update_seq-d})})),await p(),await h.finish(),e.seq=d,e.sourceDB.activeTasks.remove(a)}catch(t){e.sourceDB.activeTasks.remove(a,t)}}(e,n)}))()}function _(e,t){return Un(b(e),(function(){return async function(e,t){let i;const o=e.reduceFun&&!1!==t.reduce,a=t.skip||0;void 0===t.keys||t.keys.length||(t.limit=0,delete t.keys);async function c(t){t.include_docs=!0;const n=await e.db.allDocs(t);return i=n.total_rows,n.rows.map((function(e){if("value"in e.doc&&"object"==typeof e.doc.value&&null!==e.doc.value){const t=Object.keys(e.doc.value).sort(),n=["id","key","value"];if(!(t<n||t>n))return e.doc.value}const t=function(e){for(var t=[],n=[],i=0;;){var r=e[i++];if("\0"!==r)switch(r){case"1":t.push(null);break;case"2":t.push("1"===e[i]),i++;break;case"3":var o=mt(e,i);t.push(o.num),i+=o.length;break;case"4":for(var a="";;){var c=e[i];if("\0"===c)break;a+=c,i++}a=a.replace(/\u0001\u0001/g,"\0").replace(/\u0001\u0002/g,"").replace(/\u0002\u0002/g,""),t.push(a);break;case"5":var s={element:[],index:t.length};t.push(s.element),n.push(s);break;case"6":var u={element:{},index:t.length};t.push(u.element),n.push(u);break;default:throw new Error("bad collationIndex or unexpectedly reached end of input: "+r)}else{if(1===t.length)return t.pop();yt(t,n)}}}(e.doc._id);return{key:t[0],id:t[1],value:"value"in e.doc?e.doc.value:null}}))}async function u(c){let u;if(u=o?function(e,t,i){0===i.group_level&&delete i.group_level;const r=i.group||i.group_level,o=n(e.reduceFun),a=[],c=isNaN(i.group_level)?Number.POSITIVE_INFINITY:i.group_level;t.forEach((function(e){const t=a[a.length-1];let n=r?e.key:null;if(r&&Array.isArray(n)&&(n=n.slice(0,c)),t&&0===ft(t.groupKey,n))return t.keys.push([e.key,e.id]),void t.values.push(e.value);a.push({keys:[[e.key,e.id]],values:[e.value],groupKey:n})})),t=[];for(let n=0,i=a.length;n<i;n++){const i=a[n],r=s(e.sourceDB,o,i.keys,i.values,!1);if(r.error&&r.error instanceof Dn)throw r.error;t.push({value:r.error?null:r.output,key:i.groupKey})}return{rows:d(t,i.limit,i.skip)}}(e,c,t):void 0===t.keys?{total_rows:i,offset:a,rows:c}:{total_rows:i,offset:a,rows:d(c,t.limit,t.skip)},t.update_seq&&(u.update_seq=e.seq),t.include_docs){const n=Tn(c.map(l)),i=await e.sourceDB.allDocs({keys:n,include_docs:!0,conflicts:t.conflicts,attachments:t.attachments,binary:t.binary});var f=new r;return i.rows.forEach((function(e){f.set(e.id,e.doc)})),c.forEach((function(e){var t=l(e),n=f.get(t);n&&(e.doc=n)})),u}return u}if(void 0!==t.keys){const e=t.keys.map((function(e){const n={startkey:gt([e]),endkey:gt([e,{}])};return t.update_seq&&(n.update_seq=!0),c(n)})),n=await Promise.all(e);return u(te(n))}{const e={descending:t.descending};let n,i;if(t.update_seq&&(e.update_seq=!0),"start_key"in t&&(n=t.start_key),"startkey"in t&&(n=t.startkey),"end_key"in t&&(i=t.end_key),"endkey"in t&&(i=t.endkey),void 0!==n&&(e.startkey=t.descending?gt([n,{}]):gt([n])),void 0!==i){let n=!1!==t.inclusive_end;t.descending&&(n=!n),e.endkey=gt(n?[i,{}]:[i])}if(void 0!==t.key){const n=gt([t.key]),i=gt([t.key,{}]);e.descending?(e.endkey=n,e.startkey=i):(e.startkey=n,e.endkey=i)}o||("number"==typeof t.limit&&(e.limit=t.limit),e.skip=a);return u(await c(e))}}(e,t)}))()}async function x(t,n,i){if("function"==typeof t._query)return function(e,t,n){return new Promise((function(i,r){e._query(t,n,(function(e,t){if(e)return r(e);i(t)}))}))}(t,n,i);if(ie(t))return async function(e,t,n){let i,r,o=[],a="GET";if(h("reduce",n,o),h("include_docs",n,o),h("attachments",n,o),h("limit",n,o),h("descending",n,o),h("group",n,o),h("group_level",n,o),h("skip",n,o),h("stale",n,o),h("conflicts",n,o),h("startkey",n,o,!0),h("start_key",n,o,!0),h("endkey",n,o,!0),h("end_key",n,o,!0),h("inclusive_end",n,o),h("key",n,o,!0),h("update_seq",n,o),o=o.join("&"),o=""===o?"":"?"+o,void 0!==n.keys){const e=2e3,r="keys="+encodeURIComponent(JSON.stringify(n.keys));r.length+o.length+1<=e?o+=("?"===o[0]?"&":"?")+r:(a="POST","string"==typeof t?i={keys:n.keys}:t.keys=n.keys)}if("string"==typeof t){const c=Rn(t),s=await e.fetch("_design/"+c[0]+"/_view/"+c[1]+o,{headers:new it({"Content-Type":"application/json"}),method:a,body:JSON.stringify(i)});r=s.ok;const u=await s.json();if(!r)throw u.status=s.status,Q(u);return u.rows.forEach((function(e){if(e.value&&e.value.error&&"builtin_reduce_error"===e.value.error)throw new Error(e.reason)})),new Promise((function(e){e(u)})).then(f(n))}i=i||{},Object.keys(t).forEach((function(e){Array.isArray(t[e])?i[e]=t[e]:i[e]=t[e].toString()}));const c=await e.fetch("_temp_view"+o,{headers:new it({"Content-Type":"application/json"}),method:"POST",body:JSON.stringify(i)});r=c.ok;const s=await c.json();if(!r)throw s.status=c.status,Q(s);return new Promise((function(e){e(s)})).then(f(n))}(t,n,i);const r={changes_batch_size:t.__opts.view_update_changes_batch_size||50};if("string"!=typeof n)return g(i,n),Ln.add((async function(){const o=await In(t,"temp_view/temp_view",n.map,n.reduce,!0,e);return a=v(o,r).then((function(){return _(o,i)})),c=function(){return o.db.destroy()},a.then((function(e){return c().then((function(){return e}))}),(function(e){return c().then((function(){throw e}))}));var a,c})),Ln.finish();{const c=n,s=Rn(c),u=s[0],d=s[1],l=await t.get("_design/"+u);if(!(n=l.views&&l.views[d]))throw new xn(`ddoc ${l._id} has no view named ${d}`);o(l,d),g(i,n);const f=await In(t,c,n.map,n.reduce,!1,e);return"ok"===i.stale||"update_after"===i.stale?("update_after"===i.stale&&a()((function(){v(f,r)})),_(f,i)):(await v(f,r),_(f,i))}}var D;return{query:function(e,t,n){const i=this;"function"==typeof t&&(n=t,t={}),t=t?function(e){return e.group_level=p(e.group_level),e.limit=p(e.limit),e.skip=p(e.skip),e}(t):{},"function"==typeof e&&(e={map:e});const r=Promise.resolve().then((function(){return x(i,e,t)}));return wn(r,n),r},viewCleanup:(D=function(){const t=this;return"function"==typeof t._viewCleanup?function(e){return new Promise((function(t,n){e._viewCleanup((function(e,i){if(e)return n(e);t(i)}))}))}(t):ie(t)?async function(e){return(await e.fetch("_view_cleanup",{headers:new it({"Content-Type":"application/json"}),method:"POST"})).json()}(t):async function(t){try{const n=await t.get("_local/"+e),o=new r;Object.keys(n.views).forEach((function(e){const t=Rn(e),n="_design/"+t[0],r=t[1];let a=o.get(n);a||(a=new i,o.set(n,a)),a.add(r)}));const a={keys:En(o),include_docs:!0},c=await t.allDocs(a),s={};c.rows.forEach((function(e){const t=e.key.substring(8);o.get(e.key).forEach((function(i){let r=t+"/"+i;n.views[r]||(r=i);const o=Object.keys(n.views[r]),a=e.doc&&e.doc.views&&e.doc.views[i];o.forEach((function(e){s[e]=s[e]||a}))}))}));const u=Object.keys(s).filter((function(e){return!s[e]})).map((function(e){return Un(b(e),(function(){return new t.constructor(e,t.__opts).destroy()}))()}));return Promise.all(u).then((function(){return{ok:!0}}))}catch(e){if(404===e.status)return{ok:!0};throw e}}(t)},function(...e){var t=e.pop(),n=D.apply(this,e);return"function"==typeof t&&wn(n,t),n})}}("mrviews",(function(e,t){if("function"==typeof e&&2===e.length){var n=e;return function(e){return n(e,t)}}return On(e.toString(),t)}),(function(e){var t=e.toString(),n=function(e){if(/^_sum/.test(e))return jn;if(/^_count/.test(e))return qn;if(/^_stats/.test(e))return Mn;if(/^_/.test(e))throw new Error(e+" is not a supported reduce function.")}(t);return n||On(t)}),(function(e,t){var n=e.views&&e.views[t];if("string"!=typeof n.map)throw new xn("ddoc "+e._id+" has no string view named "+t+", instead found object of type: "+typeof n.map)}));var Vn={query:function(e,t,n){return zn.query.call(this,e,t,n)},viewCleanup:function(e){return zn.viewCleanup.call(this,e)}};function Hn(e,t){var n=Object.keys(t._attachments);return Promise.all(n.map((function(n){return e.getAttachment(t._id,n,{rev:t._rev})})))}function $n(e,t,n,i){n=x(n);var r=[],o=!0;return Promise.resolve().then((function(){var a=function(e){var t=[];return Object.keys(e).forEach((function(n){e[n].missing.forEach((function(e){t.push({id:n,rev:e})}))})),{docs:t,revs:!0,latest:!0}}(n);if(a.docs.length)return e.bulkGet(a).then((function(n){if(i.cancelled)throw new Error("cancelled");return Promise.all(n.results.map((function(n){return Promise.all(n.docs.map((function(n){var i=n.ok;return n.error&&(o=!1),i&&i._attachments?function(e,t,n){var i=ie(t)&&!ie(e),r=Object.keys(n._attachments);return i?e.get(n._id).then((function(i){return Promise.all(r.map((function(r){return function(e,t,n){return!e._attachments||!e._attachments[n]||e._attachments[n].digest!==t._attachments[n].digest}(i,n,r)?t.getAttachment(n._id,r):e.getAttachment(i._id,r)})))})).catch((function(e){if(404!==e.status)throw e;return Hn(t,n)})):Hn(t,n)}(t,e,i).then((function(e){var t=Object.keys(i._attachments);return e.forEach((function(e,n){var r=i._attachments[t[n]];delete r.stub,delete r.length,r.data=e})),i})):i})))}))).then((function(e){r=r.concat(te(e).filter(Boolean))}))}))})).then((function(){return{ok:o,docs:r}}))}function Gn(e,t,n,i,r){return e.get(t).catch((function(n){if(404===n.status)return"http"!==e.adapter&&"https"!==e.adapter||B(404,"PouchDB is just checking if a remote checkpoint exists."),{session_id:i,_id:t,history:[],replicator:"pouchdb",version:1};throw n})).then((function(o){if(!r.cancelled&&o.last_seq!==n)return o.history=(o.history||[]).filter((function(e){return e.session_id!==i})),o.history.unshift({last_seq:n,session_id:i}),o.history=o.history.slice(0,5),o.version=1,o.replicator="pouchdb",o.session_id=i,o.last_seq=n,e.put(o).catch((function(o){if(409===o.status)return Gn(e,t,n,i,r);throw o}))}))}class Kn{constructor(e,t,n,i,r){this.src=e,this.target=t,this.id=n,this.returnValue=i,this.opts=r||{}}writeCheckpoint(e,t){var n=this;return this.updateTarget(e,t).then((function(){return n.updateSource(e,t)}))}updateTarget(e,t){return this.opts.writeTargetCheckpoint?Gn(this.target,this.id,e,t,this.returnValue):Promise.resolve(!0)}updateSource(e,t){if(this.opts.writeSourceCheckpoint){var n=this;return Gn(this.src,this.id,e,t,this.returnValue).catch((function(e){if(Xn(e))return n.opts.writeSourceCheckpoint=!1,!0;throw e}))}return Promise.resolve(!0)}getCheckpoint(){var e=this;return e.opts&&e.opts.writeSourceCheckpoint&&!e.opts.writeTargetCheckpoint?e.src.get(e.id).then((function(e){return e.last_seq||0})).catch((function(e){if(404!==e.status)throw e;return 0})):e.target.get(e.id).then((function(t){return e.opts&&e.opts.writeTargetCheckpoint&&!e.opts.writeSourceCheckpoint?t.last_seq||0:e.src.get(e.id).then((function(e){return t.version!==e.version?0:(n=t.version?t.version.toString():"undefined")in Yn?Yn[n](t,e):0;var n}),(function(n){if(404===n.status&&t.last_seq)return e.src.put({_id:e.id,last_seq:0}).then((function(){return 0}),(function(n){return Xn(n)?(e.opts.writeSourceCheckpoint=!1,t.last_seq):0}));throw n}))})).catch((function(e){if(404!==e.status)throw e;return 0}))}}var Yn={undefined:function(e,t){return 0===ft(e.last_seq,t.last_seq)?t.last_seq:0},1:function(e,t){return function(e,t){if(e.session_id===t.session_id)return{last_seq:e.last_seq,history:e.history};return function e(t,n){var i=t[0],r=t.slice(1),o=n[0],a=n.slice(1);if(!i||0===n.length)return{last_seq:0,history:[]};if(Zn(i.session_id,n))return{last_seq:i.last_seq,history:t};if(Zn(o.session_id,r))return{last_seq:o.last_seq,history:a};return e(r,a)}(e.history,t.history)}(t,e).last_seq}};function Zn(e,t){var n=t[0],i=t.slice(1);return!(!e||0===t.length)&&(e===n.session_id||Zn(e,i))}function Xn(e){return"number"==typeof e.status&&4===Math.floor(e.status/100)}function Jn(e,t,n,i,r){return this instanceof Kn?Jn:new Kn(e,t,n,i,r)}function Qn(e,t,n){var i=n.doc_ids?n.doc_ids.sort(ft):"",r=n.filter?n.filter.toString():"",o="",a="",c="";return n.selector&&(c=JSON.stringify(n.selector)),n.filter&&n.query_params&&(o=JSON.stringify(function(e){return Object.keys(e).sort(ft).reduce((function(t,n){return t[n]=e[n],t}),{})}(n.query_params))),n.filter&&"_view"===n.filter&&(a=n.view.toString()),Promise.all([e.id(),t.id()]).then((function(e){var t=e[0]+e[1]+r+a+o+i+c;return new Promise((function(e){Ue(t,e)}))})).then((function(e){return"_local/"+(e=e.replace(/\//g,".").replace(/\+/g,"_"))}))}function ei(e,t,n,i,r){var o,c,s,u,d=[],l={seq:0,changes:[],docs:[]},f=!1,h=!1,p=!1,g=0,m=0,y=n.continuous||n.live||!1,b=n.batch_size||100,v=n.batches_limit||10,_=n.style||"all_docs",D=!1,w=n.doc_ids,U=n.selector,T=[],E=ke();r=r||{ok:!0,start_time:(new Date).toISOString(),docs_read:0,docs_written:0,doc_write_failures:0,errors:[]};var k={};function C(){return s?Promise.resolve():Qn(e,t,n).then((function(r){c=r;var o={};o=!1===n.checkpoint?{writeSourceCheckpoint:!1,writeTargetCheckpoint:!1}:"source"===n.checkpoint?{writeSourceCheckpoint:!0,writeTargetCheckpoint:!1}:"target"===n.checkpoint?{writeSourceCheckpoint:!1,writeTargetCheckpoint:!0}:{writeSourceCheckpoint:!0,writeTargetCheckpoint:!0},s=new Jn(e,t,c,i,o)}))}function S(){if(T=[],0!==o.docs.length){var e=o.docs,a={timeout:n.timeout};return t.bulkDocs({docs:e,new_edits:!1},a).then((function(t){if(i.cancelled)throw N(),new Error("cancelled");var n=Object.create(null);t.forEach((function(e){e.error&&(n[e.id]=e)}));var o=Object.keys(n).length;r.doc_write_failures+=o,r.docs_written+=e.length-o,e.forEach((function(e){var t=n[e._id];if(t){r.errors.push(t);var o=(t.name||"").toLowerCase();if("unauthorized"!==o&&"forbidden"!==o)throw t;i.emit("denied",x(t))}else T.push(e)}))}),(function(t){throw r.doc_write_failures+=e.length,t}))}}function F(){if(o.error)throw new Error("There was a problem getting docs.");r.last_seq=m=o.seq;var t=x(r);return T.length&&(t.docs=T,"number"==typeof o.pending&&(t.pending=o.pending,delete o.pending),i.emit("change",t)),f=!0,e.info().then((function(t){var n=e.activeTasks.get(u);if(o&&n){var i=n.completed_items||0,r=parseInt(t.update_seq,10)-parseInt(g,10);e.activeTasks.update(u,{completed_items:i+o.changes.length,total_items:r})}})),s.writeCheckpoint(o.seq,E).then((function(){if(i.emit("checkpoint",{checkpoint:o.seq}),f=!1,i.cancelled)throw N(),new Error("cancelled");o=void 0,j()})).catch((function(e){throw z(e),e}))}function A(){return $n(e,t,o.diffs,i).then((function(e){o.error=!e.ok,e.docs.forEach((function(e){delete o.diffs[e._id],r.docs_read++,o.docs.push(e)}))}))}function O(){var e;i.cancelled||o||(0!==d.length?(o=d.shift(),i.emit("checkpoint",{start_next_batch:o.seq}),(e={},o.changes.forEach((function(t){i.emit("checkpoint",{revs_diff:t}),"_user/"!==t.id&&(e[t.id]=t.changes.map((function(e){return e.rev})))})),t.revsDiff(e).then((function(e){if(i.cancelled)throw N(),new Error("cancelled");o.diffs=e}))).then(A).then(S).then(F).then(O).catch((function(e){I("batch processing terminated with error",e)}))):B(!0))}function B(e){0!==l.changes.length?(e||h||l.changes.length>=b)&&(d.push(l),l={seq:0,changes:[],docs:[]},"pending"!==i.state&&"stopped"!==i.state||(i.state="active",i.emit("active")),O()):0!==d.length||o||((y&&k.live||h)&&(i.state="pending",i.emit("paused")),h&&N())}function I(e,t){p||(t.message||(t.message=e),r.ok=!1,r.status="aborting",d=[],l={seq:0,changes:[],docs:[]},N(t))}function N(o){if(!(p||i.cancelled&&(r.status="cancelled",f)))if(r.status=r.status||"complete",r.end_time=(new Date).toISOString(),r.last_seq=m,p=!0,e.activeTasks.remove(u,o),o){(o=J(o)).result=r;var a=(o.name||"").toLowerCase();"unauthorized"===a||"forbidden"===a?(i.emit("error",o),i.removeAllListeners()):function(e,t,n,i){if(!1===e.retry)return t.emit("error",n),void t.removeAllListeners();if("function"!=typeof e.back_off_function&&(e.back_off_function=W),t.emit("requestError",n),"active"===t.state||"pending"===t.state){t.emit("paused",n),t.state="stopped";var r=function(){e.current_back_off=0};t.once("paused",(function(){t.removeListener("active",r)})),t.once("active",r)}e.current_back_off=e.current_back_off||0,e.current_back_off=e.back_off_function(e.current_back_off),setTimeout(i,e.current_back_off)}(n,i,o,(function(){ei(e,t,n,i)}))}else i.emit("complete",r),i.removeAllListeners()}function L(t,r,o){if(i.cancelled)return N();if("number"==typeof r&&(l.pending=r),ee(n)(t))l.seq=t.seq||o,l.changes.push(t),i.emit("checkpoint",{pending_batch:l.seq}),a()((function(){B(0===d.length&&k.live)}));else{var c=e.activeTasks.get(u);if(c){var s=c.completed_items||0;e.activeTasks.update(u,{completed_items:++s})}}}function R(e){if(D=!1,i.cancelled)return N();if(e.results.length>0)k.since=e.results[e.results.length-1].seq,j(),B(!0);else{var t=function(){y?(k.live=!0,j()):h=!0,B(!0)};o||0!==e.results.length?t():(f=!0,s.writeCheckpoint(e.last_seq,E).then((function(){if(f=!1,r.last_seq=m=e.last_seq,i.cancelled)throw N(),new Error("cancelled");t()})).catch(z))}}function P(e){if(D=!1,i.cancelled)return N();I("changes rejected",e)}function j(){if(!D&&!h&&d.length<v){D=!0,i._changes&&(i.removeListener("cancel",i._abortChanges),i._changes.cancel()),i.once("cancel",r);var t=e.changes(k).on("change",L);t.then(o,o),t.then(R).catch(P),n.retry&&(i._changes=t,i._abortChanges=r)}function r(){t.cancel()}function o(){i.removeListener("cancel",r)}}function q(t){return e.info().then((function(i){var r=void 0===n.since?parseInt(i.update_seq,10)-parseInt(t,10):parseInt(i.update_seq,10);return u=e.activeTasks.add({name:`${y?"continuous ":""}replication from ${i.db_name}`,total_items:r}),t}))}function M(){C().then((function(){if(!i.cancelled)return s.getCheckpoint().then(q).then((function(e){g=e,k={since:m=e,limit:b,batch_size:b,style:_,doc_ids:w,selector:U,return_docs:!0},n.filter&&("string"!=typeof n.filter?k.include_docs=!0:k.filter=n.filter),"heartbeat"in n&&(k.heartbeat=n.heartbeat),"timeout"in n&&(k.timeout=n.timeout),n.query_params&&(k.query_params=n.query_params),n.view&&(k.view=n.view),j()}));N()})).catch((function(e){I("getCheckpoint rejected with ",e)}))}function z(e){f=!1,I("writeCheckpoint completed with error",e)}i.ready(e,t),i.cancelled?N():(i._addedListeners||(i.once("cancel",N),"function"==typeof n.complete&&(i.once("error",n.complete),i.once("complete",(function(e){n.complete(null,e)}))),i._addedListeners=!0),void 0===n.since?M():C().then((function(){return f=!0,s.writeCheckpoint(n.since,E)})).then((function(){f=!1,i.cancelled?N():(m=n.since,M())})).catch(z))}class ti extends h.a{constructor(){super(),this.cancelled=!1,this.state="pending";const e=new Promise((e,t)=>{this.once("complete",e),this.once("error",t)});this.then=function(t,n){return e.then(t,n)},this.catch=function(t){return e.catch(t)},this.catch((function(){}))}cancel(){this.cancelled=!0,this.state="cancelled",this.emit("cancel")}ready(e,t){if(this._readyCalled)return;this._readyCalled=!0;const n=()=>{this.cancel()};function i(){e.removeListener("destroyed",n),t.removeListener("destroyed",n)}e.once("destroyed",n),t.once("destroyed",n),this.once("complete",i),this.once("error",i)}}function ni(e,t){var n=t.PouchConstructor;return"string"==typeof e?new n(e,t):e}function ii(e,t,n,i){if("function"==typeof n&&(i=n,n={}),void 0===n&&(n={}),n.doc_ids&&!Array.isArray(n.doc_ids))throw J(G,"`doc_ids` filter parameter is not a list.");n.complete=i,(n=x(n)).continuous=n.continuous||n.live,n.retry="retry"in n&&n.retry,n.PouchConstructor=n.PouchConstructor||this;var r=new ti(n);return ei(ni(e,n),ni(t,n),n,r),r}function ri(e,t,n,i){return"function"==typeof n&&(i=n,n={}),void 0===n&&(n={}),(n=x(n)).PouchConstructor=n.PouchConstructor||this,e=ni(e,n),t=ni(t,n),new oi(e,t,n,i)}class oi extends h.a{constructor(e,t,n,i){super(),this.canceled=!1;const r=n.push?I({},n,n.push):n,o=n.pull?I({},n,n.pull):n;this.push=ii(e,t,r),this.pull=ii(t,e,o),this.pushPaused=!0,this.pullPaused=!0;const a=e=>{this.emit("change",{direction:"pull",change:e})},c=e=>{this.emit("change",{direction:"push",change:e})},s=e=>{this.emit("denied",{direction:"push",doc:e})},u=e=>{this.emit("denied",{direction:"pull",doc:e})},d=()=>{this.pushPaused=!0,this.pullPaused&&this.emit("paused")},l=()=>{this.pullPaused=!0,this.pushPaused&&this.emit("paused")},f=()=>{this.pushPaused=!1,this.pullPaused&&this.emit("active",{direction:"push"})},h=()=>{this.pullPaused=!1,this.pushPaused&&this.emit("active",{direction:"pull"})};let p={};const g=e=>(t,n)=>{("change"===t&&(n===a||n===c)||"denied"===t&&(n===u||n===s)||"paused"===t&&(n===l||n===d)||"active"===t&&(n===h||n===f))&&(t in p||(p[t]={}),p[t][e]=!0,2===Object.keys(p[t]).length&&this.removeAllListeners(t))};function m(e,t,n){-1==e.listeners(t).indexOf(n)&&e.on(t,n)}n.live&&(this.push.on("complete",this.pull.cancel.bind(this.pull)),this.pull.on("complete",this.push.cancel.bind(this.push))),this.on("newListener",(function(e){"change"===e?(m(this.pull,"change",a),m(this.push,"change",c)):"denied"===e?(m(this.pull,"denied",u),m(this.push,"denied",s)):"active"===e?(m(this.pull,"active",h),m(this.push,"active",f)):"paused"===e&&(m(this.pull,"paused",l),m(this.push,"paused",d))})),this.on("removeListener",(function(e){"change"===e?(this.pull.removeListener("change",a),this.push.removeListener("change",c)):"denied"===e?(this.pull.removeListener("denied",u),this.push.removeListener("denied",s)):"active"===e?(this.pull.removeListener("active",h),this.push.removeListener("active",f)):"paused"===e&&(this.pull.removeListener("paused",l),this.push.removeListener("paused",d))})),this.pull.on("removeListener",g("pull")),this.push.on("removeListener",g("push"));const y=Promise.all([this.push,this.pull]).then(e=>{const t={push:e[0],pull:e[1]};return this.emit("complete",t),i&&i(null,t),this.removeAllListeners(),t},e=>{if(this.cancel(),i?i(e):this.emit("error",e),this.removeAllListeners(),i)throw e});this.then=function(e,t){return y.then(e,t)},this.catch=function(e){return y.catch(e)}}cancel(){this.canceled||(this.canceled=!0,this.push.cancel(),this.pull.cancel())}}et.plugin((function(e){e.adapter("idb",dn,!0)})).plugin((function(e){e.adapter("http",vn,!1),e.adapter("https",vn,!1)})).plugin(Vn).plugin((function(e){e.replicate=ii,e.sync=ri,Object.defineProperty(e.prototype,"replicate",{get:function(){var e=this;return void 0===this.replicateMethods&&(this.replicateMethods={from:function(t,n,i){return e.constructor.replicate(t,e,n,i)},to:function(t,n,i){return e.constructor.replicate(e,t,n,i)}}),this.replicateMethods}}),e.prototype.sync=function(e,t,n){return this.constructor.sync(this,e,t,n)}})),t.default=et}.call(this,n(18))},function(e,t){},function(e,t,n){"use strict";(function(e){t.test=function(){return"function"==typeof e.queueMicrotask},t.install=function(t){return function(){e.queueMicrotask(t)}}}).call(this,n(9))},function(e,t,n){"use strict";(function(e){var n=e.MutationObserver||e.WebKitMutationObserver;t.test=function(){return n},t.install=function(t){var i=0,r=new n(t),o=e.document.createTextNode("");return r.observe(o,{characterData:!0}),function(){o.data=i=++i%2}}}).call(this,n(9))},function(e,t,n){"use strict";(function(e){t.test=function(){return!e.setImmediate&&void 0!==e.MessageChannel},t.install=function(t){var n=new e.MessageChannel;return n.port1.onmessage=t,function(){n.port2.postMessage(0)}}}).call(this,n(9))},function(e,t,n){"use strict";(function(e){t.test=function(){return"document"in e&&"onreadystatechange"in e.document.createElement("script")},t.install=function(t){return function(){var n=e.document.createElement("script");return n.onreadystatechange=function(){t(),n.onreadystatechange=null,n.parentNode.removeChild(n),n=null},e.document.documentElement.appendChild(n),t}}}).call(this,n(9))},function(e,t,n){"use strict";t.test=function(){return!0},t.install=function(e){return function(){setTimeout(e,0)}}},function(e,t,n){var i,r,o;
/* @license
Papa Parse
v5.4.1
https://github.com/mholt/PapaParse
License: MIT
*/r=[],void 0===(o="function"==typeof(i=function e(){"use strict";var t="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==t?t:{},n=!t.document&&!!t.postMessage,i=t.IS_PAPA_WORKER||!1,r={},o=0,a={parse:function(n,i){var c=(i=i||{}).dynamicTyping||!1;if(x(c)&&(i.dynamicTypingFunction=c,c={}),i.dynamicTyping=c,i.transform=!!x(i.transform)&&i.transform,i.worker&&a.WORKERS_SUPPORTED){var s=function(){if(!a.WORKERS_SUPPORTED)return!1;var n,i,c=(n=t.URL||t.webkitURL||null,i=e.toString(),a.BLOB_URL||(a.BLOB_URL=n.createObjectURL(new Blob(["var global = (function() { if (typeof self !== 'undefined') { return self; } if (typeof window !== 'undefined') { return window; } if (typeof global !== 'undefined') { return global; } return {}; })(); global.IS_PAPA_WORKER=true; ","(",i,")();"],{type:"text/javascript"})))),s=new t.Worker(c);return s.onmessage=m,s.id=o++,r[s.id]=s}();return s.userStep=i.step,s.userChunk=i.chunk,s.userComplete=i.complete,s.userError=i.error,i.step=x(i.step),i.chunk=x(i.chunk),i.complete=x(i.complete),i.error=x(i.error),delete i.worker,void s.postMessage({input:n,config:i,workerId:s.id})}var h=null;return a.NODE_STREAM_INPUT,"string"==typeof n?(n=function(e){return 65279===e.charCodeAt(0)?e.slice(1):e}(n),h=i.download?new u(i):new l(i)):!0===n.readable&&x(n.read)&&x(n.on)?h=new f(i):(t.File&&n instanceof File||n instanceof Object)&&(h=new d(i)),h.stream(n)},unparse:function(e,t){var n=!1,i=!0,r=",",o="\r\n",c='"',s=c+c,u=!1,d=null,l=!1;!function(){if("object"==typeof t){if("string"!=typeof t.delimiter||a.BAD_DELIMITERS.filter((function(e){return-1!==t.delimiter.indexOf(e)})).length||(r=t.delimiter),("boolean"==typeof t.quotes||"function"==typeof t.quotes||Array.isArray(t.quotes))&&(n=t.quotes),"boolean"!=typeof t.skipEmptyLines&&"string"!=typeof t.skipEmptyLines||(u=t.skipEmptyLines),"string"==typeof t.newline&&(o=t.newline),"string"==typeof t.quoteChar&&(c=t.quoteChar),"boolean"==typeof t.header&&(i=t.header),Array.isArray(t.columns)){if(0===t.columns.length)throw new Error("Option columns is empty");d=t.columns}void 0!==t.escapeChar&&(s=t.escapeChar+c),("boolean"==typeof t.escapeFormulae||t.escapeFormulae instanceof RegExp)&&(l=t.escapeFormulae instanceof RegExp?t.escapeFormulae:/^[=+\-@\t\r].*$/)}}();var f=new RegExp(p(c),"g");if("string"==typeof e&&(e=JSON.parse(e)),Array.isArray(e)){if(!e.length||Array.isArray(e[0]))return h(null,e,u);if("object"==typeof e[0])return h(d||Object.keys(e[0]),e,u)}else if("object"==typeof e)return"string"==typeof e.data&&(e.data=JSON.parse(e.data)),Array.isArray(e.data)&&(e.fields||(e.fields=e.meta&&e.meta.fields||d),e.fields||(e.fields=Array.isArray(e.data[0])?e.fields:"object"==typeof e.data[0]?Object.keys(e.data[0]):[]),Array.isArray(e.data[0])||"object"==typeof e.data[0]||(e.data=[e.data])),h(e.fields||[],e.data||[],u);throw new Error("Unable to serialize unrecognized input");function h(e,t,n){var a="";"string"==typeof e&&(e=JSON.parse(e)),"string"==typeof t&&(t=JSON.parse(t));var c=Array.isArray(e)&&0<e.length,s=!Array.isArray(t[0]);if(c&&i){for(var u=0;u<e.length;u++)0<u&&(a+=r),a+=g(e[u],u);0<t.length&&(a+=o)}for(var d=0;d<t.length;d++){var l=c?e.length:t[d].length,f=!1,h=c?0===Object.keys(t[d]).length:0===t[d].length;if(n&&!c&&(f="greedy"===n?""===t[d].join("").trim():1===t[d].length&&0===t[d][0].length),"greedy"===n&&c){for(var p=[],m=0;m<l;m++){var y=s?e[m]:m;p.push(t[d][y])}f=""===p.join("").trim()}if(!f){for(var b=0;b<l;b++){0<b&&!h&&(a+=r);var v=c&&s?e[b]:b;a+=g(t[d][v],b)}d<t.length-1&&(!n||0<l&&!h)&&(a+=o)}}return a}function g(e,t){if(null==e)return"";if(e.constructor===Date)return JSON.stringify(e).slice(1,25);var i=!1;l&&"string"==typeof e&&l.test(e)&&(e="'"+e,i=!0);var o=e.toString().replace(f,s);return(i=i||!0===n||"function"==typeof n&&n(e,t)||Array.isArray(n)&&n[t]||function(e,t){for(var n=0;n<t.length;n++)if(-1<e.indexOf(t[n]))return!0;return!1}(o,a.BAD_DELIMITERS)||-1<o.indexOf(r)||" "===o.charAt(0)||" "===o.charAt(o.length-1))?c+o+c:o}}};if(a.RECORD_SEP=String.fromCharCode(30),a.UNIT_SEP=String.fromCharCode(31),a.BYTE_ORDER_MARK="\ufeff",a.BAD_DELIMITERS=["\r","\n",'"',a.BYTE_ORDER_MARK],a.WORKERS_SUPPORTED=!n&&!!t.Worker,a.NODE_STREAM_INPUT=1,a.LocalChunkSize=10485760,a.RemoteChunkSize=5242880,a.DefaultDelimiter=",",a.Parser=g,a.ParserHandle=h,a.NetworkStreamer=u,a.FileStreamer=d,a.StringStreamer=l,a.ReadableStreamStreamer=f,t.jQuery){var c=t.jQuery;c.fn.parse=function(e){var n=e.config||{},i=[];return this.each((function(e){if("INPUT"!==c(this).prop("tagName").toUpperCase()||"file"!==c(this).attr("type").toLowerCase()||!t.FileReader||!this.files||0===this.files.length)return!0;for(var r=0;r<this.files.length;r++)i.push({file:this.files[r],inputElem:this,instanceConfig:c.extend({},n)})})),r(),this;function r(){if(0!==i.length){var t,n,r,s=i[0];if(x(e.before)){var u=e.before(s.file,s.inputElem);if("object"==typeof u){if("abort"===u.action)return t=s.file,n=s.inputElem,r=u.reason,void(x(e.error)&&e.error({name:"AbortError"},t,n,r));if("skip"===u.action)return void o();"object"==typeof u.config&&(s.instanceConfig=c.extend(s.instanceConfig,u.config))}else if("skip"===u)return void o()}var d=s.instanceConfig.complete;s.instanceConfig.complete=function(e){x(d)&&d(e,s.file,s.inputElem),o()},a.parse(s.file,s.instanceConfig)}else x(e.complete)&&e.complete()}function o(){i.splice(0,1),r()}}}function s(e){this._handle=null,this._finished=!1,this._completed=!1,this._halted=!1,this._input=null,this._baseIndex=0,this._partialLine="",this._rowCount=0,this._start=0,this._nextChunk=null,this.isFirstChunk=!0,this._completeResults={data:[],errors:[],meta:{}},function(e){var t=v(e);t.chunkSize=parseInt(t.chunkSize),e.step||e.chunk||(t.chunkSize=null),this._handle=new h(t),(this._handle.streamer=this)._config=t}.call(this,e),this.parseChunk=function(e,n){if(this.isFirstChunk&&x(this._config.beforeFirstChunk)){var r=this._config.beforeFirstChunk(e);void 0!==r&&(e=r)}this.isFirstChunk=!1,this._halted=!1;var o=this._partialLine+e;this._partialLine="";var c=this._handle.parse(o,this._baseIndex,!this._finished);if(!this._handle.paused()&&!this._handle.aborted()){var s=c.meta.cursor;this._finished||(this._partialLine=o.substring(s-this._baseIndex),this._baseIndex=s),c&&c.data&&(this._rowCount+=c.data.length);var u=this._finished||this._config.preview&&this._rowCount>=this._config.preview;if(i)t.postMessage({results:c,workerId:a.WORKER_ID,finished:u});else if(x(this._config.chunk)&&!n){if(this._config.chunk(c,this._handle),this._handle.paused()||this._handle.aborted())return void(this._halted=!0);c=void 0,this._completeResults=void 0}return this._config.step||this._config.chunk||(this._completeResults.data=this._completeResults.data.concat(c.data),this._completeResults.errors=this._completeResults.errors.concat(c.errors),this._completeResults.meta=c.meta),this._completed||!u||!x(this._config.complete)||c&&c.meta.aborted||(this._config.complete(this._completeResults,this._input),this._completed=!0),u||c&&c.meta.paused||this._nextChunk(),c}this._halted=!0},this._sendError=function(e){x(this._config.error)?this._config.error(e):i&&this._config.error&&t.postMessage({workerId:a.WORKER_ID,error:e,finished:!1})}}function u(e){var t;(e=e||{}).chunkSize||(e.chunkSize=a.RemoteChunkSize),s.call(this,e),this._nextChunk=n?function(){this._readChunk(),this._chunkLoaded()}:function(){this._readChunk()},this.stream=function(e){this._input=e,this._nextChunk()},this._readChunk=function(){if(this._finished)this._chunkLoaded();else{if(t=new XMLHttpRequest,this._config.withCredentials&&(t.withCredentials=this._config.withCredentials),n||(t.onload=_(this._chunkLoaded,this),t.onerror=_(this._chunkError,this)),t.open(this._config.downloadRequestBody?"POST":"GET",this._input,!n),this._config.downloadRequestHeaders){var e=this._config.downloadRequestHeaders;for(var i in e)t.setRequestHeader(i,e[i])}if(this._config.chunkSize){var r=this._start+this._config.chunkSize-1;t.setRequestHeader("Range","bytes="+this._start+"-"+r)}try{t.send(this._config.downloadRequestBody)}catch(e){this._chunkError(e.message)}n&&0===t.status&&this._chunkError()}},this._chunkLoaded=function(){4===t.readyState&&(t.status<200||400<=t.status?this._chunkError():(this._start+=this._config.chunkSize?this._config.chunkSize:t.responseText.length,this._finished=!this._config.chunkSize||this._start>=function(e){var t=e.getResponseHeader("Content-Range");return null===t?-1:parseInt(t.substring(t.lastIndexOf("/")+1))}(t),this.parseChunk(t.responseText)))},this._chunkError=function(e){var n=t.statusText||e;this._sendError(new Error(n))}}function d(e){var t,n;(e=e||{}).chunkSize||(e.chunkSize=a.LocalChunkSize),s.call(this,e);var i="undefined"!=typeof FileReader;this.stream=function(e){this._input=e,n=e.slice||e.webkitSlice||e.mozSlice,i?((t=new FileReader).onload=_(this._chunkLoaded,this),t.onerror=_(this._chunkError,this)):t=new FileReaderSync,this._nextChunk()},this._nextChunk=function(){this._finished||this._config.preview&&!(this._rowCount<this._config.preview)||this._readChunk()},this._readChunk=function(){var e=this._input;if(this._config.chunkSize){var r=Math.min(this._start+this._config.chunkSize,this._input.size);e=n.call(e,this._start,r)}var o=t.readAsText(e,this._config.encoding);i||this._chunkLoaded({target:{result:o}})},this._chunkLoaded=function(e){this._start+=this._config.chunkSize,this._finished=!this._config.chunkSize||this._start>=this._input.size,this.parseChunk(e.target.result)},this._chunkError=function(){this._sendError(t.error)}}function l(e){var t;s.call(this,e=e||{}),this.stream=function(e){return t=e,this._nextChunk()},this._nextChunk=function(){if(!this._finished){var e,n=this._config.chunkSize;return n?(e=t.substring(0,n),t=t.substring(n)):(e=t,t=""),this._finished=!t,this.parseChunk(e)}}}function f(e){s.call(this,e=e||{});var t=[],n=!0,i=!1;this.pause=function(){s.prototype.pause.apply(this,arguments),this._input.pause()},this.resume=function(){s.prototype.resume.apply(this,arguments),this._input.resume()},this.stream=function(e){this._input=e,this._input.on("data",this._streamData),this._input.on("end",this._streamEnd),this._input.on("error",this._streamError)},this._checkIsFinished=function(){i&&1===t.length&&(this._finished=!0)},this._nextChunk=function(){this._checkIsFinished(),t.length?this.parseChunk(t.shift()):n=!0},this._streamData=_((function(e){try{t.push("string"==typeof e?e:e.toString(this._config.encoding)),n&&(n=!1,this._checkIsFinished(),this.parseChunk(t.shift()))}catch(e){this._streamError(e)}}),this),this._streamError=_((function(e){this._streamCleanUp(),this._sendError(e)}),this),this._streamEnd=_((function(){this._streamCleanUp(),i=!0,this._streamData("")}),this),this._streamCleanUp=_((function(){this._input.removeListener("data",this._streamData),this._input.removeListener("end",this._streamEnd),this._input.removeListener("error",this._streamError)}),this)}function h(e){var t,n,i,r=Math.pow(2,53),o=-r,c=/^\s*-?(\d+\.?|\.\d+|\d+\.\d+)([eE][-+]?\d+)?\s*$/,s=/^((\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z)))$/,u=this,d=0,l=0,f=!1,h=!1,m=[],y={data:[],errors:[],meta:{}};if(x(e.step)){var b=e.step;e.step=function(t){if(y=t,w())D();else{if(D(),0===y.data.length)return;d+=t.data.length,e.preview&&d>e.preview?n.abort():(y.data=y.data[0],b(y,u))}}}function _(t){return"greedy"===e.skipEmptyLines?""===t.join("").trim():1===t.length&&0===t[0].length}function D(){return y&&i&&(T("Delimiter","UndetectableDelimiter","Unable to auto-detect delimiting character; defaulted to '"+a.DefaultDelimiter+"'"),i=!1),e.skipEmptyLines&&(y.data=y.data.filter((function(e){return!_(e)}))),w()&&function(){if(y)if(Array.isArray(y.data[0])){for(var t=0;w()&&t<y.data.length;t++)y.data[t].forEach(n);y.data.splice(0,1)}else y.data.forEach(n);function n(t,n){x(e.transformHeader)&&(t=e.transformHeader(t,n)),m.push(t)}}(),function(){if(!y||!e.header&&!e.dynamicTyping&&!e.transform)return y;function t(t,n){var i,r=e.header?{}:[];for(i=0;i<t.length;i++){var o=i,a=t[i];e.header&&(o=i>=m.length?"__parsed_extra":m[i]),e.transform&&(a=e.transform(a,o)),a=U(o,a),"__parsed_extra"===o?(r[o]=r[o]||[],r[o].push(a)):r[o]=a}return e.header&&(i>m.length?T("FieldMismatch","TooManyFields","Too many fields: expected "+m.length+" fields but parsed "+i,l+n):i<m.length&&T("FieldMismatch","TooFewFields","Too few fields: expected "+m.length+" fields but parsed "+i,l+n)),r}var n=1;return!y.data.length||Array.isArray(y.data[0])?(y.data=y.data.map(t),n=y.data.length):y.data=t(y.data,0),e.header&&y.meta&&(y.meta.fields=m),l+=n,y}()}function w(){return e.header&&0===m.length}function U(t,n){return i=t,e.dynamicTypingFunction&&void 0===e.dynamicTyping[i]&&(e.dynamicTyping[i]=e.dynamicTypingFunction(i)),!0===(e.dynamicTyping[i]||e.dynamicTyping)?"true"===n||"TRUE"===n||"false"!==n&&"FALSE"!==n&&(function(e){if(c.test(e)){var t=parseFloat(e);if(o<t&&t<r)return!0}return!1}(n)?parseFloat(n):s.test(n)?new Date(n):""===n?null:n):n;var i}function T(e,t,n,i){var r={type:e,code:t,message:n};void 0!==i&&(r.row=i),y.errors.push(r)}this.parse=function(r,o,c){var s=e.quoteChar||'"';if(e.newline||(e.newline=function(e,t){e=e.substring(0,1048576);var n=new RegExp(p(t)+"([^]*?)"+p(t),"gm"),i=(e=e.replace(n,"")).split("\r"),r=e.split("\n"),o=1<r.length&&r[0].length<i[0].length;if(1===i.length||o)return"\n";for(var a=0,c=0;c<i.length;c++)"\n"===i[c][0]&&a++;return a>=i.length/2?"\r\n":"\r"}(r,s)),i=!1,e.delimiter)x(e.delimiter)&&(e.delimiter=e.delimiter(r),y.meta.delimiter=e.delimiter);else{var u=function(t,n,i,r,o){var c,s,u,d;o=o||[",","\t","|",";",a.RECORD_SEP,a.UNIT_SEP];for(var l=0;l<o.length;l++){var f=o[l],h=0,p=0,m=0;u=void 0;for(var y=new g({comments:r,delimiter:f,newline:n,preview:10}).parse(t),b=0;b<y.data.length;b++)if(i&&_(y.data[b]))m++;else{var v=y.data[b].length;p+=v,void 0!==u?0<v&&(h+=Math.abs(v-u),u=v):u=v}0<y.data.length&&(p/=y.data.length-m),(void 0===s||h<=s)&&(void 0===d||d<p)&&1.99<p&&(s=h,c=f,d=p)}return{successful:!!(e.delimiter=c),bestDelimiter:c}}(r,e.newline,e.skipEmptyLines,e.comments,e.delimitersToGuess);u.successful?e.delimiter=u.bestDelimiter:(i=!0,e.delimiter=a.DefaultDelimiter),y.meta.delimiter=e.delimiter}var d=v(e);return e.preview&&e.header&&d.preview++,t=r,n=new g(d),y=n.parse(t,o,c),D(),f?{meta:{paused:!0}}:y||{meta:{paused:!1}}},this.paused=function(){return f},this.pause=function(){f=!0,n.abort(),t=x(e.chunk)?"":t.substring(n.getCharIndex())},this.resume=function(){u.streamer._halted?(f=!1,u.streamer.parseChunk(t,!0)):setTimeout(u.resume,3)},this.aborted=function(){return h},this.abort=function(){h=!0,n.abort(),y.meta.aborted=!0,x(e.complete)&&e.complete(y),t=""}}function p(e){return e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}function g(e){var t,n=(e=e||{}).delimiter,i=e.newline,r=e.comments,o=e.step,c=e.preview,s=e.fastMode,u=t=void 0===e.quoteChar||null===e.quoteChar?'"':e.quoteChar;if(void 0!==e.escapeChar&&(u=e.escapeChar),("string"!=typeof n||-1<a.BAD_DELIMITERS.indexOf(n))&&(n=","),r===n)throw new Error("Comment character same as delimiter");!0===r?r="#":("string"!=typeof r||-1<a.BAD_DELIMITERS.indexOf(r))&&(r=!1),"\n"!==i&&"\r"!==i&&"\r\n"!==i&&(i="\n");var d=0,l=!1;this.parse=function(a,f,h){if("string"!=typeof a)throw new Error("Input must be a string");var g=a.length,m=n.length,y=i.length,b=r.length,v=x(o),_=[],D=[],w=[],U=d=0;if(!a)return $();if(e.header&&!f){var T=a.split(i)[0].split(n),E=[],k={},C=!1;for(var S in T){var F=T[S];x(e.transformHeader)&&(F=e.transformHeader(F,S));var A=F,O=k[F]||0;for(0<O&&(C=!0,A=F+"_"+O),k[F]=O+1;E.includes(A);)A=A+"_"+O;E.push(A)}if(C){var W=a.split(i);W[0]=E.join(n),a=W.join(i)}}if(s||!1!==s&&-1===a.indexOf(t)){for(var B=a.split(i),I=0;I<B.length;I++){if(w=B[I],d+=w.length,I!==B.length-1)d+=i.length;else if(h)return $();if(!r||w.substring(0,b)!==r){if(v){if(_=[],M(w.split(n)),G(),l)return $()}else M(w.split(n));if(c&&c<=I)return _=_.slice(0,c),$(!0)}}return $()}for(var N=a.indexOf(n,d),L=a.indexOf(i,d),R=new RegExp(p(u)+p(t),"g"),P=a.indexOf(t,d);;)if(a[d]!==t)if(r&&0===w.length&&a.substring(d,d+b)===r){if(-1===L)return $();d=L+y,L=a.indexOf(i,d),N=a.indexOf(n,d)}else if(-1!==N&&(N<L||-1===L))w.push(a.substring(d,N)),d=N+m,N=a.indexOf(n,d);else{if(-1===L)break;if(w.push(a.substring(d,L)),H(L+y),v&&(G(),l))return $();if(c&&_.length>=c)return $(!0)}else for(P=d,d++;;){if(-1===(P=a.indexOf(t,P+1)))return h||D.push({type:"Quotes",code:"MissingQuotes",message:"Quoted field unterminated",row:_.length,index:d}),V();if(P===g-1)return V(a.substring(d,P).replace(R,t));if(t!==u||a[P+1]!==u){if(t===u||0===P||a[P-1]!==u){-1!==N&&N<P+1&&(N=a.indexOf(n,P+1)),-1!==L&&L<P+1&&(L=a.indexOf(i,P+1));var j=z(-1===L?N:Math.min(N,L));if(a.substr(P+1+j,m)===n){w.push(a.substring(d,P).replace(R,t)),a[d=P+1+j+m]!==t&&(P=a.indexOf(t,d)),N=a.indexOf(n,d),L=a.indexOf(i,d);break}var q=z(L);if(a.substring(P+1+q,P+1+q+y)===i){if(w.push(a.substring(d,P).replace(R,t)),H(P+1+q+y),N=a.indexOf(n,d),P=a.indexOf(t,d),v&&(G(),l))return $();if(c&&_.length>=c)return $(!0);break}D.push({type:"Quotes",code:"InvalidQuotes",message:"Trailing quote on quoted field is malformed",row:_.length,index:d}),P++}}else P++}return V();function M(e){_.push(e),U=d}function z(e){var t=0;if(-1!==e){var n=a.substring(P+1,e);n&&""===n.trim()&&(t=n.length)}return t}function V(e){return h||(void 0===e&&(e=a.substring(d)),w.push(e),d=g,M(w),v&&G()),$()}function H(e){d=e,M(w),w=[],L=a.indexOf(i,d)}function $(e){return{data:_,errors:D,meta:{delimiter:n,linebreak:i,aborted:l,truncated:!!e,cursor:U+(f||0)}}}function G(){o($()),_=[],D=[]}},this.abort=function(){l=!0},this.getCharIndex=function(){return d}}function m(e){var t=e.data,n=r[t.workerId],i=!1;if(t.error)n.userError(t.error,t.file);else if(t.results&&t.results.data){var o={abort:function(){i=!0,y(t.workerId,{data:[],errors:[],meta:{aborted:!0}})},pause:b,resume:b};if(x(n.userStep)){for(var a=0;a<t.results.data.length&&(n.userStep({data:t.results.data[a],errors:t.results.errors,meta:t.results.meta},o),!i);a++);delete t.results}else x(n.userChunk)&&(n.userChunk(t.results,o,t.file),delete t.results)}t.finished&&!i&&y(t.workerId,t.results)}function y(e,t){var n=r[e];x(n.userComplete)&&n.userComplete(t),n.terminate(),delete r[e]}function b(){throw new Error("Not implemented.")}function v(e){if("object"!=typeof e||null===e)return e;var t=Array.isArray(e)?[]:{};for(var n in e)t[n]=v(e[n]);return t}function _(e,t){return function(){e.apply(t,arguments)}}function x(e){return"function"==typeof e}return i&&(t.onmessage=function(e){var n=e.data;if(void 0===a.WORKER_ID&&n&&(a.WORKER_ID=n.workerId),"string"==typeof n.input)t.postMessage({workerId:a.WORKER_ID,results:a.parse(n.input,n.config),finished:!0});else if(t.File&&n.input instanceof File||n.input instanceof Object){var i=a.parse(n.input,n.config);i&&t.postMessage({workerId:a.WORKER_ID,results:i,finished:!0})}}),(u.prototype=Object.create(s.prototype)).constructor=u,(d.prototype=Object.create(s.prototype)).constructor=d,(l.prototype=Object.create(l.prototype)).constructor=l,(f.prototype=Object.create(s.prototype)).constructor=f,a})?i.apply(t,r):i)||(e.exports=o)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.updateDocName=t.deleteDocument=t.addDocument=t.createJson=t.fetchUploads=t.db=void 0;const i=n(91),r=n(98);t.db=new i.default("Cress-User-Storage"),t.fetchUploads=async function(){try{return(await new Promise((e,n)=>{t.db.allDocs({include_docs:!0}).then(t=>e(t)).catch(e=>n(e))})).rows.map(e=>({id:e.id,name:e.doc?e.doc.name:"undefined"}))}catch(e){return console.log("Couldn't fetch uploaded documents",e.message),[]}},t.createJson=function(e,t){return new Promise(async i=>{let o;if("csv"===t)console.log(e),o=await async function(e){return new Promise((t,n)=>{r.parse(e,{header:!0,dynamicTyping:!0,complete:e=>{e.errors.length>0?n(new Error("Error parsing CSV file")):t(e.data)},error:e=>{n(e)}})})}(e);else if("xlsx"===t);else{if("doc"!==t&&"docx"!==t)return void console.error("Unsupported file format");console.log(e),o=await async function(e){return new Promise((t,i)=>{n(385).convertToHtml({arrayBuffer:e.arrayBuffer()}).then((function(e){var n=e.value,i=e.messages;console.log("messages:",i);var r=(new DOMParser).parseFromString(n,"text/html").getElementsByTagName("table")[0],o=r.getElementsByTagName("tr")[0].getElementsByTagName("td");r.deleteRow(0);for(var a=r.getElementsByTagName("tr"),c=[],s=0;s<a.length;s++){var u=a[s].getElementsByTagName("td"),d={};for(var l of o)d[l.textContent]="";for(var f=0;f<u.length;f++){var h=u[f].getElementsByTagName("p"),p="";for(var g of h)if(""!==g.textContent)p+=g.textContent,p+="\n";else{var m=g.getElementsByTagName("img");for(var y of m){var b=y.src;b.includes("emf")||(p+=b)}}d[o[f].textContent]=p}c.push(d)}t(c)})).catch((function(e){console.error(e),i(e)}))})}(e)}i(new Blob([JSON.stringify(o,null,2)],{type:"application/json"}))})},t.addDocument=function(e,n,i){return new Promise((r,o)=>{t.db.put({_id:e,name:n,_attachments:{glyphs:{content_type:"application/json",data:i}}}).then(()=>{r(!0)}).catch(t=>{window.alert(`Error Uploading Document: ${t.message}, title: ${n}, id: ${e}.`),o(!1)})})},t.deleteDocument=function(e){return new Promise((n,i)=>{t.db.get(e).then(e=>{t.db.remove(e).then(e=>{n(!0)}).catch(e=>{console.log(e),i(e)})}).catch(e=>{console.log(e),i(e)})})},t.updateDocName=function(e,n){return new Promise((i,r)=>{t.db.get(e).then(e=>(e.name=n,t.db.put(e))).catch(e=>r(e))})}},function(e,t,n){"use strict";(function(e){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
var i=n(273),r=n(386),o=n(387);function a(){return s.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function c(e,t){if(a()<t)throw new RangeError("Invalid typed array length");return s.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=s.prototype:(null===e&&(e=new s(t)),e.length=t),e}function s(e,t,n){if(!(s.TYPED_ARRAY_SUPPORT||this instanceof s))return new s(e,t,n);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return l(this,e)}return u(this,e,t,n)}function u(e,t,n,i){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,n,i){if(t.byteLength,n<0||t.byteLength<n)throw new RangeError("'offset' is out of bounds");if(t.byteLength<n+(i||0))throw new RangeError("'length' is out of bounds");t=void 0===n&&void 0===i?new Uint8Array(t):void 0===i?new Uint8Array(t,n):new Uint8Array(t,n,i);s.TYPED_ARRAY_SUPPORT?(e=t).__proto__=s.prototype:e=f(e,t);return e}(e,t,n,i):"string"==typeof t?function(e,t,n){"string"==typeof n&&""!==n||(n="utf8");if(!s.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var i=0|p(t,n),r=(e=c(e,i)).write(t,n);r!==i&&(e=e.slice(0,r));return e}(e,t,n):function(e,t){if(s.isBuffer(t)){var n=0|h(t.length);return 0===(e=c(e,n)).length||t.copy(e,0,0,n),e}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||(i=t.length)!=i?c(e,0):f(e,t);if("Buffer"===t.type&&o(t.data))return f(e,t.data)}var i;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}function d(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function l(e,t){if(d(t),e=c(e,t<0?0:0|h(t)),!s.TYPED_ARRAY_SUPPORT)for(var n=0;n<t;++n)e[n]=0;return e}function f(e,t){var n=t.length<0?0:0|h(t.length);e=c(e,n);for(var i=0;i<n;i+=1)e[i]=255&t[i];return e}function h(e){if(e>=a())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a().toString(16)+" bytes");return 0|e}function p(e,t){if(s.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var n=e.length;if(0===n)return 0;for(var i=!1;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return j(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return q(e).length;default:if(i)return j(e).length;t=(""+t).toLowerCase(),i=!0}}function g(e,t,n){var i=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return S(this,t,n);case"utf8":case"utf-8":return E(this,t,n);case"ascii":return k(this,t,n);case"latin1":case"binary":return C(this,t,n);case"base64":return T(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return F(this,t,n);default:if(i)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),i=!0}}function m(e,t,n){var i=e[t];e[t]=e[n],e[n]=i}function y(e,t,n,i,r){if(0===e.length)return-1;if("string"==typeof n?(i=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=r?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(r)return-1;n=e.length-1}else if(n<0){if(!r)return-1;n=0}if("string"==typeof t&&(t=s.from(t,i)),s.isBuffer(t))return 0===t.length?-1:b(e,t,n,i,r);if("number"==typeof t)return t&=255,s.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?r?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):b(e,[t],n,i,r);throw new TypeError("val must be string, number or Buffer")}function b(e,t,n,i,r){var o,a=1,c=e.length,s=t.length;if(void 0!==i&&("ucs2"===(i=String(i).toLowerCase())||"ucs-2"===i||"utf16le"===i||"utf-16le"===i)){if(e.length<2||t.length<2)return-1;a=2,c/=2,s/=2,n/=2}function u(e,t){return 1===a?e[t]:e.readUInt16BE(t*a)}if(r){var d=-1;for(o=n;o<c;o++)if(u(e,o)===u(t,-1===d?0:o-d)){if(-1===d&&(d=o),o-d+1===s)return d*a}else-1!==d&&(o-=o-d),d=-1}else for(n+s>c&&(n=c-s),o=n;o>=0;o--){for(var l=!0,f=0;f<s;f++)if(u(e,o+f)!==u(t,f)){l=!1;break}if(l)return o}return-1}function v(e,t,n,i){n=Number(n)||0;var r=e.length-n;i?(i=Number(i))>r&&(i=r):i=r;var o=t.length;if(o%2!=0)throw new TypeError("Invalid hex string");i>o/2&&(i=o/2);for(var a=0;a<i;++a){var c=parseInt(t.substr(2*a,2),16);if(isNaN(c))return a;e[n+a]=c}return a}function _(e,t,n,i){return M(j(t,e.length-n),e,n,i)}function x(e,t,n,i){return M(function(e){for(var t=[],n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}(t),e,n,i)}function D(e,t,n,i){return x(e,t,n,i)}function w(e,t,n,i){return M(q(t),e,n,i)}function U(e,t,n,i){return M(function(e,t){for(var n,i,r,o=[],a=0;a<e.length&&!((t-=2)<0);++a)n=e.charCodeAt(a),i=n>>8,r=n%256,o.push(r),o.push(i);return o}(t,e.length-n),e,n,i)}function T(e,t,n){return 0===t&&n===e.length?i.fromByteArray(e):i.fromByteArray(e.slice(t,n))}function E(e,t,n){n=Math.min(e.length,n);for(var i=[],r=t;r<n;){var o,a,c,s,u=e[r],d=null,l=u>239?4:u>223?3:u>191?2:1;if(r+l<=n)switch(l){case 1:u<128&&(d=u);break;case 2:128==(192&(o=e[r+1]))&&(s=(31&u)<<6|63&o)>127&&(d=s);break;case 3:o=e[r+1],a=e[r+2],128==(192&o)&&128==(192&a)&&(s=(15&u)<<12|(63&o)<<6|63&a)>2047&&(s<55296||s>57343)&&(d=s);break;case 4:o=e[r+1],a=e[r+2],c=e[r+3],128==(192&o)&&128==(192&a)&&128==(192&c)&&(s=(15&u)<<18|(63&o)<<12|(63&a)<<6|63&c)>65535&&s<1114112&&(d=s)}null===d?(d=65533,l=1):d>65535&&(d-=65536,i.push(d>>>10&1023|55296),d=56320|1023&d),i.push(d),r+=l}return function(e){var t=e.length;if(t<=4096)return String.fromCharCode.apply(String,e);var n="",i=0;for(;i<t;)n+=String.fromCharCode.apply(String,e.slice(i,i+=4096));return n}(i)}t.Buffer=s,t.SlowBuffer=function(e){+e!=e&&(e=0);return s.alloc(+e)},t.INSPECT_MAX_BYTES=50,s.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return!1}}(),t.kMaxLength=a(),s.poolSize=8192,s._augment=function(e){return e.__proto__=s.prototype,e},s.from=function(e,t,n){return u(null,e,t,n)},s.TYPED_ARRAY_SUPPORT&&(s.prototype.__proto__=Uint8Array.prototype,s.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&s[Symbol.species]===s&&Object.defineProperty(s,Symbol.species,{value:null,configurable:!0})),s.alloc=function(e,t,n){return function(e,t,n,i){return d(t),t<=0?c(e,t):void 0!==n?"string"==typeof i?c(e,t).fill(n,i):c(e,t).fill(n):c(e,t)}(null,e,t,n)},s.allocUnsafe=function(e){return l(null,e)},s.allocUnsafeSlow=function(e){return l(null,e)},s.isBuffer=function(e){return!(null==e||!e._isBuffer)},s.compare=function(e,t){if(!s.isBuffer(e)||!s.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var n=e.length,i=t.length,r=0,o=Math.min(n,i);r<o;++r)if(e[r]!==t[r]){n=e[r],i=t[r];break}return n<i?-1:i<n?1:0},s.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},s.concat=function(e,t){if(!o(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return s.alloc(0);var n;if(void 0===t)for(t=0,n=0;n<e.length;++n)t+=e[n].length;var i=s.allocUnsafe(t),r=0;for(n=0;n<e.length;++n){var a=e[n];if(!s.isBuffer(a))throw new TypeError('"list" argument must be an Array of Buffers');a.copy(i,r),r+=a.length}return i},s.byteLength=p,s.prototype._isBuffer=!0,s.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)m(this,t,t+1);return this},s.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)m(this,t,t+3),m(this,t+1,t+2);return this},s.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)m(this,t,t+7),m(this,t+1,t+6),m(this,t+2,t+5),m(this,t+3,t+4);return this},s.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?E(this,0,e):g.apply(this,arguments)},s.prototype.equals=function(e){if(!s.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===s.compare(this,e)},s.prototype.inspect=function(){var e="",n=t.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(e+=" ... ")),"<Buffer "+e+">"},s.prototype.compare=function(e,t,n,i,r){if(!s.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===i&&(i=0),void 0===r&&(r=this.length),t<0||n>e.length||i<0||r>this.length)throw new RangeError("out of range index");if(i>=r&&t>=n)return 0;if(i>=r)return-1;if(t>=n)return 1;if(this===e)return 0;for(var o=(r>>>=0)-(i>>>=0),a=(n>>>=0)-(t>>>=0),c=Math.min(o,a),u=this.slice(i,r),d=e.slice(t,n),l=0;l<c;++l)if(u[l]!==d[l]){o=u[l],a=d[l];break}return o<a?-1:a<o?1:0},s.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},s.prototype.indexOf=function(e,t,n){return y(this,e,t,n,!0)},s.prototype.lastIndexOf=function(e,t,n){return y(this,e,t,n,!1)},s.prototype.write=function(e,t,n,i){if(void 0===t)i="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)i=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(n)?(n|=0,void 0===i&&(i="utf8")):(i=n,n=void 0)}var r=this.length-t;if((void 0===n||n>r)&&(n=r),e.length>0&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");i||(i="utf8");for(var o=!1;;)switch(i){case"hex":return v(this,e,t,n);case"utf8":case"utf-8":return _(this,e,t,n);case"ascii":return x(this,e,t,n);case"latin1":case"binary":return D(this,e,t,n);case"base64":return w(this,e,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return U(this,e,t,n);default:if(o)throw new TypeError("Unknown encoding: "+i);i=(""+i).toLowerCase(),o=!0}},s.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function k(e,t,n){var i="";n=Math.min(e.length,n);for(var r=t;r<n;++r)i+=String.fromCharCode(127&e[r]);return i}function C(e,t,n){var i="";n=Math.min(e.length,n);for(var r=t;r<n;++r)i+=String.fromCharCode(e[r]);return i}function S(e,t,n){var i=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>i)&&(n=i);for(var r="",o=t;o<n;++o)r+=P(e[o]);return r}function F(e,t,n){for(var i=e.slice(t,n),r="",o=0;o<i.length;o+=2)r+=String.fromCharCode(i[o]+256*i[o+1]);return r}function A(e,t,n){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>n)throw new RangeError("Trying to access beyond buffer length")}function O(e,t,n,i,r,o){if(!s.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>r||t<o)throw new RangeError('"value" argument is out of bounds');if(n+i>e.length)throw new RangeError("Index out of range")}function W(e,t,n,i){t<0&&(t=65535+t+1);for(var r=0,o=Math.min(e.length-n,2);r<o;++r)e[n+r]=(t&255<<8*(i?r:1-r))>>>8*(i?r:1-r)}function B(e,t,n,i){t<0&&(t=4294967295+t+1);for(var r=0,o=Math.min(e.length-n,4);r<o;++r)e[n+r]=t>>>8*(i?r:3-r)&255}function I(e,t,n,i,r,o){if(n+i>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function N(e,t,n,i,o){return o||I(e,0,n,4),r.write(e,t,n,i,23,4),n+4}function L(e,t,n,i,o){return o||I(e,0,n,8),r.write(e,t,n,i,52,8),n+8}s.prototype.slice=function(e,t){var n,i=this.length;if((e=~~e)<0?(e+=i)<0&&(e=0):e>i&&(e=i),(t=void 0===t?i:~~t)<0?(t+=i)<0&&(t=0):t>i&&(t=i),t<e&&(t=e),s.TYPED_ARRAY_SUPPORT)(n=this.subarray(e,t)).__proto__=s.prototype;else{var r=t-e;n=new s(r,void 0);for(var o=0;o<r;++o)n[o]=this[o+e]}return n},s.prototype.readUIntLE=function(e,t,n){e|=0,t|=0,n||A(e,t,this.length);for(var i=this[e],r=1,o=0;++o<t&&(r*=256);)i+=this[e+o]*r;return i},s.prototype.readUIntBE=function(e,t,n){e|=0,t|=0,n||A(e,t,this.length);for(var i=this[e+--t],r=1;t>0&&(r*=256);)i+=this[e+--t]*r;return i},s.prototype.readUInt8=function(e,t){return t||A(e,1,this.length),this[e]},s.prototype.readUInt16LE=function(e,t){return t||A(e,2,this.length),this[e]|this[e+1]<<8},s.prototype.readUInt16BE=function(e,t){return t||A(e,2,this.length),this[e]<<8|this[e+1]},s.prototype.readUInt32LE=function(e,t){return t||A(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},s.prototype.readUInt32BE=function(e,t){return t||A(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},s.prototype.readIntLE=function(e,t,n){e|=0,t|=0,n||A(e,t,this.length);for(var i=this[e],r=1,o=0;++o<t&&(r*=256);)i+=this[e+o]*r;return i>=(r*=128)&&(i-=Math.pow(2,8*t)),i},s.prototype.readIntBE=function(e,t,n){e|=0,t|=0,n||A(e,t,this.length);for(var i=t,r=1,o=this[e+--i];i>0&&(r*=256);)o+=this[e+--i]*r;return o>=(r*=128)&&(o-=Math.pow(2,8*t)),o},s.prototype.readInt8=function(e,t){return t||A(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},s.prototype.readInt16LE=function(e,t){t||A(e,2,this.length);var n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},s.prototype.readInt16BE=function(e,t){t||A(e,2,this.length);var n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},s.prototype.readInt32LE=function(e,t){return t||A(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},s.prototype.readInt32BE=function(e,t){return t||A(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},s.prototype.readFloatLE=function(e,t){return t||A(e,4,this.length),r.read(this,e,!0,23,4)},s.prototype.readFloatBE=function(e,t){return t||A(e,4,this.length),r.read(this,e,!1,23,4)},s.prototype.readDoubleLE=function(e,t){return t||A(e,8,this.length),r.read(this,e,!0,52,8)},s.prototype.readDoubleBE=function(e,t){return t||A(e,8,this.length),r.read(this,e,!1,52,8)},s.prototype.writeUIntLE=function(e,t,n,i){(e=+e,t|=0,n|=0,i)||O(this,e,t,n,Math.pow(2,8*n)-1,0);var r=1,o=0;for(this[t]=255&e;++o<n&&(r*=256);)this[t+o]=e/r&255;return t+n},s.prototype.writeUIntBE=function(e,t,n,i){(e=+e,t|=0,n|=0,i)||O(this,e,t,n,Math.pow(2,8*n)-1,0);var r=n-1,o=1;for(this[t+r]=255&e;--r>=0&&(o*=256);)this[t+r]=e/o&255;return t+n},s.prototype.writeUInt8=function(e,t,n){return e=+e,t|=0,n||O(this,e,t,1,255,0),s.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},s.prototype.writeUInt16LE=function(e,t,n){return e=+e,t|=0,n||O(this,e,t,2,65535,0),s.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):W(this,e,t,!0),t+2},s.prototype.writeUInt16BE=function(e,t,n){return e=+e,t|=0,n||O(this,e,t,2,65535,0),s.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):W(this,e,t,!1),t+2},s.prototype.writeUInt32LE=function(e,t,n){return e=+e,t|=0,n||O(this,e,t,4,4294967295,0),s.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):B(this,e,t,!0),t+4},s.prototype.writeUInt32BE=function(e,t,n){return e=+e,t|=0,n||O(this,e,t,4,4294967295,0),s.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):B(this,e,t,!1),t+4},s.prototype.writeIntLE=function(e,t,n,i){if(e=+e,t|=0,!i){var r=Math.pow(2,8*n-1);O(this,e,t,n,r-1,-r)}var o=0,a=1,c=0;for(this[t]=255&e;++o<n&&(a*=256);)e<0&&0===c&&0!==this[t+o-1]&&(c=1),this[t+o]=(e/a>>0)-c&255;return t+n},s.prototype.writeIntBE=function(e,t,n,i){if(e=+e,t|=0,!i){var r=Math.pow(2,8*n-1);O(this,e,t,n,r-1,-r)}var o=n-1,a=1,c=0;for(this[t+o]=255&e;--o>=0&&(a*=256);)e<0&&0===c&&0!==this[t+o+1]&&(c=1),this[t+o]=(e/a>>0)-c&255;return t+n},s.prototype.writeInt8=function(e,t,n){return e=+e,t|=0,n||O(this,e,t,1,127,-128),s.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},s.prototype.writeInt16LE=function(e,t,n){return e=+e,t|=0,n||O(this,e,t,2,32767,-32768),s.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):W(this,e,t,!0),t+2},s.prototype.writeInt16BE=function(e,t,n){return e=+e,t|=0,n||O(this,e,t,2,32767,-32768),s.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):W(this,e,t,!1),t+2},s.prototype.writeInt32LE=function(e,t,n){return e=+e,t|=0,n||O(this,e,t,4,2147483647,-2147483648),s.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):B(this,e,t,!0),t+4},s.prototype.writeInt32BE=function(e,t,n){return e=+e,t|=0,n||O(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),s.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):B(this,e,t,!1),t+4},s.prototype.writeFloatLE=function(e,t,n){return N(this,e,t,!0,n)},s.prototype.writeFloatBE=function(e,t,n){return N(this,e,t,!1,n)},s.prototype.writeDoubleLE=function(e,t,n){return L(this,e,t,!0,n)},s.prototype.writeDoubleBE=function(e,t,n){return L(this,e,t,!1,n)},s.prototype.copy=function(e,t,n,i){if(n||(n=0),i||0===i||(i=this.length),t>=e.length&&(t=e.length),t||(t=0),i>0&&i<n&&(i=n),i===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(i<0)throw new RangeError("sourceEnd out of bounds");i>this.length&&(i=this.length),e.length-t<i-n&&(i=e.length-t+n);var r,o=i-n;if(this===e&&n<t&&t<i)for(r=o-1;r>=0;--r)e[r+t]=this[r+n];else if(o<1e3||!s.TYPED_ARRAY_SUPPORT)for(r=0;r<o;++r)e[r+t]=this[r+n];else Uint8Array.prototype.set.call(e,this.subarray(n,n+o),t);return o},s.prototype.fill=function(e,t,n,i){if("string"==typeof e){if("string"==typeof t?(i=t,t=0,n=this.length):"string"==typeof n&&(i=n,n=this.length),1===e.length){var r=e.charCodeAt(0);r<256&&(e=r)}if(void 0!==i&&"string"!=typeof i)throw new TypeError("encoding must be a string");if("string"==typeof i&&!s.isEncoding(i))throw new TypeError("Unknown encoding: "+i)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;var o;if(t>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0),"number"==typeof e)for(o=t;o<n;++o)this[o]=e;else{var a=s.isBuffer(e)?e:j(new s(e,i).toString()),c=a.length;for(o=0;o<n-t;++o)this[o+t]=a[o%c]}return this};var R=/[^+\/0-9A-Za-z-_]/g;function P(e){return e<16?"0"+e.toString(16):e.toString(16)}function j(e,t){var n;t=t||1/0;for(var i=e.length,r=null,o=[],a=0;a<i;++a){if((n=e.charCodeAt(a))>55295&&n<57344){if(!r){if(n>56319){(t-=3)>-1&&o.push(239,191,189);continue}if(a+1===i){(t-=3)>-1&&o.push(239,191,189);continue}r=n;continue}if(n<56320){(t-=3)>-1&&o.push(239,191,189),r=n;continue}n=65536+(r-55296<<10|n-56320)}else r&&(t-=3)>-1&&o.push(239,191,189);if(r=null,n<128){if((t-=1)<0)break;o.push(n)}else if(n<2048){if((t-=2)<0)break;o.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;o.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;o.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return o}function q(e){return i.toByteArray(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(R,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function M(e,t,n,i){for(var r=0;r<i&&!(r+n>=t.length||r>=e.length);++r)t[r+n]=e[r];return r}}).call(this,n(9))},function(e,t,n){var i=n(59),r=i.find,o=i.NAMESPACE;function a(e){return""!==e}function c(e,t){return e.hasOwnProperty(t)||(e[t]=!0),e}function s(e){if(!e)return[];var t=function(e){return e?e.split(/[\t\n\f\r ]+/).filter(a):[]}(e);return Object.keys(t.reduce(c,{}))}function u(e,t){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])}function d(e,t){var n=e.prototype;if(!(n instanceof t)){function i(){}i.prototype=t.prototype,u(n,i=new i),e.prototype=n=i}n.constructor!=e&&("function"!=typeof e&&console.error("unknown Class:"+e),n.constructor=e)}var l={},f=l.ELEMENT_NODE=1,h=l.ATTRIBUTE_NODE=2,p=l.TEXT_NODE=3,g=l.CDATA_SECTION_NODE=4,m=l.ENTITY_REFERENCE_NODE=5,y=l.ENTITY_NODE=6,b=l.PROCESSING_INSTRUCTION_NODE=7,v=l.COMMENT_NODE=8,_=l.DOCUMENT_NODE=9,x=l.DOCUMENT_TYPE_NODE=10,D=l.DOCUMENT_FRAGMENT_NODE=11,w=l.NOTATION_NODE=12,U={},T={},E=(U.INDEX_SIZE_ERR=(T[1]="Index size error",1),U.DOMSTRING_SIZE_ERR=(T[2]="DOMString size error",2),U.HIERARCHY_REQUEST_ERR=(T[3]="Hierarchy request error",3)),k=(U.WRONG_DOCUMENT_ERR=(T[4]="Wrong document",4),U.INVALID_CHARACTER_ERR=(T[5]="Invalid character",5),U.NO_DATA_ALLOWED_ERR=(T[6]="No data allowed",6),U.NO_MODIFICATION_ALLOWED_ERR=(T[7]="No modification allowed",7),U.NOT_FOUND_ERR=(T[8]="Not found",8)),C=(U.NOT_SUPPORTED_ERR=(T[9]="Not supported",9),U.INUSE_ATTRIBUTE_ERR=(T[10]="Attribute in use",10));U.INVALID_STATE_ERR=(T[11]="Invalid state",11),U.SYNTAX_ERR=(T[12]="Syntax error",12),U.INVALID_MODIFICATION_ERR=(T[13]="Invalid modification",13),U.NAMESPACE_ERR=(T[14]="Invalid namespace",14),U.INVALID_ACCESS_ERR=(T[15]="Invalid access",15);function S(e,t){if(t instanceof Error)var n=t;else n=this,Error.call(this,T[e]),this.message=T[e],Error.captureStackTrace&&Error.captureStackTrace(this,S);return n.code=e,t&&(this.message=this.message+": "+t),n}function F(){}function A(e,t){this._node=e,this._refresh=t,O(this)}function O(e){var t=e._node._inc||e._node.ownerDocument._inc;if(e._inc!==t){var n=e._refresh(e._node);if(ye(e,"length",n.length),!e.$$length||n.length<e.$$length)for(var i=n.length;i in e;i++)Object.prototype.hasOwnProperty.call(e,i)&&delete e[i];u(n,e),e._inc=t}}function W(){}function B(e,t){for(var n=e.length;n--;)if(e[n]===t)return n}function I(e,t,n,i){if(i?t[B(t,i)]=n:t[t.length++]=n,e){n.ownerElement=e;var r=e.ownerDocument;r&&(i&&M(r,e,i),function(e,t,n){e&&e._inc++,n.namespaceURI===o.XMLNS&&(t._nsMap[n.prefix?n.localName:""]=n.value)}(r,e,n))}}function N(e,t,n){var i=B(t,n);if(!(i>=0))throw new S(k,new Error(e.tagName+"@"+n));for(var r=t.length-1;i<r;)t[i]=t[++i];if(t.length=r,e){var o=e.ownerDocument;o&&(M(o,e,n),n.ownerElement=null)}}function L(){}function R(){}function P(e){return("<"==e?"&lt;":">"==e&&"&gt;")||"&"==e&&"&amp;"||'"'==e&&"&quot;"||"&#"+e.charCodeAt()+";"}function j(e,t){if(t(e))return!0;if(e=e.firstChild)do{if(j(e,t))return!0}while(e=e.nextSibling)}function q(){this.ownerDocument=this}function M(e,t,n,i){e&&e._inc++,n.namespaceURI===o.XMLNS&&delete t._nsMap[n.prefix?n.localName:""]}function z(e,t,n){if(e&&e._inc){e._inc++;var i=t.childNodes;if(n)i[i.length++]=n;else{for(var r=t.firstChild,o=0;r;)i[o++]=r,r=r.nextSibling;i.length=o,delete i[i.length]}}}function V(e,t){var n=t.previousSibling,i=t.nextSibling;return n?n.nextSibling=i:e.firstChild=i,i?i.previousSibling=n:e.lastChild=n,t.parentNode=null,t.previousSibling=null,t.nextSibling=null,z(e.ownerDocument,e),t}function H(e){return e&&e.nodeType===R.DOCUMENT_TYPE_NODE}function $(e){return e&&e.nodeType===R.ELEMENT_NODE}function G(e){return e&&e.nodeType===R.TEXT_NODE}function K(e,t){var n=e.childNodes||[];if(r(n,$)||H(t))return!1;var i=r(n,H);return!(t&&i&&n.indexOf(i)>n.indexOf(t))}function Y(e,t){var n=e.childNodes||[];if(r(n,(function(e){return $(e)&&e!==t})))return!1;var i=r(n,H);return!(t&&i&&n.indexOf(i)>n.indexOf(t))}function Z(e,t,n){if(!function(e){return e&&(e.nodeType===R.DOCUMENT_NODE||e.nodeType===R.DOCUMENT_FRAGMENT_NODE||e.nodeType===R.ELEMENT_NODE)}(e))throw new S(E,"Unexpected parent node type "+e.nodeType);if(n&&n.parentNode!==e)throw new S(k,"child not in parent");if(!function(e){return e&&($(e)||G(e)||H(e)||e.nodeType===R.DOCUMENT_FRAGMENT_NODE||e.nodeType===R.COMMENT_NODE||e.nodeType===R.PROCESSING_INSTRUCTION_NODE)}(t)||H(t)&&e.nodeType!==R.DOCUMENT_NODE)throw new S(E,"Unexpected node type "+t.nodeType+" for parent node type "+e.nodeType)}function X(e,t,n){var i=e.childNodes||[],o=t.childNodes||[];if(t.nodeType===R.DOCUMENT_FRAGMENT_NODE){var a=o.filter($);if(a.length>1||r(o,G))throw new S(E,"More than one element or text in fragment");if(1===a.length&&!K(e,n))throw new S(E,"Element in fragment can not be inserted before doctype")}if($(t)&&!K(e,n))throw new S(E,"Only one element can be added and only after doctype");if(H(t)){if(r(i,H))throw new S(E,"Only one doctype is allowed");var c=r(i,$);if(n&&i.indexOf(c)<i.indexOf(n))throw new S(E,"Doctype can only be inserted before an element");if(!n&&c)throw new S(E,"Doctype can not be appended since element is present")}}function J(e,t,n){var i=e.childNodes||[],o=t.childNodes||[];if(t.nodeType===R.DOCUMENT_FRAGMENT_NODE){var a=o.filter($);if(a.length>1||r(o,G))throw new S(E,"More than one element or text in fragment");if(1===a.length&&!Y(e,n))throw new S(E,"Element in fragment can not be inserted before doctype")}if($(t)&&!Y(e,n))throw new S(E,"Only one element can be added and only after doctype");if(H(t)){if(r(i,(function(e){return H(e)&&e!==n})))throw new S(E,"Only one doctype is allowed");var c=r(i,$);if(n&&i.indexOf(c)<i.indexOf(n))throw new S(E,"Doctype can only be inserted before an element")}}function Q(e,t,n,i){Z(e,t,n),e.nodeType===R.DOCUMENT_NODE&&(i||X)(e,t,n);var r=t.parentNode;if(r&&r.removeChild(t),t.nodeType===D){var o=t.firstChild;if(null==o)return t;var a=t.lastChild}else o=a=t;var c=n?n.previousSibling:e.lastChild;o.previousSibling=c,a.nextSibling=n,c?c.nextSibling=o:e.firstChild=o,null==n?e.lastChild=a:n.previousSibling=a;do{o.parentNode=e}while(o!==a&&(o=o.nextSibling));return z(e.ownerDocument||e,e),t.nodeType==D&&(t.firstChild=t.lastChild=null),t}function ee(){this._nsMap={}}function te(){}function ne(){}function ie(){}function re(){}function oe(){}function ae(){}function ce(){}function se(){}function ue(){}function de(){}function le(){}function fe(){}function he(e,t){var n=[],i=9==this.nodeType&&this.documentElement||this,r=i.prefix,o=i.namespaceURI;if(o&&null==r&&null==(r=i.lookupPrefix(o)))var a=[{namespace:o,prefix:null}];return me(this,n,e,t,a),n.join("")}function pe(e,t,n){var i=e.prefix||"",r=e.namespaceURI;if(!r)return!1;if("xml"===i&&r===o.XML||r===o.XMLNS)return!1;for(var a=n.length;a--;){var c=n[a];if(c.prefix===i)return c.namespace!==r}return!0}function ge(e,t,n){e.push(" ",t,'="',n.replace(/[<>&"\t\n\r]/g,P),'"')}function me(e,t,n,i,r){if(r||(r=[]),i){if(!(e=i(e)))return;if("string"==typeof e)return void t.push(e)}switch(e.nodeType){case f:var a=e.attributes,c=a.length,s=e.firstChild,u=e.tagName,d=u;if(!(n=o.isHTML(e.namespaceURI)||n)&&!e.prefix&&e.namespaceURI){for(var l,y=0;y<a.length;y++)if("xmlns"===a.item(y).name){l=a.item(y).value;break}if(!l)for(var w=r.length-1;w>=0;w--){if(""===(U=r[w]).prefix&&U.namespace===e.namespaceURI){l=U.namespace;break}}if(l!==e.namespaceURI)for(w=r.length-1;w>=0;w--){var U;if((U=r[w]).namespace===e.namespaceURI){U.prefix&&(d=U.prefix+":"+u);break}}}t.push("<",d);for(var T=0;T<c;T++){"xmlns"==(E=a.item(T)).prefix?r.push({prefix:E.localName,namespace:E.value}):"xmlns"==E.nodeName&&r.push({prefix:"",namespace:E.value})}for(T=0;T<c;T++){var E,k,C;if(pe(E=a.item(T),0,r))ge(t,(k=E.prefix||"")?"xmlns:"+k:"xmlns",C=E.namespaceURI),r.push({prefix:k,namespace:C});me(E,t,n,i,r)}if(u===d&&pe(e,0,r))ge(t,(k=e.prefix||"")?"xmlns:"+k:"xmlns",C=e.namespaceURI),r.push({prefix:k,namespace:C});if(s||n&&!/^(?:meta|link|img|br|hr|input)$/i.test(u)){if(t.push(">"),n&&/^script$/i.test(u))for(;s;)s.data?t.push(s.data):me(s,t,n,i,r.slice()),s=s.nextSibling;else for(;s;)me(s,t,n,i,r.slice()),s=s.nextSibling;t.push("</",d,">")}else t.push("/>");return;case _:case D:for(s=e.firstChild;s;)me(s,t,n,i,r.slice()),s=s.nextSibling;return;case h:return ge(t,e.name,e.value);case p:return t.push(e.data.replace(/[<&>]/g,P));case g:return t.push("<![CDATA[",e.data,"]]>");case v:return t.push("\x3c!--",e.data,"--\x3e");case x:var S=e.publicId,F=e.systemId;if(t.push("<!DOCTYPE ",e.name),S)t.push(" PUBLIC ",S),F&&"."!=F&&t.push(" ",F),t.push(">");else if(F&&"."!=F)t.push(" SYSTEM ",F,">");else{var A=e.internalSubset;A&&t.push(" [",A,"]"),t.push(">")}return;case b:return t.push("<?",e.target," ",e.data,"?>");case m:return t.push("&",e.nodeName,";");default:t.push("??",e.nodeName)}}function ye(e,t,n){e[t]=n}S.prototype=Error.prototype,u(U,S),F.prototype={length:0,item:function(e){return e>=0&&e<this.length?this[e]:null},toString:function(e,t){for(var n=[],i=0;i<this.length;i++)me(this[i],n,e,t);return n.join("")},filter:function(e){return Array.prototype.filter.call(this,e)},indexOf:function(e){return Array.prototype.indexOf.call(this,e)}},A.prototype.item=function(e){return O(this),this[e]||null},d(A,F),W.prototype={length:0,item:F.prototype.item,getNamedItem:function(e){for(var t=this.length;t--;){var n=this[t];if(n.nodeName==e)return n}},setNamedItem:function(e){var t=e.ownerElement;if(t&&t!=this._ownerElement)throw new S(C);var n=this.getNamedItem(e.nodeName);return I(this._ownerElement,this,e,n),n},setNamedItemNS:function(e){var t,n=e.ownerElement;if(n&&n!=this._ownerElement)throw new S(C);return t=this.getNamedItemNS(e.namespaceURI,e.localName),I(this._ownerElement,this,e,t),t},removeNamedItem:function(e){var t=this.getNamedItem(e);return N(this._ownerElement,this,t),t},removeNamedItemNS:function(e,t){var n=this.getNamedItemNS(e,t);return N(this._ownerElement,this,n),n},getNamedItemNS:function(e,t){for(var n=this.length;n--;){var i=this[n];if(i.localName==t&&i.namespaceURI==e)return i}return null}},L.prototype={hasFeature:function(e,t){return!0},createDocument:function(e,t,n){var i=new q;if(i.implementation=this,i.childNodes=new F,i.doctype=n||null,n&&i.appendChild(n),t){var r=i.createElementNS(e,t);i.appendChild(r)}return i},createDocumentType:function(e,t,n){var i=new ae;return i.name=e,i.nodeName=e,i.publicId=t||"",i.systemId=n||"",i}},R.prototype={firstChild:null,lastChild:null,previousSibling:null,nextSibling:null,attributes:null,parentNode:null,childNodes:null,ownerDocument:null,nodeValue:null,namespaceURI:null,prefix:null,localName:null,insertBefore:function(e,t){return Q(this,e,t)},replaceChild:function(e,t){Q(this,e,t,J),t&&this.removeChild(t)},removeChild:function(e){return V(this,e)},appendChild:function(e){return this.insertBefore(e,null)},hasChildNodes:function(){return null!=this.firstChild},cloneNode:function(e){return function e(t,n,i){var r=new n.constructor;for(var o in n)if(Object.prototype.hasOwnProperty.call(n,o)){var a=n[o];"object"!=typeof a&&a!=r[o]&&(r[o]=a)}n.childNodes&&(r.childNodes=new F);switch(r.ownerDocument=t,r.nodeType){case f:var c=n.attributes,s=r.attributes=new W,u=c.length;s._ownerElement=r;for(var d=0;d<u;d++)r.setAttributeNode(e(t,c.item(d),!0));break;case h:i=!0}if(i)for(var l=n.firstChild;l;)r.appendChild(e(t,l,i)),l=l.nextSibling;return r}(this.ownerDocument||this,this,e)},normalize:function(){for(var e=this.firstChild;e;){var t=e.nextSibling;t&&t.nodeType==p&&e.nodeType==p?(this.removeChild(t),e.appendData(t.data)):(e.normalize(),e=t)}},isSupported:function(e,t){return this.ownerDocument.implementation.hasFeature(e,t)},hasAttributes:function(){return this.attributes.length>0},lookupPrefix:function(e){for(var t=this;t;){var n=t._nsMap;if(n)for(var i in n)if(Object.prototype.hasOwnProperty.call(n,i)&&n[i]===e)return i;t=t.nodeType==h?t.ownerDocument:t.parentNode}return null},lookupNamespaceURI:function(e){for(var t=this;t;){var n=t._nsMap;if(n&&Object.prototype.hasOwnProperty.call(n,e))return n[e];t=t.nodeType==h?t.ownerDocument:t.parentNode}return null},isDefaultNamespace:function(e){return null==this.lookupPrefix(e)}},u(l,R),u(l,R.prototype),q.prototype={nodeName:"#document",nodeType:_,doctype:null,documentElement:null,_inc:1,insertBefore:function(e,t){if(e.nodeType==D){for(var n=e.firstChild;n;){var i=n.nextSibling;this.insertBefore(n,t),n=i}return e}return Q(this,e,t),e.ownerDocument=this,null===this.documentElement&&e.nodeType===f&&(this.documentElement=e),e},removeChild:function(e){return this.documentElement==e&&(this.documentElement=null),V(this,e)},replaceChild:function(e,t){Q(this,e,t,J),e.ownerDocument=this,t&&this.removeChild(t),$(e)&&(this.documentElement=e)},importNode:function(e,t){return function e(t,n,i){var r;switch(n.nodeType){case f:(r=n.cloneNode(!1)).ownerDocument=t;case D:break;case h:i=!0}r||(r=n.cloneNode(!1));if(r.ownerDocument=t,r.parentNode=null,i)for(var o=n.firstChild;o;)r.appendChild(e(t,o,i)),o=o.nextSibling;return r}(this,e,t)},getElementById:function(e){var t=null;return j(this.documentElement,(function(n){if(n.nodeType==f&&n.getAttribute("id")==e)return t=n,!0})),t},getElementsByClassName:function(e){var t=s(e);return new A(this,(function(n){var i=[];return t.length>0&&j(n.documentElement,(function(r){if(r!==n&&r.nodeType===f){var o=r.getAttribute("class");if(o){var a=e===o;if(!a){var c=s(o);a=t.every((u=c,function(e){return u&&-1!==u.indexOf(e)}))}a&&i.push(r)}}var u})),i}))},createElement:function(e){var t=new ee;return t.ownerDocument=this,t.nodeName=e,t.tagName=e,t.localName=e,t.childNodes=new F,(t.attributes=new W)._ownerElement=t,t},createDocumentFragment:function(){var e=new de;return e.ownerDocument=this,e.childNodes=new F,e},createTextNode:function(e){var t=new ie;return t.ownerDocument=this,t.appendData(e),t},createComment:function(e){var t=new re;return t.ownerDocument=this,t.appendData(e),t},createCDATASection:function(e){var t=new oe;return t.ownerDocument=this,t.appendData(e),t},createProcessingInstruction:function(e,t){var n=new le;return n.ownerDocument=this,n.tagName=n.nodeName=n.target=e,n.nodeValue=n.data=t,n},createAttribute:function(e){var t=new te;return t.ownerDocument=this,t.name=e,t.nodeName=e,t.localName=e,t.specified=!0,t},createEntityReference:function(e){var t=new ue;return t.ownerDocument=this,t.nodeName=e,t},createElementNS:function(e,t){var n=new ee,i=t.split(":"),r=n.attributes=new W;return n.childNodes=new F,n.ownerDocument=this,n.nodeName=t,n.tagName=t,n.namespaceURI=e,2==i.length?(n.prefix=i[0],n.localName=i[1]):n.localName=t,r._ownerElement=n,n},createAttributeNS:function(e,t){var n=new te,i=t.split(":");return n.ownerDocument=this,n.nodeName=t,n.name=t,n.namespaceURI=e,n.specified=!0,2==i.length?(n.prefix=i[0],n.localName=i[1]):n.localName=t,n}},d(q,R),ee.prototype={nodeType:f,hasAttribute:function(e){return null!=this.getAttributeNode(e)},getAttribute:function(e){var t=this.getAttributeNode(e);return t&&t.value||""},getAttributeNode:function(e){return this.attributes.getNamedItem(e)},setAttribute:function(e,t){var n=this.ownerDocument.createAttribute(e);n.value=n.nodeValue=""+t,this.setAttributeNode(n)},removeAttribute:function(e){var t=this.getAttributeNode(e);t&&this.removeAttributeNode(t)},appendChild:function(e){return e.nodeType===D?this.insertBefore(e,null):function(e,t){return t.parentNode&&t.parentNode.removeChild(t),t.parentNode=e,t.previousSibling=e.lastChild,t.nextSibling=null,t.previousSibling?t.previousSibling.nextSibling=t:e.firstChild=t,e.lastChild=t,z(e.ownerDocument,e,t),t}(this,e)},setAttributeNode:function(e){return this.attributes.setNamedItem(e)},setAttributeNodeNS:function(e){return this.attributes.setNamedItemNS(e)},removeAttributeNode:function(e){return this.attributes.removeNamedItem(e.nodeName)},removeAttributeNS:function(e,t){var n=this.getAttributeNodeNS(e,t);n&&this.removeAttributeNode(n)},hasAttributeNS:function(e,t){return null!=this.getAttributeNodeNS(e,t)},getAttributeNS:function(e,t){var n=this.getAttributeNodeNS(e,t);return n&&n.value||""},setAttributeNS:function(e,t,n){var i=this.ownerDocument.createAttributeNS(e,t);i.value=i.nodeValue=""+n,this.setAttributeNode(i)},getAttributeNodeNS:function(e,t){return this.attributes.getNamedItemNS(e,t)},getElementsByTagName:function(e){return new A(this,(function(t){var n=[];return j(t,(function(i){i===t||i.nodeType!=f||"*"!==e&&i.tagName!=e||n.push(i)})),n}))},getElementsByTagNameNS:function(e,t){return new A(this,(function(n){var i=[];return j(n,(function(r){r===n||r.nodeType!==f||"*"!==e&&r.namespaceURI!==e||"*"!==t&&r.localName!=t||i.push(r)})),i}))}},q.prototype.getElementsByTagName=ee.prototype.getElementsByTagName,q.prototype.getElementsByTagNameNS=ee.prototype.getElementsByTagNameNS,d(ee,R),te.prototype.nodeType=h,d(te,R),ne.prototype={data:"",substringData:function(e,t){return this.data.substring(e,e+t)},appendData:function(e){e=this.data+e,this.nodeValue=this.data=e,this.length=e.length},insertData:function(e,t){this.replaceData(e,0,t)},appendChild:function(e){throw new Error(T[E])},deleteData:function(e,t){this.replaceData(e,t,"")},replaceData:function(e,t,n){n=this.data.substring(0,e)+n+this.data.substring(e+t),this.nodeValue=this.data=n,this.length=n.length}},d(ne,R),ie.prototype={nodeName:"#text",nodeType:p,splitText:function(e){var t=this.data,n=t.substring(e);t=t.substring(0,e),this.data=this.nodeValue=t,this.length=t.length;var i=this.ownerDocument.createTextNode(n);return this.parentNode&&this.parentNode.insertBefore(i,this.nextSibling),i}},d(ie,ne),re.prototype={nodeName:"#comment",nodeType:v},d(re,ne),oe.prototype={nodeName:"#cdata-section",nodeType:g},d(oe,ne),ae.prototype.nodeType=x,d(ae,R),ce.prototype.nodeType=w,d(ce,R),se.prototype.nodeType=y,d(se,R),ue.prototype.nodeType=m,d(ue,R),de.prototype.nodeName="#document-fragment",de.prototype.nodeType=D,d(de,R),le.prototype.nodeType=b,d(le,R),fe.prototype.serializeToString=function(e,t,n){return he.call(e,t,n)},R.prototype.toString=he;try{if(Object.defineProperty){Object.defineProperty(A.prototype,"length",{get:function(){return O(this),this.$$length}}),Object.defineProperty(R.prototype,"textContent",{get:function(){return function e(t){switch(t.nodeType){case f:case D:var n=[];for(t=t.firstChild;t;)7!==t.nodeType&&8!==t.nodeType&&n.push(e(t)),t=t.nextSibling;return n.join("");default:return t.nodeValue}}(this)},set:function(e){switch(this.nodeType){case f:case D:for(;this.firstChild;)this.removeChild(this.firstChild);(e||String(e))&&this.appendChild(this.ownerDocument.createTextNode(e));break;default:this.data=e,this.value=e,this.nodeValue=e}}}),ye=function(e,t,n){e["$$"+t]=n}}}catch(e){}t.DocumentType=ae,t.DOMException=S,t.DOMImplementation=L,t.Element=ee,t.Node=R,t.NodeList=F,t.XMLSerializer=fe},function(e,t,n){(function(){var t,i={}.hasOwnProperty;t=n(15),e.exports=function(e){function t(e){t.__super__.constructor.call(this,e),this.isDummy=!0}return function(e,t){for(var n in t)i.call(t,n)&&(e[n]=t[n]);function r(){this.constructor=e}r.prototype=t.prototype,e.prototype=new r,e.__super__=t.prototype}(t,e),t.prototype.clone=function(){return Object.create(this)},t.prototype.toString=function(e){return""},t}(t)}).call(this)},function(e,t,n){(function(){var t,i,r,o,a,c,s,u,d,l,f,h,p,g,m={}.hasOwnProperty;s=n(63),u=n(64),t=n(61),i=n(62),l=n(60),h=n(69),p=n(70),f=n(71),d=n(102),r=n(65),o=n(67),a=n(66),c=n(68),g=n(281),e.exports=function(e){function n(e){n.__super__.constructor.call(this,e)}return function(e,t){for(var n in t)m.call(t,n)&&(e[n]=t[n]);function i(){this.constructor=e}i.prototype=t.prototype,e.prototype=new i,e.__super__=t.prototype}(n,e),n.prototype.document=function(e){var t,n,r,o,a;for(this.textispresent=!1,o="",n=0,r=(a=e.children).length;n<r;n++)(t=a[n])instanceof d||(o+=function(){switch(!1){case!(t instanceof s):return this.declaration(t);case!(t instanceof u):return this.docType(t);case!(t instanceof i):return this.comment(t);case!(t instanceof f):return this.processingInstruction(t);default:return this.element(t,0)}}.call(this));return this.pretty&&o.slice(-this.newline.length)===this.newline&&(o=o.slice(0,-this.newline.length)),o},n.prototype.attribute=function(e){return" "+e.name+'="'+e.value+'"'},n.prototype.cdata=function(e,t){return this.space(t)+"<![CDATA["+e.text+"]]>"+this.newline},n.prototype.comment=function(e,t){return this.space(t)+"\x3c!-- "+e.text+" --\x3e"+this.newline},n.prototype.declaration=function(e,t){var n;return n=this.space(t),n+='<?xml version="'+e.version+'"',null!=e.encoding&&(n+=' encoding="'+e.encoding+'"'),null!=e.standalone&&(n+=' standalone="'+e.standalone+'"'),n+=this.spacebeforeslash+"?>",n+=this.newline},n.prototype.docType=function(e,n){var s,u,d,l,h;if(n||(n=0),l=this.space(n),l+="<!DOCTYPE "+e.root().name,e.pubID&&e.sysID?l+=' PUBLIC "'+e.pubID+'" "'+e.sysID+'"':e.sysID&&(l+=' SYSTEM "'+e.sysID+'"'),e.children.length>0){for(l+=" [",l+=this.newline,u=0,d=(h=e.children).length;u<d;u++)s=h[u],l+=function(){switch(!1){case!(s instanceof r):return this.dtdAttList(s,n+1);case!(s instanceof o):return this.dtdElement(s,n+1);case!(s instanceof a):return this.dtdEntity(s,n+1);case!(s instanceof c):return this.dtdNotation(s,n+1);case!(s instanceof t):return this.cdata(s,n+1);case!(s instanceof i):return this.comment(s,n+1);case!(s instanceof f):return this.processingInstruction(s,n+1);default:throw new Error("Unknown DTD node type: "+s.constructor.name)}}.call(this);l+="]"}return l+=this.spacebeforeslash+">",l+=this.newline},n.prototype.element=function(e,n){var r,o,a,c,s,u,g,y,b,v,_,x,D;for(g in n||(n=0),D=!1,this.textispresent?(this.newline="",this.pretty=!1):(this.newline=this.newlinedefault,this.pretty=this.prettydefault),y="",y+=(x=this.space(n))+"<"+e.name,b=e.attributes)m.call(b,g)&&(r=b[g],y+=this.attribute(r));if(0===e.children.length||e.children.every((function(e){return""===e.value})))this.allowEmpty?y+="></"+e.name+">"+this.newline:y+=this.spacebeforeslash+"/>"+this.newline;else if(this.pretty&&1===e.children.length&&null!=e.children[0].value)y+=">",y+=e.children[0].value,y+="</"+e.name+">"+this.newline;else{if(this.dontprettytextnodes)for(a=0,s=(v=e.children).length;a<s;a++)if(null!=(o=v[a]).value){this.textispresent++,D=!0;break}for(this.textispresent&&(this.newline="",this.pretty=!1,x=this.space(n)),y+=">"+this.newline,c=0,u=(_=e.children).length;c<u;c++)o=_[c],y+=function(){switch(!1){case!(o instanceof t):return this.cdata(o,n+1);case!(o instanceof i):return this.comment(o,n+1);case!(o instanceof l):return this.element(o,n+1);case!(o instanceof h):return this.raw(o,n+1);case!(o instanceof p):return this.text(o,n+1);case!(o instanceof f):return this.processingInstruction(o,n+1);case!(o instanceof d):return"";default:throw new Error("Unknown XML node type: "+o.constructor.name)}}.call(this);D&&this.textispresent--,this.textispresent||(this.newline=this.newlinedefault,this.pretty=this.prettydefault),y+=x+"</"+e.name+">"+this.newline}return y},n.prototype.processingInstruction=function(e,t){var n;return n=this.space(t)+"<?"+e.target,e.value&&(n+=" "+e.value),n+=this.spacebeforeslash+"?>"+this.newline},n.prototype.raw=function(e,t){return this.space(t)+e.value+this.newline},n.prototype.text=function(e,t){return this.space(t)+e.value+this.newline},n.prototype.dtdAttList=function(e,t){var n;return n=this.space(t)+"<!ATTLIST "+e.elementName+" "+e.attributeName+" "+e.attributeType,"#DEFAULT"!==e.defaultValueType&&(n+=" "+e.defaultValueType),e.defaultValue&&(n+=' "'+e.defaultValue+'"'),n+=this.spacebeforeslash+">"+this.newline},n.prototype.dtdElement=function(e,t){return this.space(t)+"<!ELEMENT "+e.name+" "+e.value+this.spacebeforeslash+">"+this.newline},n.prototype.dtdEntity=function(e,t){var n;return n=this.space(t)+"<!ENTITY",e.pe&&(n+=" %"),n+=" "+e.name,e.value?n+=' "'+e.value+'"':(e.pubID&&e.sysID?n+=' PUBLIC "'+e.pubID+'" "'+e.sysID+'"':e.sysID&&(n+=' SYSTEM "'+e.sysID+'"'),e.nData&&(n+=" NDATA "+e.nData)),n+=this.spacebeforeslash+">"+this.newline},n.prototype.dtdNotation=function(e,t){var n;return n=this.space(t)+"<!NOTATION "+e.name,e.pubID&&e.sysID?n+=' PUBLIC "'+e.pubID+'" "'+e.sysID+'"':e.pubID?n+=' PUBLIC "'+e.pubID+'"':e.sysID&&(n+=' SYSTEM "'+e.sysID+'"'),n+=this.spacebeforeslash+">"+this.newline},n.prototype.openNode=function(e,t){var n,i,r,o;if(t||(t=0),e instanceof l){for(i in r=this.space(t)+"<"+e.name,o=e.attributes)m.call(o,i)&&(n=o[i],r+=this.attribute(n));return r+=(e.children?">":"/>")+this.newline}return r=this.space(t)+"<!DOCTYPE "+e.rootNodeName,e.pubID&&e.sysID?r+=' PUBLIC "'+e.pubID+'" "'+e.sysID+'"':e.sysID&&(r+=' SYSTEM "'+e.sysID+'"'),r+=(e.children?" [":">")+this.newline},n.prototype.closeNode=function(e,t){switch(t||(t=0),!1){case!(e instanceof l):return this.space(t)+"</"+e.name+">"+this.newline;case!(e instanceof u):return this.space(t)+"]>"+this.newline}},n}(g)}).call(this)},function(e,t){e.exports={failure:function(e,t){if(e.length<1)throw new Error("Failure must have errors");return new n({status:"failure",remaining:t,errors:e})},error:function(e,t){if(e.length<1)throw new Error("Failure must have errors");return new n({status:"error",remaining:t,errors:e})},success:function(e,t,i){return new n({status:"success",value:e,source:i,remaining:t,errors:[]})},cut:function(e){return new n({status:"cut",remaining:e,errors:[]})}};var n=function(e){this._value=e.value,this._status=e.status,this._hasValue=void 0!==e.value,this._remaining=e.remaining,this._source=e.source,this._errors=e.errors};n.prototype.map=function(e){return this._hasValue?new n({value:e(this._value,this._source),status:this._status,remaining:this._remaining,source:this._source,errors:this._errors}):this},n.prototype.changeRemaining=function(e){return new n({value:this._value,status:this._status,remaining:e,source:this._source,errors:this._errors})},n.prototype.isSuccess=function(){return"success"===this._status||"cut"===this._status},n.prototype.isFailure=function(){return"failure"===this._status},n.prototype.isError=function(){return"error"===this._status},n.prototype.isCut=function(){return"cut"===this._status},n.prototype.value=function(){return this._value},n.prototype.remaining=function(){return this._remaining},n.prototype.source=function(){return this._source},n.prototype.errors=function(){return this._errors}},function(e,t,n){"use strict";let i;n.r(t),n.d(t,"v1",(function(){return g})),n.d(t,"v3",(function(){return T})),n.d(t,"v4",(function(){return k})),n.d(t,"v5",(function(){return F})),n.d(t,"NIL",(function(){return A})),n.d(t,"version",(function(){return O})),n.d(t,"validate",(function(){return c})),n.d(t,"stringify",(function(){return d})),n.d(t,"parse",(function(){return m}));const r=new Uint8Array(16);function o(){if(!i&&(i="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!i))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return i(r)}var a=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;var c=function(e){return"string"==typeof e&&a.test(e)};const s=[];for(let e=0;e<256;++e)s.push((e+256).toString(16).slice(1));function u(e,t=0){return s[e[t+0]]+s[e[t+1]]+s[e[t+2]]+s[e[t+3]]+"-"+s[e[t+4]]+s[e[t+5]]+"-"+s[e[t+6]]+s[e[t+7]]+"-"+s[e[t+8]]+s[e[t+9]]+"-"+s[e[t+10]]+s[e[t+11]]+s[e[t+12]]+s[e[t+13]]+s[e[t+14]]+s[e[t+15]]}var d=function(e,t=0){const n=u(e,t);if(!c(n))throw TypeError("Stringified UUID is invalid");return n};let l,f,h=0,p=0;var g=function(e,t,n){let i=t&&n||0;const r=t||new Array(16);let a=(e=e||{}).node||l,c=void 0!==e.clockseq?e.clockseq:f;if(null==a||null==c){const t=e.random||(e.rng||o)();null==a&&(a=l=[1|t[0],t[1],t[2],t[3],t[4],t[5]]),null==c&&(c=f=16383&(t[6]<<8|t[7]))}let s=void 0!==e.msecs?e.msecs:Date.now(),d=void 0!==e.nsecs?e.nsecs:p+1;const g=s-h+(d-p)/1e4;if(g<0&&void 0===e.clockseq&&(c=c+1&16383),(g<0||s>h)&&void 0===e.nsecs&&(d=0),d>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");h=s,p=d,f=c,s+=122192928e5;const m=(1e4*(268435455&s)+d)%4294967296;r[i++]=m>>>24&255,r[i++]=m>>>16&255,r[i++]=m>>>8&255,r[i++]=255&m;const y=s/4294967296*1e4&268435455;r[i++]=y>>>8&255,r[i++]=255&y,r[i++]=y>>>24&15|16,r[i++]=y>>>16&255,r[i++]=c>>>8|128,r[i++]=255&c;for(let e=0;e<6;++e)r[i+e]=a[e];return t||u(r)};var m=function(e){if(!c(e))throw TypeError("Invalid UUID");let t;const n=new Uint8Array(16);return n[0]=(t=parseInt(e.slice(0,8),16))>>>24,n[1]=t>>>16&255,n[2]=t>>>8&255,n[3]=255&t,n[4]=(t=parseInt(e.slice(9,13),16))>>>8,n[5]=255&t,n[6]=(t=parseInt(e.slice(14,18),16))>>>8,n[7]=255&t,n[8]=(t=parseInt(e.slice(19,23),16))>>>8,n[9]=255&t,n[10]=(t=parseInt(e.slice(24,36),16))/1099511627776&255,n[11]=t/4294967296&255,n[12]=t>>>24&255,n[13]=t>>>16&255,n[14]=t>>>8&255,n[15]=255&t,n};function y(e,t,n){function i(e,i,r,o){var a;if("string"==typeof e&&(e=function(e){e=unescape(encodeURIComponent(e));const t=[];for(let n=0;n<e.length;++n)t.push(e.charCodeAt(n));return t}(e)),"string"==typeof i&&(i=m(i)),16!==(null===(a=i)||void 0===a?void 0:a.length))throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");let c=new Uint8Array(16+e.length);if(c.set(i),c.set(e,i.length),c=n(c),c[6]=15&c[6]|t,c[8]=63&c[8]|128,r){o=o||0;for(let e=0;e<16;++e)r[o+e]=c[e];return r}return u(c)}try{i.name=e}catch(e){}return i.DNS="6ba7b810-9dad-11d1-80b4-00c04fd430c8",i.URL="6ba7b811-9dad-11d1-80b4-00c04fd430c8",i}function b(e){return 14+(e+64>>>9<<4)+1}function v(e,t){const n=(65535&e)+(65535&t);return(e>>16)+(t>>16)+(n>>16)<<16|65535&n}function _(e,t,n,i,r,o){return v((a=v(v(t,e),v(i,o)))<<(c=r)|a>>>32-c,n);var a,c}function x(e,t,n,i,r,o,a){return _(t&n|~t&i,e,t,r,o,a)}function D(e,t,n,i,r,o,a){return _(t&i|n&~i,e,t,r,o,a)}function w(e,t,n,i,r,o,a){return _(t^n^i,e,t,r,o,a)}function U(e,t,n,i,r,o,a){return _(n^(t|~i),e,t,r,o,a)}var T=y("v3",48,(function(e){if("string"==typeof e){const t=unescape(encodeURIComponent(e));e=new Uint8Array(t.length);for(let n=0;n<t.length;++n)e[n]=t.charCodeAt(n)}return function(e){const t=[],n=32*e.length;for(let i=0;i<n;i+=8){const n=e[i>>5]>>>i%32&255,r=parseInt("0123456789abcdef".charAt(n>>>4&15)+"0123456789abcdef".charAt(15&n),16);t.push(r)}return t}(function(e,t){e[t>>5]|=128<<t%32,e[b(t)-1]=t;let n=1732584193,i=-271733879,r=-1732584194,o=271733878;for(let t=0;t<e.length;t+=16){const a=n,c=i,s=r,u=o;n=x(n,i,r,o,e[t],7,-680876936),o=x(o,n,i,r,e[t+1],12,-389564586),r=x(r,o,n,i,e[t+2],17,606105819),i=x(i,r,o,n,e[t+3],22,-1044525330),n=x(n,i,r,o,e[t+4],7,-176418897),o=x(o,n,i,r,e[t+5],12,1200080426),r=x(r,o,n,i,e[t+6],17,-1473231341),i=x(i,r,o,n,e[t+7],22,-45705983),n=x(n,i,r,o,e[t+8],7,1770035416),o=x(o,n,i,r,e[t+9],12,-1958414417),r=x(r,o,n,i,e[t+10],17,-42063),i=x(i,r,o,n,e[t+11],22,-1990404162),n=x(n,i,r,o,e[t+12],7,1804603682),o=x(o,n,i,r,e[t+13],12,-40341101),r=x(r,o,n,i,e[t+14],17,-1502002290),i=x(i,r,o,n,e[t+15],22,1236535329),n=D(n,i,r,o,e[t+1],5,-165796510),o=D(o,n,i,r,e[t+6],9,-1069501632),r=D(r,o,n,i,e[t+11],14,643717713),i=D(i,r,o,n,e[t],20,-373897302),n=D(n,i,r,o,e[t+5],5,-701558691),o=D(o,n,i,r,e[t+10],9,38016083),r=D(r,o,n,i,e[t+15],14,-660478335),i=D(i,r,o,n,e[t+4],20,-405537848),n=D(n,i,r,o,e[t+9],5,568446438),o=D(o,n,i,r,e[t+14],9,-1019803690),r=D(r,o,n,i,e[t+3],14,-187363961),i=D(i,r,o,n,e[t+8],20,1163531501),n=D(n,i,r,o,e[t+13],5,-1444681467),o=D(o,n,i,r,e[t+2],9,-51403784),r=D(r,o,n,i,e[t+7],14,1735328473),i=D(i,r,o,n,e[t+12],20,-1926607734),n=w(n,i,r,o,e[t+5],4,-378558),o=w(o,n,i,r,e[t+8],11,-2022574463),r=w(r,o,n,i,e[t+11],16,1839030562),i=w(i,r,o,n,e[t+14],23,-35309556),n=w(n,i,r,o,e[t+1],4,-1530992060),o=w(o,n,i,r,e[t+4],11,1272893353),r=w(r,o,n,i,e[t+7],16,-155497632),i=w(i,r,o,n,e[t+10],23,-1094730640),n=w(n,i,r,o,e[t+13],4,681279174),o=w(o,n,i,r,e[t],11,-358537222),r=w(r,o,n,i,e[t+3],16,-722521979),i=w(i,r,o,n,e[t+6],23,76029189),n=w(n,i,r,o,e[t+9],4,-640364487),o=w(o,n,i,r,e[t+12],11,-421815835),r=w(r,o,n,i,e[t+15],16,530742520),i=w(i,r,o,n,e[t+2],23,-995338651),n=U(n,i,r,o,e[t],6,-198630844),o=U(o,n,i,r,e[t+7],10,1126891415),r=U(r,o,n,i,e[t+14],15,-1416354905),i=U(i,r,o,n,e[t+5],21,-57434055),n=U(n,i,r,o,e[t+12],6,1700485571),o=U(o,n,i,r,e[t+3],10,-1894986606),r=U(r,o,n,i,e[t+10],15,-1051523),i=U(i,r,o,n,e[t+1],21,-2054922799),n=U(n,i,r,o,e[t+8],6,1873313359),o=U(o,n,i,r,e[t+15],10,-30611744),r=U(r,o,n,i,e[t+6],15,-1560198380),i=U(i,r,o,n,e[t+13],21,1309151649),n=U(n,i,r,o,e[t+4],6,-145523070),o=U(o,n,i,r,e[t+11],10,-1120210379),r=U(r,o,n,i,e[t+2],15,718787259),i=U(i,r,o,n,e[t+9],21,-343485551),n=v(n,a),i=v(i,c),r=v(r,s),o=v(o,u)}return[n,i,r,o]}(function(e){if(0===e.length)return[];const t=8*e.length,n=new Uint32Array(b(t));for(let i=0;i<t;i+=8)n[i>>5]|=(255&e[i/8])<<i%32;return n}(e),8*e.length))}));var E={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};var k=function(e,t,n){if(E.randomUUID&&!t&&!e)return E.randomUUID();const i=(e=e||{}).random||(e.rng||o)();if(i[6]=15&i[6]|64,i[8]=63&i[8]|128,t){n=n||0;for(let e=0;e<16;++e)t[n+e]=i[e];return t}return u(i)};function C(e,t,n,i){switch(e){case 0:return t&n^~t&i;case 1:return t^n^i;case 2:return t&n^t&i^n&i;case 3:return t^n^i}}function S(e,t){return e<<t|e>>>32-t}var F=y("v5",80,(function(e){const t=[1518500249,1859775393,2400959708,3395469782],n=[1732584193,4023233417,2562383102,271733878,3285377520];if("string"==typeof e){const t=unescape(encodeURIComponent(e));e=[];for(let n=0;n<t.length;++n)e.push(t.charCodeAt(n))}else Array.isArray(e)||(e=Array.prototype.slice.call(e));e.push(128);const i=e.length/4+2,r=Math.ceil(i/16),o=new Array(r);for(let t=0;t<r;++t){const n=new Uint32Array(16);for(let i=0;i<16;++i)n[i]=e[64*t+4*i]<<24|e[64*t+4*i+1]<<16|e[64*t+4*i+2]<<8|e[64*t+4*i+3];o[t]=n}o[r-1][14]=8*(e.length-1)/Math.pow(2,32),o[r-1][14]=Math.floor(o[r-1][14]),o[r-1][15]=8*(e.length-1)&4294967295;for(let e=0;e<r;++e){const i=new Uint32Array(80);for(let t=0;t<16;++t)i[t]=o[e][t];for(let e=16;e<80;++e)i[e]=S(i[e-3]^i[e-8]^i[e-14]^i[e-16],1);let r=n[0],a=n[1],c=n[2],s=n[3],u=n[4];for(let e=0;e<80;++e){const n=Math.floor(e/20),o=S(r,5)+C(n,a,c,s)+u+t[n]+i[e]>>>0;u=s,s=c,c=S(a,30)>>>0,a=r,r=o}n[0]=n[0]+r>>>0,n[1]=n[1]+a>>>0,n[2]=n[2]+c>>>0,n[3]=n[3]+s>>>0,n[4]=n[4]+u>>>0}return[n[0]>>24&255,n[0]>>16&255,n[0]>>8&255,255&n[0],n[1]>>24&255,n[1]>>16&255,n[1]>>8&255,255&n[1],n[2]>>24&255,n[2]>>16&255,n[2]>>8&255,255&n[2],n[3]>>24&255,n[3]>>16&255,n[3]>>8&255,255&n[3],n[4]>>24&255,n[4]>>16&255,n[4]>>8&255,255&n[4]]})),A="00000000-0000-0000-0000-000000000000";var O=function(e){if(!c(e))throw TypeError("Invalid UUID");return parseInt(e.slice(14,15),16)}},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.loadDashboard=t.updateDashboard=void 0;const i=n(46),r=n(99),o=n(46),a=n(469),c=n(470),s=n(473),u=n(48),d=document.querySelector("#fs-content-container"),l=document.querySelector("#main-section-content"),f=document.querySelector("#open-doc"),h=document.querySelector("#remove-doc"),p=document.querySelector("#nav-path-container");let g=document.querySelector("#fs-back-btn"),m=document.querySelector("#fs-empty-btn"),y=document.querySelector("#fs-delete-btn");const b=document.querySelector("#upload-new-doc-button"),v=document.querySelector("#add-folder-button"),_=new a.ShiftSelectionManager,x=(0,o.FileSystemManager)(),D=(0,a.dashboardState)(),w=document.querySelector(".main-section-content"),U=document.querySelector(".right-click-file-menu"),T=document.querySelector(".context-menu-items-wrapper");let E=!1,k=!1,C=null,S=!1;function F(){b.classList.contains("active")&&(0,c.InitUploadArea)(D.getParentFolder())}function A(e,t){const n=(i=t?{glyphs:e}:{storage:e},Object.keys(i).map(e=>encodeURIComponent(e)+"="+encodeURIComponent(i[e])).join("&"));var i;window.open("./editor.html?"+n,"_blank")}function O(e){const t=D.getEntries().at(e);D.setSelection(e,!0);document.getElementById(t.id).classList.add("selected")}function W(e){const t=D.getEntries().at(e).id;D.setSelection(e,!1);document.getElementById(t).classList.remove("selected")}function B(){Array.from(document.querySelectorAll(".document-entry.selected")).forEach(e=>e.classList.remove("selected")),D.resetSelection()}async function I(e,t,n){if("folder"===t.type){n.addEventListener("dblclick",(async function(){return await G([...D.getFolderPath(),t])}),!1)}else n.addEventListener("dblclick",L,!1);!function(e,t){e.addEventListener("click",(function(e){N(t)}),!1)}(n,e),function(e,t){e.addEventListener("contextmenu",e=>{e.stopPropagation(),e.preventDefault(),(S||1===D.getSelectedEntries().length)&&B(),O(t),ne("selection-options",e.clientX,e.clientY),U.classList.remove("hidden"),S=!0}),w.addEventListener("click",e=>{if(S){let t=e.target;if(t.parentElement.classList.contains("document-entry")&&(t=t.parentElement),U.classList.add("hidden"),S=!1,t.classList.contains("document-entry")){const e=$(t.id);N(D.getIndexByEntryName(e.name))}else B()}})}(n,e)}function N(e){E||k?E?D.getSelection()[e]?(W(e),_.setStart(D.getSelection().lastIndexOf(!0))):(O(e),_.setStart(e)):k&&(_.getPrevSelection().forEach(e=>{W(e)}),_.setEnd(e),_.getSelection(D.getSelection()).forEach(e=>{O(e)})):(B(),O(e),_.setStart(e)),z(),V()}function L(){if(f.classList.contains("active"))if(1!==D.getSelectedFolders().length&&1!==D.getSelectedTrash().length)D.getSelectedFiles().forEach(e=>function(e){const t=e.metadata.document;if(void 0!==typeof t){const n="sample"===t;A(e.id,n)}}(e)),_.reset(),B(),z();else{G([...D.getFolderPath(),D.getSelectedEntries()[0]])}}function R(){if(!h.classList.contains("active"))return;const e=D.getSelectedEntries(),t=D.getParentFolder(),n=D.getTrashFolder(),r=(new Date).toLocaleString();for(let t of e)t=i.FileSystemTools.addMetadata(t,{removed_on:r,recover_folder:D.getFolderPathNames()});Y(e,t,n)}function P(e,t){return new Promise((n,o)=>{(0,r.deleteDocument)(e.id).then(()=>{i.FileSystemTools.removeEntry(e,t),n(!0)}).catch(()=>o(!1))})}function j(e,t){return new Promise(n=>{const r=e.children.map(t=>"file"===t.type?P(t,e):"folder"===t.type?j(t,e):Promise.resolve(!1));Promise.all(r).then(()=>{i.FileSystemTools.removeEntry(e,t),n(!0)}).catch(()=>n(!1))})}function q(){const e=D.getSelectedEntries(),t=`Are you sure you want to delete:\n${n=e,n.map(e=>`- ${e.name} (${e.type})`).join("\n")}\nThis action is irreversible.`;var n;if(window.confirm(t)){const t=e.map(e=>"file"===e.type?P(e,D.getParentFolder()):"folder"===e.type?j(e,D.getParentFolder()):void 0);Promise.all(t).then(()=>{G(D.getFolderPath())}).catch(e=>console.debug("failed to delete files: ",e))}}function M(){const e=D.getTrashFolder();if(!e)return void console.error("Trash folder not found.");if(window.confirm("Are you sure you want to delete all the files in Trash Folder?\nThis action is irreversible.")){const t=e.children.map(t=>"file"===t.type?P(t,e):"folder"===t.type?j(t,e):Promise.resolve(!1));Promise.all(t).then(()=>{G(D.getFolderPath())}).catch(e=>console.debug("failed to delete files: ",e))}}function z(){D.getParentFolder().metadata.immutable||D.getSelectedEntries()[0]&&D.getSelectedEntries()[0].metadata.immutable?(b.classList.remove("active"),v.classList.remove("active"),h.classList.remove("active"),D.getSelectedEntries().length?f.classList.add("active"):f.classList.remove("active")):D.isInTrash()?(b.classList.remove("active"),v.classList.remove("active"),h.classList.remove("active"),f.classList.remove("active")):D.getSelectedTrash().length?(f.classList.add("active"),h.classList.remove("active"),b.classList.remove("active"),v.classList.remove("active")):D.getSelectedEntries().length?(f.classList.add("active"),h.classList.add("active"),b.classList.remove("active"),v.classList.remove("active")):(f.classList.remove("active"),h.classList.remove("active"),b.classList.add("active"),v.classList.add("active"))}function V(){!function(){const e=g.cloneNode(!0);g.parentNode.replaceChild(e,g),1===D.getFolderPath().length?(e.classList.remove("active"),e.setAttribute("disabled","true")):(e.classList.add("active"),e.removeAttribute("disabled"),e.addEventListener("click",H),e.addEventListener("ondragenter",()=>e.classList.add("active")),e.addEventListener("ondragleave",()=>e.classList.remove("active")),K(e,D.getParentFolder(),D.getFolderPath().at(-2))),g=e}(),function(){const e=m.cloneNode(!0);m.parentNode.replaceChild(e,m);const t=D.getParentFolder();"trash"===t.type||D.isInTrash()?(e.style.display="",t.children.length&&!D.getSelectedEntries().length&&"trash"===t.type?(e.classList.add("active"),e.removeAttribute("disabled"),e.addEventListener("click",M)):(e.classList.remove("active"),e.setAttribute("disabled","true"))):e.style.display="none",m=e}(),function(){const e=y.cloneNode(!0);y.parentNode.replaceChild(e,y),"trash"===D.getParentFolder().type||D.isInTrash()?(e.style.display="",D.getSelectedEntries().length?(e.classList.add("active"),e.removeAttribute("disabled"),e.addEventListener("click",q)):(e.classList.remove("active"),e.setAttribute("disabled","true"))):e.style.display="none",y=e}()}async function H(){const e=D.getFolderPath().slice(0,-1);await G(e)}function $(e){return D.getEntries().find(t=>t.id===e)}async function G(e){e||(e=D.getFolderPath()),D.setFolderPath(e);const t=D.getParentFolder();d.innerHTML="",_.reset(),D.setEntries(t.children),t.children.forEach(async(e,t)=>{const n=function(e){const t=document.createElement("div");t.classList.add("document-entry"),t.setAttribute("draggable","true");const n=document.createElement("img");n.classList.add("document-icon");const i=document.createElement("div");switch(i.innerText=e.name,e.type){case"folder":t.classList.add("folder-entry"),t.setAttribute("id",e.id),n.src="./Cress-gh/assets/img/folder-icon.svg",t.setAttribute("drop-id",e.id),t.classList.add("drop-target");break;case"trash":t.classList.add("folder-entry"),t.setAttribute("id",e.id),n.src="./Cress-gh/assets/img/trash-icon.svg",t.setAttribute("drop-id",e.id),t.classList.add("drop-target");break;case"file":t.classList.add("file-entry"),t.setAttribute("id",e.id),"manuscript"===e.metadata.type?(t.classList.add("manuscript-entry"),n.src="./Cress-gh/assets/img/manuscript-icon.svg"):"folio"===e.metadata.type?(t.classList.add("folio-entry"),n.src="./Cress-gh/assets/img/folio-icon.svg"):n.src="./Cress-gh/assets/img/folio-icon.svg"}return t.appendChild(n),t.appendChild(i),t}(e);d.appendChild(n),await I(t,e,n)}),z(),function(){p.innerHTML="";const e=D.getFolderPath().map((e,t)=>{const n=document.createElement("div");n.classList.add("nav-path-section"),n.innerHTML=e.name;const i=D.getFolderPath().slice(0,t+1);return n.addEventListener("click",async()=>await G(i)),K(n,D.getParentFolder(),i.at(-1)),n});e.forEach((t,n)=>{if(p.appendChild(t),n!==e.length-1){const e=document.createElement("div");e.classList.add("nav-path-seperator"),e.innerHTML=" / ",p.appendChild(e)}})}(),V();const n=document.getElementById("info-badge");D.isInTrash()?(n.textContent="Files will be deleted after 30 days",n.style.background="#EFBBCF"):(n.textContent="",n.style.background=""),t.children.forEach(e=>{const n=document.getElementById(e.id);n.addEventListener("dragstart",e=>{e.dataTransfer.effectAllowed="move",C=e.target}),"folder"!==e.type&&"trash"!==e.type||K(n,t,e)}),x.setFileSystem(D.getFolderPath().at(0))}function K(e,t,n){e.addEventListener("dragenter",t=>{t.preventDefault(),e.classList.add("dragenter")}),e.addEventListener("dragleave",t=>{t.preventDefault(),e.classList.remove("dragenter")}),e.addEventListener("dragover",e=>e.preventDefault()),e.addEventListener("drop",function(e,t){return n=>{n.preventDefault();const i=$(C.getAttribute("id"));i&&i!==t&&Y([i],e,t)}}(t,n))}function Y(e,t,n){const r=[];e.forEach(e=>{"trash"===n.type&&n.children.some(t=>t.name===e.name)&&(e.name=function(e){const t=(new Date).toLocaleString();return e+" - "+t}(e.name));const o=i.FileSystemTools.canMoveEntry(e,t,n);o.succeeded?i.FileSystemTools.moveEntry(e,t,n):r.push(o.error)}),r.filter((e,t,n)=>n.indexOf(e)===t),r.length>0&&window.alert(r.join("\n")),G()}function Z(){const e=new u.ModalWindow;e.setModalWindowView(u.ModalWindowView.MOVE_TO),e.openModalWindow();const t=D.getSelectedEntries(),n=D.getParentFolder(),i=function(e){const t=document.createElement("ul");return t.id="tree-root",t.appendChild(function e(t,n,i){const r=document.createElement("li"),o=document.createElement("div");o.classList.add("tree-li-container");const a=document.createElement("div");a.classList.add("tree-name"),a.innerHTML=t.name,a.addEventListener("click",()=>{document.querySelectorAll(".tree-name").forEach(e=>e.classList.remove("selected")),a.classList.add("selected")}),a.addEventListener("dblclick",()=>{n(t)});if(t.children.every(e=>"folder"!==e.type))return r.appendChild(o),o.appendChild(a),r;const c=document.createElement("ul"),s=document.createElement("div");s.classList.add("tree-arrow"),s.innerHTML="▶",i<2&&c.classList.add("active");i<2&&s.classList.add("active");return s.addEventListener("click",()=>{s.classList.toggle("active"),c.classList.toggle("active")}),r.appendChild(o),o.appendChild(s),o.appendChild(a),r.appendChild(c),t.children.forEach(t=>{if("folder"===t.type){const r=e(t,n,i+1);c.appendChild(r)}}),r}(D.root(),e,0)),t}(i=>{e.hideModalWindow(),Y(t,n,i)}),r=document.createElement("div");r.classList.add("tree-container"),r.appendChild(i);const o=document.getElementById("cress-modal-window-content-container");o.innerHTML='<span class="move-menu-msg">Double-click the folder you want to move your items to!</span>',o.appendChild(r)}function X(){if(!v.classList.contains("active"))return;const e=new u.ModalWindow;e.setModalWindowView(u.ModalWindowView.NEW_FOLDER),e.openModalWindow();const t=document.getElementById("dashboard_input_container"),n=document.getElementById("cancel_dashboard"),i=document.getElementById("confirm_dashboard"),r=document.createElement("input");r.id="dashboard_input",r.type="text",r.placeholder="Untitled Folder",r.value="Untitled Folder",t.appendChild(r),r.select(),r.focus(),n.addEventListener("click",()=>e.hideModalWindow()),i.addEventListener("click",()=>J(e,r.value)),t.addEventListener("keydown",t=>{"Escape"===t.key?e.hideModalWindow():"Enter"===t.key&&J(e,r.value)})}function J(e,t){te(t)?(window.alert("The folder name already exists in the current folder!"),X()):(e.hideModalWindow(),function(e){const t=document.createElement("div");t.classList.add("document-entry"),t.classList.add("folder-entry"),t.setAttribute("id","new-folder");const n=i.FileSystemTools.createFolder(e);i.FileSystemTools.addEntry(n,D.getParentFolder())?(t.setAttribute("id",e),G()):t.remove()}(t))}function Q(){const e=new u.ModalWindow;e.setModalWindowView(u.ModalWindowView.RENAME),e.openModalWindow();const t=document.getElementById("dashboard_input_container"),n=document.getElementById("cancel_dashboard"),i=document.getElementById("confirm_dashboard"),r=document.createElement("input");r.id="dashboard_input",r.type="text";const o=D.getSelectedEntries()[0].name;r.placeholder=o,r.value=o,t.appendChild(r),r.select(),r.focus(),n.addEventListener("click",()=>e.hideModalWindow()),i.addEventListener("click",()=>ee(e,r.value,o)),t.addEventListener("keydown",t=>{"Escape"===t.key?e.hideModalWindow():"Enter"===t.key&&ee(e,r.value,o)})}function ee(e,t,n){if(t===n)e.hideModalWindow();else if(te(t))window.alert("The filename already exists in the current folder!"),Q();else{e.hideModalWindow();!function(e,t){if(i.FileSystemTools.renameEntry(e,D.getParentFolder(),t))if("file"===e.type){const n=e;(0,r.updateDocName)(n.id,t).then(()=>{G()})}else G()}(D.getSelectedEntries()[0],t)}}function te(e){return D.getParentFolder().children.some(t=>t.name===e)}function ne(e,t,n){switch(e){case"selection-options":const e=D.getSelectedFiles().length,t=D.getSelectedFolders().length,n=D.getSelectedTrash().length;e||t||!n?D.getFolderPath().length>1&&"Trash"==D.getFolderPath().at(1).name?(T.innerHTML=s.trashEntryOptions,ie("trash-entry-options")):1!==e||t||n?e>1&&!t&&!n?(T.innerHTML=s.multiFileOptions,ie("multi-file-options")):e>=1&&t>=1&&!n?(T.innerHTML=s.folderAndFileOptions,ie("folder-and-file-options")):e||1!==t||n?!e&&t>1&&!n&&(T.innerHTML=s.multiFolderOptions,ie("multi-folder-options")):(T.innerHTML=s.singleFolderOptions,ie("single-folder-options")):(T.innerHTML=s.singleFileOptions,ie("single-file-options")):(T.innerHTML=s.trashFolderOptions,ie("trash-folder-options"));break;default:T.innerHTML=s.defaultOptions,ie("default")}if(D.getParentFolder().metadata.immutable||D.getSelectedEntries()[0]&&D.getSelectedEntries()[0].metadata.immutable||D.isInTrash()){const e=document.getElementById("cm-remove-btn"),t=document.getElementById("cm-rename-btn"),n=document.getElementById("cm-move-btn"),i=document.getElementById("cm-upload-doc-btn"),r=document.getElementById("cm-new-folder-btn");e&&e.classList.add("disabled"),t&&t.classList.add("disabled"),n&&n.classList.add("disabled"),i&&i.classList.add("disabled"),r&&r.classList.add("disabled")}U.style.left=t+"px",U.style.top=n+"px",U.classList.remove("hidden")}function ie(e){const t="context-menu-item-wrapper";switch(e){case"single-file-options":document.querySelector(`.${t}#cm-open-btn`).addEventListener("click",e=>{U.classList.add("hidden"),L()}),document.querySelector(`.${t}#cm-remove-btn`).addEventListener("click",e=>{U.classList.add("hidden"),R()}),document.querySelector(`.${t}#cm-rename-btn`).addEventListener("click",e=>{U.classList.add("hidden"),Q()}),document.querySelector(`.${t}#cm-move-btn`).addEventListener("click",e=>{U.classList.add("hidden"),Z()});break;case"multi-file-options":document.querySelector(`.${t}#cm-open-btn`).addEventListener("click",e=>{U.classList.add("hidden"),L()}),document.querySelector(`.${t}#cm-remove-btn`).addEventListener("click",e=>{U.classList.add("hidden"),R()}),document.querySelector(`.${t}#cm-move-btn`).addEventListener("click",e=>{U.classList.add("hidden"),Z()});break;case"folder-and-file-options":document.querySelector(`.${t}#cm-remove-btn`).addEventListener("click",e=>{U.classList.add("hidden"),R()}),document.querySelector(`.${t}#cm-move-btn`).addEventListener("click",e=>{U.classList.add("hidden"),Z()});break;case"single-folder-options":document.querySelector(`.${t}#cm-open-btn`).addEventListener("click",e=>{U.classList.add("hidden"),L()}),document.querySelector(`.${t}#cm-remove-btn`).addEventListener("click",e=>{U.classList.add("hidden"),R()}),document.querySelector(`.${t}#cm-rename-btn`).addEventListener("click",e=>{U.classList.add("hidden"),Q()}),document.querySelector(`.${t}#cm-move-btn`).addEventListener("click",e=>{U.classList.add("hidden"),Z()});break;case"multi-folder-options":document.querySelector(`.${t}#cm-remove-btn`).addEventListener("click",e=>{U.classList.add("hidden"),R()}),document.querySelector(`.${t}#cm-move-btn`).addEventListener("click",e=>{U.classList.add("hidden"),Z()});break;case"trash-folder-options":document.querySelector(`.${t}#cm-empty-trash-btn`).addEventListener("click",e=>{U.classList.add("hidden"),M()});break;case"trash-entry-options":document.querySelector(`.${t}#cm-recover-btn`).addEventListener("click",e=>{U.classList.add("hidden"),function(){const e=D.getSelectedEntries(),t=D.getParentFolder();for(let n of e){const e=n.metadata.recover_folder,r=D.getFolderPathByNames(e);if(r){n=i.FileSystemTools.removeMetadata(n,["removed_on","recover_folder"]);const e=/ - \d{1,2}\/\d{1,2}\/\d{4}, \d{1,2}:\d{2}:\d{2} [APMapm]{2}$/;e.test(n.name)&&(n.name=n.name.replace(e,"")),Y([n],t,r)}}}()}),document.querySelector(`.${t}#cm-delete-btn`).addEventListener("click",e=>{U.classList.add("hidden"),q()});break;default:document.querySelector(`.${t}#cm-upload-doc-btn`).addEventListener("click",e=>{U.classList.add("hidden"),F()}),document.querySelector(`.${t}#cm-new-folder-btn`).addEventListener("click",e=>{U.classList.add("hidden"),X()})}}function re(e){D.getTrashFolder()||x.newTrash(e);const t=D.getTrashFolder(),n=new Date,i=new Date(n.getTime()-2592e6);t.children.forEach(e=>{(e=>{if(e.metadata&&e.metadata.removed_on){return new Date(e.metadata.removed_on)<=i}return!1})(e)&&("file"===e.type?P(e,t):"folder"===e.type&&j(e,t))})}null==f||f.addEventListener("click",L),null==h||h.addEventListener("click",R),null==b||b.addEventListener("click",F),null==v||v.addEventListener("click",X),window.addEventListener("keydown",e=>{e.metaKey&&(E=!0),e.shiftKey&&(k=!0),"Escape"===e.key&&(B(),_.reset(),z(),V())}),window.addEventListener("keyup",e=>{e.metaKey||(E=!1),e.shiftKey||(k=!1)}),null==l||l.addEventListener("click",e=>{const t=e.target;Boolean(t.closest(".document-entry"))||(B(),_.reset(),z(),V())}),t.updateDashboard=G;t.loadDashboard=async()=>{const e=await x.getRoot();D.root(e),re(e),G([e]),document.querySelector(".main-section").addEventListener("contextmenu",e=>{e.preventDefault(),B(),ne("default",e.clientX,e.clientY)}),document.querySelector(".main-section").addEventListener("click",e=>{U.classList.add("hidden")})}},function(e,t,n){"use strict";t.byteLength=function(e){var t=u(e),n=t[0],i=t[1];return 3*(n+i)/4-i},t.toByteArray=function(e){var t,n,i=u(e),a=i[0],c=i[1],s=new o(function(e,t,n){return 3*(t+n)/4-n}(0,a,c)),d=0,l=c>0?a-4:a;for(n=0;n<l;n+=4)t=r[e.charCodeAt(n)]<<18|r[e.charCodeAt(n+1)]<<12|r[e.charCodeAt(n+2)]<<6|r[e.charCodeAt(n+3)],s[d++]=t>>16&255,s[d++]=t>>8&255,s[d++]=255&t;2===c&&(t=r[e.charCodeAt(n)]<<2|r[e.charCodeAt(n+1)]>>4,s[d++]=255&t);1===c&&(t=r[e.charCodeAt(n)]<<10|r[e.charCodeAt(n+1)]<<4|r[e.charCodeAt(n+2)]>>2,s[d++]=t>>8&255,s[d++]=255&t);return s},t.fromByteArray=function(e){for(var t,n=e.length,r=n%3,o=[],a=0,c=n-r;a<c;a+=16383)o.push(d(e,a,a+16383>c?c:a+16383));1===r?(t=e[n-1],o.push(i[t>>2]+i[t<<4&63]+"==")):2===r&&(t=(e[n-2]<<8)+e[n-1],o.push(i[t>>10]+i[t>>4&63]+i[t<<2&63]+"="));return o.join("")};for(var i=[],r=[],o="undefined"!=typeof Uint8Array?Uint8Array:Array,a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",c=0,s=a.length;c<s;++c)i[c]=a[c],r[a.charCodeAt(c)]=c;function u(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");return-1===n&&(n=t),[n,n===t?0:4-n%4]}function d(e,t,n){for(var r,o,a=[],c=t;c<n;c+=3)r=(e[c]<<16&16711680)+(e[c+1]<<8&65280)+(255&e[c+2]),a.push(i[(o=r)>>18&63]+i[o>>12&63]+i[o>>6&63]+i[63&o]);return a.join("")}r["-".charCodeAt(0)]=62,r["_".charCodeAt(0)]=63},function(e,t,n){(function(e){var i=void 0!==e&&e||"undefined"!=typeof self&&self||window,r=Function.prototype.apply;function o(e,t){this._id=e,this._clearFn=t}t.setTimeout=function(){return new o(r.call(setTimeout,i,arguments),clearTimeout)},t.setInterval=function(){return new o(r.call(setInterval,i,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},o.prototype.unref=o.prototype.ref=function(){},o.prototype.close=function(){this._clearFn.call(i,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout((function(){e._onTimeout&&e._onTimeout()}),t))},n(392),t.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==e&&e.setImmediate||this&&this.setImmediate,t.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==e&&e.clearImmediate||this&&this.clearImmediate}).call(this,n(9))},function(e,t,n){"use strict";var i=n(5),r=i.maybeWrapAsError,o=n(28).OperationalError,a=n(40);var c=/^(?:name|message|stack|cause)$/;function s(e){var t;if(function(e){return e instanceof Error&&a.getPrototypeOf(e)===Error.prototype}(e)){(t=new o(e)).name=e.name,t.message=e.message,t.stack=e.stack;for(var n=a.keys(e),r=0;r<n.length;++r){var s=n[r];c.test(s)||(t[s]=e[s])}return t}return i.markAsOriginatingFromRejection(e),e}e.exports=function(e,t){return function(n,i){if(null!==e){if(n){var o=s(r(n));e._attachExtraTrace(o),e._reject(o)}else if(t){for(var a=arguments.length,c=new Array(Math.max(a-1,0)),u=1;u<a;++u)c[u-1]=arguments[u];e._fulfill(c)}else e._fulfill(i);e=null}}}},function(e,t,n){var i=n(273),r=n(421);t.openArrayBuffer=function(e){return r.loadAsync(e).then((function(e){return{exists:function(t){return null!==e.file(t)},read:function(t,n){return e.file(t).async("uint8array").then((function(e){return"base64"===n?i.fromByteArray(e):n?new TextDecoder(n).decode(e):e}))},write:function(t,n){e.file(t,n)},toArrayBuffer:function(){return e.generateAsync({type:"arraybuffer"})}}}))},t.splitPath=function(e){var t=e.lastIndexOf("/");return-1===t?{dirname:"",basename:e}:{dirname:e.substring(0,t),basename:e.substring(t+1)}},t.joinPath=function(){var e=Array.prototype.filter.call(arguments,(function(e){return e})),t=[];return e.forEach((function(e){/^\//.test(e)?t=[e]:t.push(e)})),t.join("/")}},function(e,t,n){var i=n(278);t.Element=i.Element,t.element=i.element,t.text=i.text,t.readString=n(423).readString,t.writeString=n(429).writeString},function(e,t,n){var i=n(7);t.Element=o,t.element=function(e,t,n){return new o(e,t,n)},t.text=function(e){return{type:"text",value:e}};var r={first:function(){return null},firstOrEmpty:function(){return r},attributes:{}};function o(e,t,n){this.type="element",this.name=e,this.attributes=t||{},this.children=n||[]}o.prototype.first=function(e){return i.find(this.children,(function(t){return t.name===e}))},o.prototype.firstOrEmpty=function(e){return this.first(e)||r},o.prototype.getElementsByTagName=function(e){return c(i.filter(this.children,(function(t){return t.name===e})))},o.prototype.text=function(){if(0===this.children.length)return"";if(1!==this.children.length||"text"!==this.children[0].type)throw new Error("Not implemented");return this.children[0].value};var a={getElementsByTagName:function(e){return c(i.flatten(this.map((function(t){return t.getElementsByTagName(e)}),!0)))}};function c(e){return i.extend(e,a)}},function(e,t){(function(){e.exports=function(){function e(e,t,n){if(this.options=e.options,this.stringify=e.stringify,this.parent=e,null==t)throw new Error("Missing attribute name. "+this.debugInfo(t));if(null==n)throw new Error("Missing attribute value. "+this.debugInfo(t));this.name=this.stringify.attName(t),this.value=this.stringify.attValue(n)}return e.prototype.clone=function(){return Object.create(this)},e.prototype.toString=function(e){return this.options.writer.set(e).attribute(this)},e.prototype.debugInfo=function(e){return null==(e=e||this.name)?"parent: <"+this.parent.name+">":"attribute: {"+e+"}, parent: <"+this.parent.name+">"},e}()}).call(this)},function(e,t){(function(){var t={}.hasOwnProperty;e.exports=function(){function e(e){var n,i,r,o,a;for(r in this.assertLegalChar=(n=this.assertLegalChar,i=this,function(){return n.apply(i,arguments)}),e||(e={}),this.noDoubleEncoding=e.noDoubleEncoding,o=e.stringify||{})t.call(o,r)&&(a=o[r],this[r]=a)}return e.prototype.eleName=function(e){return e=""+e||"",this.assertLegalChar(e)},e.prototype.eleText=function(e){return e=""+e||"",this.assertLegalChar(this.elEscape(e))},e.prototype.cdata=function(e){return e=(e=""+e||"").replace("]]>","]]]]><![CDATA[>"),this.assertLegalChar(e)},e.prototype.comment=function(e){if((e=""+e||"").match(/--/))throw new Error("Comment text cannot contain double-hypen: "+e);return this.assertLegalChar(e)},e.prototype.raw=function(e){return""+e||""},e.prototype.attName=function(e){return""+e||""},e.prototype.attValue=function(e){return e=""+e||"",this.attEscape(e)},e.prototype.insTarget=function(e){return""+e||""},e.prototype.insValue=function(e){if((e=""+e||"").match(/\?>/))throw new Error("Invalid processing instruction value: "+e);return e},e.prototype.xmlVersion=function(e){if(!(e=""+e||"").match(/1\.[0-9]+/))throw new Error("Invalid version number: "+e);return e},e.prototype.xmlEncoding=function(e){if(!(e=""+e||"").match(/^[A-Za-z](?:[A-Za-z0-9._-])*$/))throw new Error("Invalid encoding: "+e);return e},e.prototype.xmlStandalone=function(e){return e?"yes":"no"},e.prototype.dtdPubID=function(e){return""+e||""},e.prototype.dtdSysID=function(e){return""+e||""},e.prototype.dtdElementValue=function(e){return""+e||""},e.prototype.dtdAttType=function(e){return""+e||""},e.prototype.dtdAttDefault=function(e){return null!=e?""+e||"":e},e.prototype.dtdEntityValue=function(e){return""+e||""},e.prototype.dtdNData=function(e){return""+e||""},e.prototype.convertAttKey="@",e.prototype.convertPIKey="?",e.prototype.convertTextKey="#text",e.prototype.convertCDataKey="#cdata",e.prototype.convertCommentKey="#comment",e.prototype.convertRawKey="#raw",e.prototype.assertLegalChar=function(e){var t;if(t=e.match(/[\0\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/))throw new Error("Invalid character in string: "+e+" at index "+t.index);return e},e.prototype.elEscape=function(e){var t;return t=this.noDoubleEncoding?/(?!&\S+;)&/g:/&/g,e.replace(t,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/\r/g,"&#xD;")},e.prototype.attEscape=function(e){var t;return t=this.noDoubleEncoding?/(?!&\S+;)&/g:/&/g,e.replace(t,"&amp;").replace(/</g,"&lt;").replace(/"/g,"&quot;").replace(/\t/g,"&#x9;").replace(/\n/g,"&#xA;").replace(/\r/g,"&#xD;")},e}()}).call(this)},function(e,t){(function(){var t={}.hasOwnProperty;e.exports=function(){function e(e){var n,i,r,o,a,c,s,u,d;for(n in e||(e={}),this.pretty=e.pretty||!1,this.allowEmpty=null!=(i=e.allowEmpty)&&i,this.pretty?(this.indent=null!=(r=e.indent)?r:"  ",this.newline=null!=(o=e.newline)?o:"\n",this.offset=null!=(a=e.offset)?a:0,this.dontprettytextnodes=null!=(c=e.dontprettytextnodes)?c:0):(this.indent="",this.newline="",this.offset=0,this.dontprettytextnodes=0),this.spacebeforeslash=null!=(s=e.spacebeforeslash)?s:"",!0===this.spacebeforeslash&&(this.spacebeforeslash=" "),this.newlinedefault=this.newline,this.prettydefault=this.pretty,u=e.writer||{})t.call(u,n)&&(d=u[n],this[n]=d)}return e.prototype.set=function(e){var n,i,r;for(n in e||(e={}),"pretty"in e&&(this.pretty=e.pretty),"allowEmpty"in e&&(this.allowEmpty=e.allowEmpty),this.pretty?(this.indent="indent"in e?e.indent:"  ",this.newline="newline"in e?e.newline:"\n",this.offset="offset"in e?e.offset:0,this.dontprettytextnodes="dontprettytextnodes"in e?e.dontprettytextnodes:0):(this.indent="",this.newline="",this.offset=0,this.dontprettytextnodes=0),this.spacebeforeslash="spacebeforeslash"in e?e.spacebeforeslash:"",!0===this.spacebeforeslash&&(this.spacebeforeslash=" "),this.newlinedefault=this.newline,this.prettydefault=this.pretty,i=e.writer||{})t.call(i,n)&&(r=i[n],this[n]=r);return this},e.prototype.space=function(e){var t;return this.pretty&&(t=(e||0)+this.offset+1)>0?new Array(t).join(this.indent):""},e}()}).call(this)},function(e,t,n){var i=n(72);function r(e,t){return{type:"element",tag:e,children:t||[]}}t.freshElement=function(e,t,n){return r(i.element(e,t,{fresh:!0}),n)},t.nonFreshElement=function(e,t,n){return r(i.element(e,t,{fresh:!1}),n)},t.elementWithTag=r,t.text=function(e){return{type:"text",value:e}},t.forceWrite={type:"forceWrite"};var o={br:!0,hr:!0,img:!0};t.isVoidElement=function(e){return 0===e.children.length&&o[e.tag.tagName]}},function(e,t,n){var i=n(7),r=n(27),o=n(73);function a(e){return function(t,n){return r.when(e(t)).then((function(e){var n={};return t.altText&&(n.alt=t.altText),i.extend(n,e),[o.freshElement("img",n)]}))}}t.imgElement=a,t.inline=t.imgElement,t.dataUri=a((function(e){return e.readAsBase64String().then((function(t){return{src:"data:"+e.contentType+";base64,"+t}}))}))},function(e,t,n){t.Parser=n(454).Parser,t.rules=n(285),t.errors=n(286),t.results=n(104),t.StringSource=n(287),t.Token=n(288),t.bottomUp=n(461),t.RegexTokeniser=n(462).RegexTokeniser,t.rule=function(e){var t;return function(n){return t||(t=e()),t(n)}}},function(e,t,n){var i=n(7),r=n(456),o=n(104),a=n(286),c=n(457);t.token=function(e,t){var n=void 0!==t;return function(i){var r=i.head();return!r||r.name!==e||n&&r.value!==t?h(i,f({name:e,value:t})):o.success(r.value,i.tail(),r.source)}},t.tokenOfType=function(e){return t.token(e)},t.firstOf=function(e,t){return i.isArray(t)||(t=Array.prototype.slice.call(arguments,1)),function(n){return c.fromArray(t).map((function(e){return e(n)})).filter((function(e){return e.isSuccess()||e.isError()})).first()||h(n,e)}},t.then=function(e,t){return function(n){var i=e(n);return i.map||console.log(i),i.map(t)}},t.sequence=function(){var e=Array.prototype.slice.call(arguments,0),n=function(n){var r=i.foldl(e,(function(e,t){var i=e.result,r=e.hasCut;if(!i.isSuccess())return{result:i,hasCut:r};var a=t(i.remaining());if(a.isCut())return{result:i,hasCut:!0};if(a.isSuccess()){var c;c=t.isCaptured?i.value().withValue(t,a.value()):i.value();var s=a.remaining(),u=n.to(s);return{result:o.success(c,s,u),hasCut:r}}return r?{result:o.error(a.errors(),a.remaining()),hasCut:r}:{result:a,hasCut:r}}),{result:o.success(new s,n),hasCut:!1}).result,a=n.to(r.remaining());return r.map((function(e){return e.withValue(t.sequence.source,a)}))};function r(e){return e.isCaptured}return n.head=function(){var o=i.find(e,r);return t.then(n,t.sequence.extract(o))},n.map=function(e){return t.then(n,(function(t){return e.apply(this,t.toArray())}))},n};var s=function(e,t){this._values=e||{},this._valuesArray=t||[]};s.prototype.withValue=function(e,t){if(e.captureName&&e.captureName in this._values)throw new Error('Cannot add second value for capture "'+e.captureName+'"');var n=i.clone(this._values);n[e.captureName]=t;var r=this._valuesArray.concat([t]);return new s(n,r)},s.prototype.get=function(e){if(e.captureName in this._values)return this._values[e.captureName];throw new Error('No value for capture "'+e.captureName+'"')},s.prototype.toArray=function(){return this._valuesArray},t.sequence.capture=function(e,t){var n=function(){return e.apply(this,arguments)};return n.captureName=t,n.isCaptured=!0,n},t.sequence.extract=function(e){return function(t){return t.get(e)}},t.sequence.applyValues=function(e){var t=Array.prototype.slice.call(arguments,1);return function(n){var i=t.map((function(e){return n.get(e)}));return e.apply(this,i)}},t.sequence.source={captureName:"☃source☃"},t.sequence.cut=function(){return function(e){return o.cut(e)}},t.optional=function(e){return function(t){var n=e(t);return n.isSuccess()?n.map(r.some):n.isFailure()?o.success(r.none,t):n}},t.zeroOrMoreWithSeparator=function(e,t){return l(e,t,!1)},t.oneOrMoreWithSeparator=function(e,t){return l(e,t,!0)};var u=t.zeroOrMore=function(e){return function(t){for(var n,i=[];(n=e(t))&&n.isSuccess();)t=n.remaining(),i.push(n.value());return n.isError()?n:o.success(i,t)}};function d(e){return o.success(null,e)}t.oneOrMore=function(e){return t.oneOrMoreWithSeparator(e,d)};var l=function(e,n,i){return function(r){var a=e(r);if(a.isSuccess()){var c=t.sequence.capture(e,"main"),s=u(t.then(t.sequence(n,c),t.sequence.extract(c)))(a.remaining());return o.success([a.value()].concat(s.value()),s.remaining())}return i||a.isError()?a:o.success([],r)}};t.leftAssociative=function(e,n,i){var r;r=(r=i?[{func:i,rule:n}]:n).map((function(e){return t.then(e.rule,(function(t){return function(n,i){return e.func(n,t,i)}}))}));var a=t.firstOf.apply(null,["rules"].concat(r));return function(t){var n=t,i=e(t);if(!i.isSuccess())return i;for(var r=a(i.remaining());r.isSuccess();){var c=r.remaining(),s=n.to(r.remaining()),u=r.value();i=o.success(u(i.value(),s),c,s),r=a(i.remaining())}return r.isError()?r:i}},t.leftAssociative.firstOf=function(){return Array.prototype.slice.call(arguments,0)},t.nonConsuming=function(e){return function(t){return e(t).changeRemaining(t)}};var f=function(e){return e.value?e.name+' "'+e.value+'"':e.name};function h(e,t){var n,i=e.head();return n=i?a.error({expected:t,actual:f(i),location:i.source}):a.error({expected:t,actual:"end of tokens"}),o.failure([n],e)}},function(e,t){t.error=function(e){return new n(e)};var n=function(e){this.expected=e.expected,this.actual=e.actual,this._location=e.location};n.prototype.describe=function(){return(this._location?this._location.describe()+":\n":"")+"Expected "+this.expected+"\nbut got "+this.actual},n.prototype.lineNumber=function(){return this._location.lineNumber()},n.prototype.characterNumber=function(){return this._location.characterNumber()}},function(e,t,n){var i=n(458),r=(e.exports=function(e,t){return{asString:function(){return e},range:function(n,i){return new r(e,t,n,i)}}},function(e,t,n,i){this._string=e,this._description=t,this._startIndex=n,this._endIndex=i});r.prototype.to=function(e){return new r(this._string,this._description,this._startIndex,e._endIndex)},r.prototype.describe=function(){var e=this._position(),t=this._description?this._description+"\n":"";return i.format("%sLine number: %s\nCharacter number: %s",t,e.lineNumber,e.characterNumber)},r.prototype.lineNumber=function(){return this._position().lineNumber},r.prototype.characterNumber=function(){return this._position().characterNumber},r.prototype._position=function(){for(var e=this,t=0,n=function(){return e._string.indexOf("\n",t)},i=1;-1!==n()&&n()<this._startIndex;)t=n()+1,i+=1;return{lineNumber:i,characterNumber:this._startIndex-t+1}}},function(e,t){e.exports=function(e,t,n){this.name=e,this.value=t,n&&(this.source=n)}},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";var i;Object.defineProperty(t,"__esModule",{value:!0});(0,n(272).loadDashboard)(),null===(i=document.querySelector("#home-link"))||void 0===i||i.setAttribute("href","https://ddmal.music.mcgill.ca/Cress")},function(e,t,n){"use strict";var i;Object.defineProperty(t,"__esModule",{value:!0}),t.EntryType=void 0,function(e){e.Folder="folder",e.Trash="trash",e.File="file"}(i||(t.EntryType=i={}))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FileSystemTools=void 0;const i=n(105),r=n(46),o=(e,t,n,i)=>{const o={};return t===r.EntryType.File?{name:e,type:t,id:n,metadata:o}:{name:e,type:t,id:n,children:i,metadata:o}};const a=(e,t)=>{const n=t.children.some(t=>t.name===e.name),i=t.metadata.immutable,r={succeeded:!1,error:""};return n?r.error=`Duplicate name: ${e.name} already exists in ${t.name}.`:i?r.error=t.name+" is immutable.":r.succeeded=!0,r},c=(e,t)=>{const n=-1!==t.children.findIndex(t=>t.id===e.id),i=t.metadata.immutable,r=e.metadata.immutable,o={succeeded:!1,error:""};return n?i?o.error=t.name+" is immutable.":r?o.error=e.name+" is immutable.":o.succeeded=!0:o.error=`${e.name} does not exist in ${t.name}.`,o},s=(e,t,n)=>{const i=e===n,o=n.children.some(t=>t.name===e.name),a=t.metadata.immutable,c=n.metadata.immutable,s=-1!==t.children.findIndex(t=>t.id===e.id),u=e.type==r.EntryType.Folder&&function e(t,n){return n.children.filter(e=>e.type===r.EntryType.Folder).map(n=>n===t||e(t,n)).some(e=>!0===e)}(n,e),d={succeeded:!1,error:""};return i?d.error=`Cannot move ${e.name} to itself.`:o?d.error=`Duplicate name: ${e.name} already exists in ${n.name}.`:a?d.error=t.name+" is immutable.":c?d.error=n.name+" is immutable.":s?u?d.error=`Cannot move ${e.name} into a its own subfolder, ${n.name}.`:d.succeeded=!0:d.error=`${e.name} does not exist in ${t.name}.`,d},u=(e,t,n)=>{const i={succeeded:!1,error:""};return t.children.some((t,n,i)=>t.name===e.name&&n!==i.indexOf(t))?i.error=`Duplicate name: ${n} already exists in ${t.name}.`:i.succeeded=!0,i},d=(e,t)=>{const{succeeded:n,error:i}=a(e,t);return n?(t.children.push(e),(o=t).children.sort((e,t)=>e.name.localeCompare(t.name)),o.children.sort((e,t)=>e.type===r.EntryType.File&&t.type===r.EntryType.Folder?1:e.type===r.EntryType.Folder&&t.type===r.EntryType.File?-1:0),!0):(console.error(i),!1);var o},l=(e,t,n=!1)=>{const{succeeded:i,error:r}=c(e,t);if(i||n){const n=t.children.indexOf(e);return t.children.splice(n,1),!0}return console.error(r),!1};t.FileSystemTools={createFolder:e=>o(e,r.EntryType.Folder,(0,i.v4)(),[]),createTrash:e=>o(e,r.EntryType.Trash,(0,i.v4)(),[]),createFile:(e,t)=>o(e,r.EntryType.File,t),moveEntry:function(e,t,n){const i=s(e,t,n);if(i.succeeded){if(l(e,t,!0)){if(d(e,n))return!0;console.error(`Moving: failed to add ${e.name} to ${n.name}`)}else console.error(`Moving: failed to remove ${e.name} from ${t.name}`)}else console.error(i.error);return!1},canAddEntry:a,canRemoveEntry:c,canMoveEntry:s,canRenameEntry:u,addEntry:d,removeEntry:l,addMetadata:function(e,t){return Object.entries(t).forEach(([t,n])=>{e.metadata[t]=n}),e},removeMetadata:function(e,t){return t.forEach(t=>{delete e.metadata[t]}),e},getAllNames:e=>e.children.map(e=>e.name),renameEntry:(e,t,n)=>{const{succeeded:i,error:r}=u(e,t,n);return i?(e.name=n,!0):(console.error(r),!1)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FileSystemManager=void 0;const i=n(105),r=n(46),o=n(99),a=["SQUAREnotation-NEUMElevel"];t.FileSystemManager=()=>{function e(e){try{window.localStorage.setItem("cress-fs",JSON.stringify(e))}catch(e){return console.error(e),window.alert("Error saving file system"),!1}return!0}async function t(){try{const t=window.localStorage.getItem("cress-fs");if(t){return JSON.parse(t)}{const t=r.FileSystemTools.createFolder("Home");return function(e){const t=a.map(e=>{const t=r.FileSystemTools.createFile(e,(0,i.v4)());return r.FileSystemTools.addMetadata(t,{document:"sample",immutable:!0}),t}),n=r.FileSystemTools.createFolder("Samples");t.forEach(e=>{r.FileSystemTools.addEntry(e,n)}),r.FileSystemTools.addEntry(n,e),r.FileSystemTools.addMetadata(n,{immutable:!0})}(t),n(t),await async function(e){const t=await(0,o.fetchUploads)();return t.map(e=>r.FileSystemTools.createFile(e.name,e.id)).forEach(t=>{r.FileSystemTools.addEntry(t,e)}),e}(t),e(t),t}}catch(e){console.error(e),window.alert("Error loading file system")}}function n(e){const t=r.FileSystemTools.createTrash("Trash");r.FileSystemTools.addEntry(t,e)}return{getRoot:async function(){return await t()},setFileSystem:e,getFileSystem:t,newTrash:n}}},function(e,t,n){(function(e){var i=n(7),r=n(388),o=n(446),a=n(447).DocumentConverter,c=n(452).convertElementToRawText,s=n(453).readStyle,u=n(465).readOptions,d=n(466),l=n(23).Result;function f(e,t){return t=u(t),d.openZip(e).tap((function(e){return o.readStyleMap(e).then((function(e){t.embeddedStyleMap=e}))})).then((function(n){return r.read(n,e).then((function(e){return e.map(t.transformDocument)})).then((function(e){return function(e,t){var n=(c=t.readStyleMap(),l.combine((c||[]).map(s)).map((function(e){return e.filter((function(e){return!!e}))}))),r=i.extend({},t,{styleMap:n.value}),o=new a(r);var c;return e.flatMapThen((function(e){return n.flatMapThen((function(t){return o.convertToHtml(e)}))}))}(e,t)}))}))}t.convertToHtml=function(e,t){return f(e,t)},t.convertToMarkdown=function(e,t){var n=Object.create(t||{});return n.outputFormat="markdown",f(e,n)},t.convert=f,t.extractRawText=function(e){return d.openZip(e).then(r.read).then((function(e){return e.map(c)}))},t.images=n(283),t.transforms=n(467),t.underline=n(468),t.embedStyleMap=function(t,n){return d.openZip(t).tap((function(e){return o.writeStyleMap(e,n)})).then((function(e){return e.toArrayBuffer()})).then((function(t){return{toArrayBuffer:function(){return t},toBuffer:function(){return e.from(t)}}}))},t.readEmbeddedStyleMap=function(e){return d.openZip(e).then(o.readStyleMap)},t.styleMapping=function(){throw new Error("Use a raw string instead of mammoth.styleMapping e.g. \"p[style-name='Title'] => h1\" instead of mammoth.styleMapping(\"p[style-name='Title'] => h1\")")}}).call(this,n(100).Buffer)},function(e,t){
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
t.read=function(e,t,n,i,r){var o,a,c=8*r-i-1,s=(1<<c)-1,u=s>>1,d=-7,l=n?r-1:0,f=n?-1:1,h=e[t+l];for(l+=f,o=h&(1<<-d)-1,h>>=-d,d+=c;d>0;o=256*o+e[t+l],l+=f,d-=8);for(a=o&(1<<-d)-1,o>>=-d,d+=i;d>0;a=256*a+e[t+l],l+=f,d-=8);if(0===o)o=1-u;else{if(o===s)return a?NaN:1/0*(h?-1:1);a+=Math.pow(2,i),o-=u}return(h?-1:1)*a*Math.pow(2,o-i)},t.write=function(e,t,n,i,r,o){var a,c,s,u=8*o-r-1,d=(1<<u)-1,l=d>>1,f=23===r?Math.pow(2,-24)-Math.pow(2,-77):0,h=i?0:o-1,p=i?1:-1,g=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(c=isNaN(t)?1:0,a=d):(a=Math.floor(Math.log(t)/Math.LN2),t*(s=Math.pow(2,-a))<1&&(a--,s*=2),(t+=a+l>=1?f/s:f*Math.pow(2,1-l))*s>=2&&(a++,s/=2),a+l>=d?(c=0,a=d):a+l>=1?(c=(t*s-1)*Math.pow(2,r),a+=l):(c=t*Math.pow(2,l-1)*Math.pow(2,r),a=0));r>=8;e[n+h]=255&c,h+=p,c/=256,r-=8);for(a=a<<r|c,u+=r;u>0;e[n+h]=255&a,h+=p,a/=256,u-=8);e[n+h-p]|=128*g}},function(e,t){var n={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==n.call(e)}},function(e,t,n){t.read=function(e,t){return t=t||{},i.props({contentTypes:D(e),partPaths:y(e),docxFile:e,files:t.path?m.relativeToFile(t.path):new m(null)}).also((function(t){return{styles:(n=e,i=t.partPaths.styles,v({filename:i,readElement:h.readStylesXml,defaultValue:h.defaultStyles})(n))};var n,i})).also((function(t){return{numbering:(n=e,i=t.partPaths.numbering,r=t.styles,v({filename:i,readElement:function(e){return f.readNumberingXml(e,{styles:r})},defaultValue:f.defaultNumbering})(n))};var n,i,r})).also((function(e){return{footnotes:_(e.partPaths.footnotes,e,(function(e,t){return t?p.createFootnotesReader(e)(t):new o([])})),endnotes:_(e.partPaths.endnotes,e,(function(e,t){return t?p.createEndnotesReader(e)(t):new o([])})),comments:_(e.partPaths.comments,e,(function(e,t){return t?g.createCommentsReader(e)(t):new o([])}))}})).also((function(e){return{notes:e.footnotes.flatMap((function(t){return e.endnotes.map((function(e){return new r.Notes(t.concat(e))}))}))}})).then((function(e){return _(e.partPaths.mainDocument,e,(function(t,n){return e.notes.flatMap((function(i){return e.comments.flatMap((function(e){return new u({bodyReader:t,notes:i,comments:e}).convertXmlToDocument(n)}))}))}))}))},t._findPartPaths=y;var i=n(27),r=n(35),o=n(23).Result,a=n(276),c=n(422).readXmlFromZipFile,s=n(434).createBodyReader,u=n(438).DocumentXmlReader,d=n(439),l=n(440),f=n(441),h=n(442),p=n(443),g=n(444),m=n(445).Files;function y(e){return w(e).then((function(t){var n=b({docxFile:e,relationships:t,relationshipType:"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument",basePath:"",fallbackPath:"word/document.xml"});if(!e.exists(n))throw new Error("Could not find main document part. Are you sure this is a valid .docx file?");return v({filename:x(n),readElement:d.readRelationships,defaultValue:d.defaultValue})(e).then((function(t){function i(i){return b({docxFile:e,relationships:t,relationshipType:"http://schemas.openxmlformats.org/officeDocument/2006/relationships/"+i,basePath:a.splitPath(n).dirname,fallbackPath:"word/"+i+".xml"})}return{mainDocument:n,comments:i("comments"),endnotes:i("endnotes"),footnotes:i("footnotes"),numbering:i("numbering"),styles:i("styles")}}))}))}function b(e){var t=e.docxFile,n=e.relationships,i=e.relationshipType,r=e.basePath,o=e.fallbackPath,c=n.findTargetsByType(i).map((function(e){return t=a.joinPath(r,e),n="/",t.substring(0,n.length)===n?t.substring(n.length):t;var t,n})).filter((function(e){return t.exists(e)}));return 0===c.length?o:c[0]}function v(e){return function(t){return c(t,e.filename).then((function(t){return t?e.readElement(t):e.defaultValue}))}}function _(e,t,n){return v({filename:x(e),readElement:d.readRelationships,defaultValue:d.defaultValue})(t.docxFile).then((function(i){var r=new s({relationships:i,contentTypes:t.contentTypes,docxFile:t.docxFile,numbering:t.numbering,styles:t.styles,files:t.files});return c(t.docxFile,e).then((function(e){return n(r,e)}))}))}function x(e){var t=a.splitPath(e);return a.joinPath(t.dirname,"_rels",t.basename+".rels")}var D=v({filename:"[Content_Types].xml",readElement:l.readContentTypesFromXml,defaultValue:l.defaultContentTypes});var w=v({filename:"_rels/.rels",readElement:d.readRelationships,defaultValue:d.defaultValue})},function(e,t,n){"use strict";(function(t){e.exports=function(){var i=function(){return new p("circular promise resolution chain\n\n    See http://goo.gl/MqrFmX\n")},r=function(){return new S.PromiseInspection(this._target())},o=function(e){return S.reject(new p(e))};function a(){}var c,s={},u=n(5);c=u.isNode?function(){var e=t.domain;return void 0===e&&(e=null),e}:function(){return null},u.notEnumerableProp(S,"_getDomain",c);var d=n(40),l=n(390),f=new l;d.defineProperty(S,"_async",{value:f});var h=n(28),p=S.TypeError=h.TypeError;S.RangeError=h.RangeError;var g=S.CancellationError=h.CancellationError;S.TimeoutError=h.TimeoutError,S.OperationalError=h.OperationalError,S.RejectionError=h.OperationalError,S.AggregateError=h.AggregateError;var m=function(){},y={},b={},v=n(394)(S,m),_=n(395)(S,m,v,o,a),x=n(396)(S),D=x.create,w=n(397)(S,x),U=(w.CapturedTrace,n(398)(S,v)),T=n(399)(b),E=n(275),k=u.errorObj,C=u.tryCatch;function S(e){this._bitField=0,this._fulfillmentHandler0=void 0,this._rejectionHandler0=void 0,this._promise0=void 0,this._receiver0=void 0,e!==m&&(!function(e,t){if("function"!=typeof t)throw new p("expecting a function but got "+u.classString(t));if(e.constructor!==S)throw new p("the promise constructor cannot be invoked directly\n\n    See http://goo.gl/MqrFmX\n")}(this,e),this._resolveFromExecutor(e)),this._promiseCreated(),this._fireEvent("promiseCreated",this)}function F(e){this.promise._resolveCallback(e)}function A(e){this.promise._rejectCallback(e,!1)}function O(e){var t=new S(m);t._fulfillmentHandler0=e,t._rejectionHandler0=e,t._promise0=e,t._receiver0=e}return S.prototype.toString=function(){return"[object Promise]"},S.prototype.caught=S.prototype.catch=function(e){var t=arguments.length;if(t>1){var n,i=new Array(t-1),r=0;for(n=0;n<t-1;++n){var a=arguments[n];if(!u.isObject(a))return o("expecting an object but got A catch statement predicate "+u.classString(a));i[r++]=a}return i.length=r,e=arguments[n],this.then(void 0,T(i,e,this))}return this.then(void 0,e)},S.prototype.reflect=function(){return this._then(r,r,void 0,this,void 0)},S.prototype.then=function(e,t){if(w.warnings()&&arguments.length>0&&"function"!=typeof e&&"function"!=typeof t){var n=".then() only accepts functions but was passed: "+u.classString(e);arguments.length>1&&(n+=", "+u.classString(t)),this._warn(n)}return this._then(e,t,void 0,void 0,void 0)},S.prototype.done=function(e,t){this._then(e,t,void 0,void 0,void 0)._setIsFinal()},S.prototype.spread=function(e){return"function"!=typeof e?o("expecting a function but got "+u.classString(e)):this.all()._then(e,void 0,void 0,y,void 0)},S.prototype.toJSON=function(){var e={isFulfilled:!1,isRejected:!1,fulfillmentValue:void 0,rejectionReason:void 0};return this.isFulfilled()?(e.fulfillmentValue=this.value(),e.isFulfilled=!0):this.isRejected()&&(e.rejectionReason=this.reason(),e.isRejected=!0),e},S.prototype.all=function(){return arguments.length>0&&this._warn(".all() was passed arguments but it does not take any"),new _(this).promise()},S.prototype.error=function(e){return this.caught(u.originatesFromRejection,e)},S.getNewLibraryCopy=e.exports,S.is=function(e){return e instanceof S},S.fromNode=S.fromCallback=function(e){var t=new S(m);t._captureStackTrace();var n=arguments.length>1&&!!Object(arguments[1]).multiArgs,i=C(e)(E(t,n));return i===k&&t._rejectCallback(i.e,!0),t._isFateSealed()||t._setAsyncGuaranteed(),t},S.all=function(e){return new _(e).promise()},S.cast=function(e){var t=v(e);return t instanceof S||((t=new S(m))._captureStackTrace(),t._setFulfilled(),t._rejectionHandler0=e),t},S.resolve=S.fulfilled=S.cast,S.reject=S.rejected=function(e){var t=new S(m);return t._captureStackTrace(),t._rejectCallback(e,!0),t},S.setScheduler=function(e){if("function"!=typeof e)throw new p("expecting a function but got "+u.classString(e));return f.setScheduler(e)},S.prototype._then=function(e,t,n,i,r){var o=void 0!==r,a=o?r:new S(m),s=this._target(),d=s._bitField;o||(a._propagateFrom(this,3),a._captureStackTrace(),void 0===i&&0!=(2097152&this._bitField)&&(i=0!=(50397184&d)?this._boundValue():s===this?void 0:this._boundTo),this._fireEvent("promiseChained",this,a));var l=c();if(0!=(50397184&d)){var h,p,y=s._settlePromiseCtx;0!=(33554432&d)?(p=s._rejectionHandler0,h=e):0!=(16777216&d)?(p=s._fulfillmentHandler0,h=t,s._unsetRejectionIsUnhandled()):(y=s._settlePromiseLateCancellationObserver,p=new g("late cancellation observer"),s._attachExtraTrace(p),h=t),f.invoke(y,s,{handler:null===l?h:"function"==typeof h&&u.domainBind(l,h),promise:a,receiver:i,value:p})}else s._addCallbacks(e,t,a,i,l);return a},S.prototype._length=function(){return 65535&this._bitField},S.prototype._isFateSealed=function(){return 0!=(117506048&this._bitField)},S.prototype._isFollowing=function(){return 67108864==(67108864&this._bitField)},S.prototype._setLength=function(e){this._bitField=-65536&this._bitField|65535&e},S.prototype._setFulfilled=function(){this._bitField=33554432|this._bitField,this._fireEvent("promiseFulfilled",this)},S.prototype._setRejected=function(){this._bitField=16777216|this._bitField,this._fireEvent("promiseRejected",this)},S.prototype._setFollowing=function(){this._bitField=67108864|this._bitField,this._fireEvent("promiseResolved",this)},S.prototype._setIsFinal=function(){this._bitField=4194304|this._bitField},S.prototype._isFinal=function(){return(4194304&this._bitField)>0},S.prototype._unsetCancelled=function(){this._bitField=-65537&this._bitField},S.prototype._setCancelled=function(){this._bitField=65536|this._bitField,this._fireEvent("promiseCancelled",this)},S.prototype._setWillBeCancelled=function(){this._bitField=8388608|this._bitField},S.prototype._setAsyncGuaranteed=function(){f.hasCustomScheduler()||(this._bitField=134217728|this._bitField)},S.prototype._receiverAt=function(e){var t=0===e?this._receiver0:this[4*e-4+3];if(t!==s)return void 0===t&&this._isBound()?this._boundValue():t},S.prototype._promiseAt=function(e){return this[4*e-4+2]},S.prototype._fulfillmentHandlerAt=function(e){return this[4*e-4+0]},S.prototype._rejectionHandlerAt=function(e){return this[4*e-4+1]},S.prototype._boundValue=function(){},S.prototype._migrateCallback0=function(e){e._bitField;var t=e._fulfillmentHandler0,n=e._rejectionHandler0,i=e._promise0,r=e._receiverAt(0);void 0===r&&(r=s),this._addCallbacks(t,n,i,r,null)},S.prototype._migrateCallbackAt=function(e,t){var n=e._fulfillmentHandlerAt(t),i=e._rejectionHandlerAt(t),r=e._promiseAt(t),o=e._receiverAt(t);void 0===o&&(o=s),this._addCallbacks(n,i,r,o,null)},S.prototype._addCallbacks=function(e,t,n,i,r){var o=this._length();if(o>=65531&&(o=0,this._setLength(0)),0===o)this._promise0=n,this._receiver0=i,"function"==typeof e&&(this._fulfillmentHandler0=null===r?e:u.domainBind(r,e)),"function"==typeof t&&(this._rejectionHandler0=null===r?t:u.domainBind(r,t));else{var a=4*o-4;this[a+2]=n,this[a+3]=i,"function"==typeof e&&(this[a+0]=null===r?e:u.domainBind(r,e)),"function"==typeof t&&(this[a+1]=null===r?t:u.domainBind(r,t))}return this._setLength(o+1),o},S.prototype._proxy=function(e,t){this._addCallbacks(void 0,void 0,t,e,null)},S.prototype._resolveCallback=function(e,t){if(0==(117506048&this._bitField)){if(e===this)return this._rejectCallback(i(),!1);var n=v(e,this);if(!(n instanceof S))return this._fulfill(e);t&&this._propagateFrom(n,2);var r=n._target();if(r!==this){var o=r._bitField;if(0==(50397184&o)){var a=this._length();a>0&&r._migrateCallback0(this);for(var c=1;c<a;++c)r._migrateCallbackAt(this,c);this._setFollowing(),this._setLength(0),this._setFollowee(r)}else if(0!=(33554432&o))this._fulfill(r._value());else if(0!=(16777216&o))this._reject(r._reason());else{var s=new g("late cancellation observer");r._attachExtraTrace(s),this._reject(s)}}else this._reject(i())}},S.prototype._rejectCallback=function(e,t,n){var i=u.ensureErrorObject(e),r=i===e;if(!r&&!n&&w.warnings()){var o="a promise was rejected with a non-error: "+u.classString(e);this._warn(o,!0)}this._attachExtraTrace(i,!!t&&r),this._reject(e)},S.prototype._resolveFromExecutor=function(e){var t=this;this._captureStackTrace(),this._pushContext();var n=!0,i=this._execute(e,(function(e){t._resolveCallback(e)}),(function(e){t._rejectCallback(e,n)}));n=!1,this._popContext(),void 0!==i&&t._rejectCallback(i,!0)},S.prototype._settlePromiseFromHandler=function(e,t,n,i){var r=i._bitField;if(0==(65536&r)){var o;i._pushContext(),t===y?n&&"number"==typeof n.length?o=C(e).apply(this._boundValue(),n):(o=k).e=new p("cannot .spread() a non-array: "+u.classString(n)):o=C(e).call(t,n);var a=i._popContext();0==(65536&(r=i._bitField))&&(o===b?i._reject(n):o===k?i._rejectCallback(o.e,!1):(w.checkForgottenReturns(o,a,"",i,this),i._resolveCallback(o)))}},S.prototype._target=function(){for(var e=this;e._isFollowing();)e=e._followee();return e},S.prototype._followee=function(){return this._rejectionHandler0},S.prototype._setFollowee=function(e){this._rejectionHandler0=e},S.prototype._settlePromise=function(e,t,n,i){var o=e instanceof S,c=this._bitField,s=0!=(134217728&c);0!=(65536&c)?(o&&e._invokeInternalOnCancel(),n instanceof U&&n.isFinallyHandler()?(n.cancelPromise=e,C(t).call(n,i)===k&&e._reject(k.e)):t===r?e._fulfill(r.call(n)):n instanceof a?n._promiseCancelled(e):o||e instanceof _?e._cancel():n.cancel()):"function"==typeof t?o?(s&&e._setAsyncGuaranteed(),this._settlePromiseFromHandler(t,n,i,e)):t.call(n,i,e):n instanceof a?n._isResolved()||(0!=(33554432&c)?n._promiseFulfilled(i,e):n._promiseRejected(i,e)):o&&(s&&e._setAsyncGuaranteed(),0!=(33554432&c)?e._fulfill(i):e._reject(i))},S.prototype._settlePromiseLateCancellationObserver=function(e){var t=e.handler,n=e.promise,i=e.receiver,r=e.value;"function"==typeof t?n instanceof S?this._settlePromiseFromHandler(t,i,r,n):t.call(i,r,n):n instanceof S&&n._reject(r)},S.prototype._settlePromiseCtx=function(e){this._settlePromise(e.promise,e.handler,e.receiver,e.value)},S.prototype._settlePromise0=function(e,t,n){var i=this._promise0,r=this._receiverAt(0);this._promise0=void 0,this._receiver0=void 0,this._settlePromise(i,e,r,t)},S.prototype._clearCallbackDataAtIndex=function(e){var t=4*e-4;this[t+2]=this[t+3]=this[t+0]=this[t+1]=void 0},S.prototype._fulfill=function(e){var t=this._bitField;if(!((117506048&t)>>>16)){if(e===this){var n=i();return this._attachExtraTrace(n),this._reject(n)}this._setFulfilled(),this._rejectionHandler0=e,(65535&t)>0&&(0!=(134217728&t)?this._settlePromises():f.settlePromises(this))}},S.prototype._reject=function(e){var t=this._bitField;if(!((117506048&t)>>>16)){if(this._setRejected(),this._fulfillmentHandler0=e,this._isFinal())return f.fatalError(e,u.isNode);(65535&t)>0?f.settlePromises(this):this._ensurePossibleRejectionHandled()}},S.prototype._fulfillPromises=function(e,t){for(var n=1;n<e;n++){var i=this._fulfillmentHandlerAt(n),r=this._promiseAt(n),o=this._receiverAt(n);this._clearCallbackDataAtIndex(n),this._settlePromise(r,i,o,t)}},S.prototype._rejectPromises=function(e,t){for(var n=1;n<e;n++){var i=this._rejectionHandlerAt(n),r=this._promiseAt(n),o=this._receiverAt(n);this._clearCallbackDataAtIndex(n),this._settlePromise(r,i,o,t)}},S.prototype._settlePromises=function(){var e=this._bitField,t=65535&e;if(t>0){if(0!=(16842752&e)){var n=this._fulfillmentHandler0;this._settlePromise0(this._rejectionHandler0,n,e),this._rejectPromises(t,n)}else{var i=this._rejectionHandler0;this._settlePromise0(this._fulfillmentHandler0,i,e),this._fulfillPromises(t,i)}this._setLength(0)}this._clearCancellationData()},S.prototype._settledValue=function(){var e=this._bitField;return 0!=(33554432&e)?this._rejectionHandler0:0!=(16777216&e)?this._fulfillmentHandler0:void 0},S.defer=S.pending=function(){return w.deprecated("Promise.defer","new Promise"),{promise:new S(m),resolve:F,reject:A}},u.notEnumerableProp(S,"_makeSelfResolutionError",i),n(400)(S,m,v,o,w),n(401)(S,m,v,w),n(402)(S,_,o,w),n(403)(S),n(404)(S),n(405)(S,_,v,m,f,c),S.Promise=S,S.version="3.4.7",n(406)(S,_,o,v,m,w),n(407)(S),n(408)(S,o,v,D,m,w),n(409)(S,m,w),n(410)(S,o,m,v,a,w),n(411)(S),n(412)(S,m),n(413)(S,_,v,o),n(414)(S,m,v,o),n(415)(S,_,o,v,m,w),n(416)(S,_,w),n(417)(S,_,o),n(418)(S,m),n(419)(S,m),n(420)(S),u.toFastProperties(S),u.toFastProperties(S.prototype),O({a:1}),O({b:2}),O({c:3}),O(1),O((function(){})),O(void 0),O(!1),O(new S(m)),w.setBounds(l.firstLineError,u.lastLineError),S}}).call(this,n(18))},function(e,t,n){"use strict";(function(t){var i;try{throw new Error}catch(e){i=e}var r=n(391),o=n(393),a=n(5);function c(){this._customScheduler=!1,this._isTickUsed=!1,this._lateQueue=new o(16),this._normalQueue=new o(16),this._haveDrainedQueues=!1,this._trampolineEnabled=!0;var e=this;this.drainQueues=function(){e._drainQueues()},this._schedule=r}function s(e,t,n){this._lateQueue.push(e,t,n),this._queueTick()}function u(e,t,n){this._normalQueue.push(e,t,n),this._queueTick()}function d(e){this._normalQueue._pushOne(e),this._queueTick()}c.prototype.setScheduler=function(e){var t=this._schedule;return this._schedule=e,this._customScheduler=!0,t},c.prototype.hasCustomScheduler=function(){return this._customScheduler},c.prototype.enableTrampoline=function(){this._trampolineEnabled=!0},c.prototype.disableTrampolineIfNecessary=function(){a.hasDevTools&&(this._trampolineEnabled=!1)},c.prototype.haveItemsQueued=function(){return this._isTickUsed||this._haveDrainedQueues},c.prototype.fatalError=function(e,n){n?(t.stderr.write("Fatal "+(e instanceof Error?e.stack:e)+"\n"),t.exit(2)):this.throwLater(e)},c.prototype.throwLater=function(e,t){if(1===arguments.length&&(t=e,e=function(){throw t}),"undefined"!=typeof setTimeout)setTimeout((function(){e(t)}),0);else try{this._schedule((function(){e(t)}))}catch(e){throw new Error("No async scheduler available\n\n    See http://goo.gl/MqrFmX\n")}},a.hasDevTools?(c.prototype.invokeLater=function(e,t,n){this._trampolineEnabled?s.call(this,e,t,n):this._schedule((function(){setTimeout((function(){e.call(t,n)}),100)}))},c.prototype.invoke=function(e,t,n){this._trampolineEnabled?u.call(this,e,t,n):this._schedule((function(){e.call(t,n)}))},c.prototype.settlePromises=function(e){this._trampolineEnabled?d.call(this,e):this._schedule((function(){e._settlePromises()}))}):(c.prototype.invokeLater=s,c.prototype.invoke=u,c.prototype.settlePromises=d),c.prototype._drainQueue=function(e){for(;e.length()>0;){var t=e.shift();if("function"==typeof t){var n=e.shift(),i=e.shift();t.call(n,i)}else t._settlePromises()}},c.prototype._drainQueues=function(){this._drainQueue(this._normalQueue),this._reset(),this._haveDrainedQueues=!0,this._drainQueue(this._lateQueue)},c.prototype._queueTick=function(){this._isTickUsed||(this._isTickUsed=!0,this._schedule(this.drainQueues))},c.prototype._reset=function(){this._isTickUsed=!1},e.exports=c,e.exports.firstLineError=i}).call(this,n(18))},function(e,t,n){"use strict";(function(t,i,r){var o,a=n(5),c=a.getNativePromise();if(a.isNode&&"undefined"==typeof MutationObserver){var s=t.setImmediate,u=i.nextTick;o=a.isRecentNode?function(e){s.call(t,e)}:function(e){u.call(i,e)}}else if("function"==typeof c&&"function"==typeof c.resolve){var d=c.resolve();o=function(e){d.then(e)}}else o="undefined"==typeof MutationObserver||"undefined"!=typeof window&&window.navigator&&(window.navigator.standalone||window.cordova)?void 0!==r?function(e){r(e)}:"undefined"!=typeof setTimeout?function(e){setTimeout(e,0)}:function(){throw new Error("No async scheduler available\n\n    See http://goo.gl/MqrFmX\n")}:function(){var e=document.createElement("div"),t={attributes:!0},n=!1,i=document.createElement("div");new MutationObserver((function(){e.classList.toggle("foo"),n=!1})).observe(i,t);return function(r){var o=new MutationObserver((function(){o.disconnect(),r()}));o.observe(e,t),n||(n=!0,i.classList.toggle("foo"))}}();e.exports=o}).call(this,n(9),n(18),n(274).setImmediate)},function(e,t,n){(function(e,t){!function(e,n){"use strict";if(!e.setImmediate){var i,r,o,a,c,s=1,u={},d=!1,l=e.document,f=Object.getPrototypeOf&&Object.getPrototypeOf(e);f=f&&f.setTimeout?f:e,"[object process]"==={}.toString.call(e.process)?i=function(e){t.nextTick((function(){p(e)}))}:!function(){if(e.postMessage&&!e.importScripts){var t=!0,n=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=n,t}}()?e.MessageChannel?((o=new MessageChannel).port1.onmessage=function(e){p(e.data)},i=function(e){o.port2.postMessage(e)}):l&&"onreadystatechange"in l.createElement("script")?(r=l.documentElement,i=function(e){var t=l.createElement("script");t.onreadystatechange=function(){p(e),t.onreadystatechange=null,r.removeChild(t),t=null},r.appendChild(t)}):i=function(e){setTimeout(p,0,e)}:(a="setImmediate$"+Math.random()+"$",c=function(t){t.source===e&&"string"==typeof t.data&&0===t.data.indexOf(a)&&p(+t.data.slice(a.length))},e.addEventListener?e.addEventListener("message",c,!1):e.attachEvent("onmessage",c),i=function(t){e.postMessage(a+t,"*")}),f.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),n=0;n<t.length;n++)t[n]=arguments[n+1];var r={callback:e,args:t};return u[s]=r,i(s),s++},f.clearImmediate=h}function h(e){delete u[e]}function p(e){if(d)setTimeout(p,0,e);else{var t=u[e];if(t){d=!0;try{!function(e){var t=e.callback,n=e.args;switch(n.length){case 0:t();break;case 1:t(n[0]);break;case 2:t(n[0],n[1]);break;case 3:t(n[0],n[1],n[2]);break;default:t.apply(void 0,n)}}(t)}finally{h(e),d=!1}}}}}("undefined"==typeof self?void 0===e?this:e:self)}).call(this,n(9),n(18))},function(e,t,n){"use strict";function i(e){this._capacity=e,this._length=0,this._front=0}i.prototype._willBeOverCapacity=function(e){return this._capacity<e},i.prototype._pushOne=function(e){var t=this.length();this._checkCapacity(t+1),this[this._front+t&this._capacity-1]=e,this._length=t+1},i.prototype.push=function(e,t,n){var i=this.length()+3;if(this._willBeOverCapacity(i))return this._pushOne(e),this._pushOne(t),void this._pushOne(n);var r=this._front+i-3;this._checkCapacity(i);var o=this._capacity-1;this[r+0&o]=e,this[r+1&o]=t,this[r+2&o]=n,this._length=i},i.prototype.shift=function(){var e=this._front,t=this[e];return this[e]=void 0,this._front=e+1&this._capacity-1,this._length--,t},i.prototype.length=function(){return this._length},i.prototype._checkCapacity=function(e){this._capacity<e&&this._resizeTo(this._capacity<<1)},i.prototype._resizeTo=function(e){var t=this._capacity;this._capacity=e,function(e,t,n,i,r){for(var o=0;o<r;++o)n[o+i]=e[o+t],e[o+t]=void 0}(this,0,this,t,this._front+this._length&t-1)},e.exports=i},function(e,t,n){"use strict";e.exports=function(e,t){var i=n(5),r=i.errorObj,o=i.isObject;var a={}.hasOwnProperty;return function(n,c){if(o(n)){if(n instanceof e)return n;var s=function(e){try{return function(e){return e.then}(e)}catch(e){return r.e=e,r}}(n);if(s===r){c&&c._pushContext();var u=e.reject(s.e);return c&&c._popContext(),u}if("function"==typeof s){if(function(e){try{return a.call(e,"_promise0")}catch(e){return!1}}(n)){u=new e(t);return n._then(u._fulfill,u._reject,void 0,u,null),u}return function(n,o,a){var c=new e(t),s=c;a&&a._pushContext();c._captureStackTrace(),a&&a._popContext();var u=i.tryCatch(o).call(n,(function(e){if(!c)return;c._resolveCallback(e),c=null}),(function(e){if(!c)return;c._rejectCallback(e,!1,!0),c=null}));!1,c&&u===r&&(c._rejectCallback(u.e,!0,!0),c=null);return s}(n,s,c)}}return n}}},function(e,t,n){"use strict";e.exports=function(e,t,i,r,o){var a=n(5);a.isArray;function c(n){var i=this._promise=new e(t);n instanceof e&&i._propagateFrom(n,3),i._setOnCancel(this),this._values=n,this._length=0,this._totalResolved=0,this._init(void 0,-2)}return a.inherits(c,o),c.prototype.length=function(){return this._length},c.prototype.promise=function(){return this._promise},c.prototype._init=function t(n,o){var c=i(this._values,this._promise);if(c instanceof e){var s=(c=c._target())._bitField;if(this._values=c,0==(50397184&s))return this._promise._setAsyncGuaranteed(),c._then(t,this._reject,void 0,this,o);if(0==(33554432&s))return 0!=(16777216&s)?this._reject(c._reason()):this._cancel();c=c._value()}if(null!==(c=a.asArray(c)))0!==c.length?this._iterate(c):-5===o?this._resolveEmptyArray():this._resolve(function(e){switch(e){case-2:return[];case-3:return{}}}(o));else{var u=r("expecting an array or an iterable object but got "+a.classString(c)).reason();this._promise._rejectCallback(u,!1)}},c.prototype._iterate=function(t){var n=this.getActualLength(t.length);this._length=n,this._values=this.shouldCopyValues()?new Array(n):this._values;for(var r=this._promise,o=!1,a=null,c=0;c<n;++c){var s=i(t[c],r);a=s instanceof e?(s=s._target())._bitField:null,o?null!==a&&s.suppressUnhandledRejections():null!==a?0==(50397184&a)?(s._proxy(this,c),this._values[c]=s):o=0!=(33554432&a)?this._promiseFulfilled(s._value(),c):0!=(16777216&a)?this._promiseRejected(s._reason(),c):this._promiseCancelled(c):o=this._promiseFulfilled(s,c)}o||r._setAsyncGuaranteed()},c.prototype._isResolved=function(){return null===this._values},c.prototype._resolve=function(e){this._values=null,this._promise._fulfill(e)},c.prototype._cancel=function(){!this._isResolved()&&this._promise._isCancellable()&&(this._values=null,this._promise._cancel())},c.prototype._reject=function(e){this._values=null,this._promise._rejectCallback(e,!1)},c.prototype._promiseFulfilled=function(e,t){return this._values[t]=e,++this._totalResolved>=this._length&&(this._resolve(this._values),!0)},c.prototype._promiseCancelled=function(){return this._cancel(),!0},c.prototype._promiseRejected=function(e){return this._totalResolved++,this._reject(e),!0},c.prototype._resultCancelled=function(){if(!this._isResolved()){var t=this._values;if(this._cancel(),t instanceof e)t.cancel();else for(var n=0;n<t.length;++n)t[n]instanceof e&&t[n].cancel()}},c.prototype.shouldCopyValues=function(){return!0},c.prototype.getActualLength=function(e){return e},c}},function(e,t,n){"use strict";e.exports=function(e){var t=!1,n=[];function i(){this._trace=new i.CapturedTrace(r())}function r(){var e=n.length-1;if(e>=0)return n[e]}return e.prototype._promiseCreated=function(){},e.prototype._pushContext=function(){},e.prototype._popContext=function(){return null},e._peekContext=e.prototype._peekContext=function(){},i.prototype._pushContext=function(){void 0!==this._trace&&(this._trace._promiseCreated=null,n.push(this._trace))},i.prototype._popContext=function(){if(void 0!==this._trace){var e=n.pop(),t=e._promiseCreated;return e._promiseCreated=null,t}return null},i.CapturedTrace=null,i.create=function(){if(t)return new i},i.deactivateLongStackTraces=function(){},i.activateLongStackTraces=function(){var n=e.prototype._pushContext,o=e.prototype._popContext,a=e._peekContext,c=e.prototype._peekContext,s=e.prototype._promiseCreated;i.deactivateLongStackTraces=function(){e.prototype._pushContext=n,e.prototype._popContext=o,e._peekContext=a,e.prototype._peekContext=c,e.prototype._promiseCreated=s,t=!1},t=!0,e.prototype._pushContext=i.prototype._pushContext,e.prototype._popContext=i.prototype._popContext,e._peekContext=e.prototype._peekContext=r,e.prototype._promiseCreated=function(){var e=this._peekContext();e&&null==e._promiseCreated&&(e._promiseCreated=this)}},i}},function(e,t,n){"use strict";(function(t){e.exports=function(e,i){var r,o,a,c=e._getDomain,s=e._async,u=n(28).Warning,d=n(5),l=d.canAttachTrace,f=/[\\\/]bluebird[\\\/]js[\\\/](release|debug|instrumented)/,h=/\((?:timers\.js):\d+:\d+\)/,p=/[\/<\(](.+?):(\d+):(\d+)\)?\s*$/,g=null,m=null,y=!1,b=!(0==d.env("BLUEBIRD_DEBUG")||!d.env("BLUEBIRD_DEBUG")&&"development"!==d.env("NODE_ENV")),v=!(0==d.env("BLUEBIRD_WARNINGS")||!b&&!d.env("BLUEBIRD_WARNINGS")),_=!(0==d.env("BLUEBIRD_LONG_STACK_TRACES")||!b&&!d.env("BLUEBIRD_LONG_STACK_TRACES")),x=0!=d.env("BLUEBIRD_W_FORGOTTEN_RETURN")&&(v||!!d.env("BLUEBIRD_W_FORGOTTEN_RETURN"));e.prototype.suppressUnhandledRejections=function(){var e=this._target();e._bitField=-1048577&e._bitField|524288},e.prototype._ensurePossibleRejectionHandled=function(){0==(524288&this._bitField)&&(this._setRejectionIsUnhandled(),s.invokeLater(this._notifyUnhandledRejection,this,void 0))},e.prototype._notifyUnhandledRejectionIsHandled=function(){z("rejectionHandled",r,void 0,this)},e.prototype._setReturnedNonUndefined=function(){this._bitField=268435456|this._bitField},e.prototype._returnedNonUndefined=function(){return 0!=(268435456&this._bitField)},e.prototype._notifyUnhandledRejection=function(){if(this._isRejectionUnhandled()){var e=this._settledValue();this._setUnhandledRejectionIsNotified(),z("unhandledRejection",o,e,this)}},e.prototype._setUnhandledRejectionIsNotified=function(){this._bitField=262144|this._bitField},e.prototype._unsetUnhandledRejectionIsNotified=function(){this._bitField=-262145&this._bitField},e.prototype._isUnhandledRejectionNotified=function(){return(262144&this._bitField)>0},e.prototype._setRejectionIsUnhandled=function(){this._bitField=1048576|this._bitField},e.prototype._unsetRejectionIsUnhandled=function(){this._bitField=-1048577&this._bitField,this._isUnhandledRejectionNotified()&&(this._unsetUnhandledRejectionIsNotified(),this._notifyUnhandledRejectionIsHandled())},e.prototype._isRejectionUnhandled=function(){return(1048576&this._bitField)>0},e.prototype._warn=function(e,t,n){return P(e,t,n||this)},e.onPossiblyUnhandledRejection=function(e){var t=c();o="function"==typeof e?null===t?e:d.domainBind(t,e):void 0},e.onUnhandledRejectionHandled=function(e){var t=c();r="function"==typeof e?null===t?e:d.domainBind(t,e):void 0};var D=function(){};e.longStackTraces=function(){if(s.haveItemsQueued()&&!X.longStackTraces)throw new Error("cannot enable long stack traces after promises have been created\n\n    See http://goo.gl/MqrFmX\n");if(!X.longStackTraces&&H()){var t=e.prototype._captureStackTrace,n=e.prototype._attachExtraTrace;X.longStackTraces=!0,D=function(){if(s.haveItemsQueued()&&!X.longStackTraces)throw new Error("cannot enable long stack traces after promises have been created\n\n    See http://goo.gl/MqrFmX\n");e.prototype._captureStackTrace=t,e.prototype._attachExtraTrace=n,i.deactivateLongStackTraces(),s.enableTrampoline(),X.longStackTraces=!1},e.prototype._captureStackTrace=L,e.prototype._attachExtraTrace=R,i.activateLongStackTraces(),s.disableTrampolineIfNecessary()}},e.hasLongStackTraces=function(){return X.longStackTraces&&H()};var w=function(){try{if("function"==typeof CustomEvent){var e=new CustomEvent("CustomEvent");return d.global.dispatchEvent(e),function(e,t){var n=new CustomEvent(e.toLowerCase(),{detail:t,cancelable:!0});return!d.global.dispatchEvent(n)}}if("function"==typeof Event){e=new Event("CustomEvent");return d.global.dispatchEvent(e),function(e,t){var n=new Event(e.toLowerCase(),{cancelable:!0});return n.detail=t,!d.global.dispatchEvent(n)}}return(e=document.createEvent("CustomEvent")).initCustomEvent("testingtheevent",!1,!0,{}),d.global.dispatchEvent(e),function(e,t){var n=document.createEvent("CustomEvent");return n.initCustomEvent(e.toLowerCase(),!1,!0,t),!d.global.dispatchEvent(n)}}catch(e){}return function(){return!1}}(),U=d.isNode?function(){return t.emit.apply(t,arguments)}:d.global?function(e){var t="on"+e.toLowerCase(),n=d.global[t];return!!n&&(n.apply(d.global,[].slice.call(arguments,1)),!0)}:function(){return!1};function T(e,t){return{promise:t}}var E={promiseCreated:T,promiseFulfilled:T,promiseRejected:T,promiseResolved:T,promiseCancelled:T,promiseChained:function(e,t,n){return{promise:t,child:n}},warning:function(e,t){return{warning:t}},unhandledRejection:function(e,t,n){return{reason:t,promise:n}},rejectionHandled:T},k=function(e){var t=!1;try{t=U.apply(null,arguments)}catch(e){s.throwLater(e),t=!0}var n=!1;try{n=w(e,E[e].apply(null,arguments))}catch(e){s.throwLater(e),n=!0}return n||t};function C(){return!1}function S(e,t,n){var i=this;try{e(t,n,(function(e){if("function"!=typeof e)throw new TypeError("onCancel must be a function, got: "+d.toString(e));i._attachCancellationCallback(e)}))}catch(e){return e}}function F(e){if(!this._isCancellable())return this;var t=this._onCancel();void 0!==t?d.isArray(t)?t.push(e):this._setOnCancel([t,e]):this._setOnCancel(e)}function A(){return this._onCancelField}function O(e){this._onCancelField=e}function W(){this._cancellationParent=void 0,this._onCancelField=void 0}function B(e,t){if(0!=(1&t)){this._cancellationParent=e;var n=e._branchesRemainingToCancel;void 0===n&&(n=0),e._branchesRemainingToCancel=n+1}0!=(2&t)&&e._isBound()&&this._setBoundTo(e._boundTo)}e.config=function(t){if("longStackTraces"in(t=Object(t))&&(t.longStackTraces?e.longStackTraces():!t.longStackTraces&&e.hasLongStackTraces()&&D()),"warnings"in t){var n=t.warnings;X.warnings=!!n,x=X.warnings,d.isObject(n)&&"wForgottenReturn"in n&&(x=!!n.wForgottenReturn)}if("cancellation"in t&&t.cancellation&&!X.cancellation){if(s.haveItemsQueued())throw new Error("cannot enable cancellation after promises are in use");e.prototype._clearCancellationData=W,e.prototype._propagateFrom=B,e.prototype._onCancel=A,e.prototype._setOnCancel=O,e.prototype._attachCancellationCallback=F,e.prototype._execute=S,I=B,X.cancellation=!0}return"monitoring"in t&&(t.monitoring&&!X.monitoring?(X.monitoring=!0,e.prototype._fireEvent=k):!t.monitoring&&X.monitoring&&(X.monitoring=!1,e.prototype._fireEvent=C)),e},e.prototype._fireEvent=C,e.prototype._execute=function(e,t,n){try{e(t,n)}catch(e){return e}},e.prototype._onCancel=function(){},e.prototype._setOnCancel=function(e){},e.prototype._attachCancellationCallback=function(e){},e.prototype._captureStackTrace=function(){},e.prototype._attachExtraTrace=function(){},e.prototype._clearCancellationData=function(){},e.prototype._propagateFrom=function(e,t){};var I=function(e,t){0!=(2&t)&&e._isBound()&&this._setBoundTo(e._boundTo)};function N(){var t=this._boundTo;return void 0!==t&&t instanceof e?t.isFulfilled()?t.value():void 0:t}function L(){this._trace=new Y(this._peekContext())}function R(e,t){if(l(e)){var n=this._trace;if(void 0!==n&&t&&(n=n._parent),void 0!==n)n.attachExtraTrace(e);else if(!e.__stackCleaned__){var i=q(e);d.notEnumerableProp(e,"stack",i.message+"\n"+i.stack.join("\n")),d.notEnumerableProp(e,"__stackCleaned__",!0)}}}function P(t,n,i){if(X.warnings){var r,o=new u(t);if(n)i._attachExtraTrace(o);else if(X.longStackTraces&&(r=e._peekContext()))r.attachExtraTrace(o);else{var a=q(o);o.stack=a.message+"\n"+a.stack.join("\n")}k("warning",o)||M(o,"",!0)}}function j(e){for(var t=[],n=0;n<e.length;++n){var i=e[n],r="    (No stack trace)"===i||g.test(i),o=r&&$(i);r&&!o&&(y&&" "!==i.charAt(0)&&(i="    "+i),t.push(i))}return t}function q(e){var t=e.stack,n=e.toString();return t="string"==typeof t&&t.length>0?function(e){for(var t=e.stack.replace(/\s+$/g,"").split("\n"),n=0;n<t.length;++n){var i=t[n];if("    (No stack trace)"===i||g.test(i))break}return n>0&&"SyntaxError"!=e.name&&(t=t.slice(n)),t}(e):["    (No stack trace)"],{message:n,stack:"SyntaxError"==e.name?t:j(t)}}function M(e,t,n){if("undefined"!=typeof console){var i;if(d.isObject(e)){var r=e.stack;i=t+m(r,e)}else i=t+String(e);"function"==typeof a?a(i,n):"function"!=typeof console.log&&"object"!=typeof console.log||console.log(i)}}function z(e,t,n,i){var r=!1;try{"function"==typeof t&&(r=!0,"rejectionHandled"===e?t(i):t(n,i))}catch(e){s.throwLater(e)}"unhandledRejection"===e?k(e,n,i)||r||M(n,"Unhandled rejection "):k(e,i)}function V(e){var t;if("function"==typeof e)t="[function "+(e.name||"anonymous")+"]";else{t=e&&"function"==typeof e.toString?e.toString():d.toString(e);if(/\[object [a-zA-Z0-9$_]+\]/.test(t))try{t=JSON.stringify(e)}catch(e){}0===t.length&&(t="(empty array)")}return"(<"+function(e){if(e.length<41)return e;return e.substr(0,38)+"..."}(t)+">, no stack trace)"}function H(){return"function"==typeof Z}var $=function(){return!1},G=/[\/<\(]([^:\/]+):(\d+):(?:\d+)\)?\s*$/;function K(e){var t=e.match(G);if(t)return{fileName:t[1],line:parseInt(t[2],10)}}function Y(e){this._parent=e,this._promisesCreated=0;var t=this._length=1+(void 0===e?0:e._length);Z(this,Y),t>32&&this.uncycle()}d.inherits(Y,Error),i.CapturedTrace=Y,Y.prototype.uncycle=function(){var e=this._length;if(!(e<2)){for(var t=[],n={},i=0,r=this;void 0!==r;++i)t.push(r),r=r._parent;for(i=(e=this._length=i)-1;i>=0;--i){var o=t[i].stack;void 0===n[o]&&(n[o]=i)}for(i=0;i<e;++i){var a=n[t[i].stack];if(void 0!==a&&a!==i){a>0&&(t[a-1]._parent=void 0,t[a-1]._length=1),t[i]._parent=void 0,t[i]._length=1;var c=i>0?t[i-1]:this;a<e-1?(c._parent=t[a+1],c._parent.uncycle(),c._length=c._parent._length+1):(c._parent=void 0,c._length=1);for(var s=c._length+1,u=i-2;u>=0;--u)t[u]._length=s,s++;return}}}},Y.prototype.attachExtraTrace=function(e){if(!e.__stackCleaned__){this.uncycle();for(var t=q(e),n=t.message,i=[t.stack],r=this;void 0!==r;)i.push(j(r.stack.split("\n"))),r=r._parent;!function(e){for(var t=e[0],n=1;n<e.length;++n){for(var i=e[n],r=t.length-1,o=t[r],a=-1,c=i.length-1;c>=0;--c)if(i[c]===o){a=c;break}for(c=a;c>=0;--c){var s=i[c];if(t[r]!==s)break;t.pop(),r--}t=i}}(i),function(e){for(var t=0;t<e.length;++t)(0===e[t].length||t+1<e.length&&e[t][0]===e[t+1][0])&&(e.splice(t,1),t--)}(i),d.notEnumerableProp(e,"stack",function(e,t){for(var n=0;n<t.length-1;++n)t[n].push("From previous event:"),t[n]=t[n].join("\n");return n<t.length&&(t[n]=t[n].join("\n")),e+"\n"+t.join("\n")}(n,i)),d.notEnumerableProp(e,"__stackCleaned__",!0)}};var Z=function(){var e=/^\s*at\s*/,t=function(e,t){return"string"==typeof e?e:void 0!==t.name&&void 0!==t.message?t.toString():V(t)};if("number"==typeof Error.stackTraceLimit&&"function"==typeof Error.captureStackTrace){Error.stackTraceLimit+=6,g=e,m=t;var n=Error.captureStackTrace;return $=function(e){return f.test(e)},function(e,t){Error.stackTraceLimit+=6,n(e,t),Error.stackTraceLimit-=6}}var i,r=new Error;if("string"==typeof r.stack&&r.stack.split("\n")[0].indexOf("stackDetection@")>=0)return g=/@/,m=t,y=!0,function(e){e.stack=(new Error).stack};try{throw new Error}catch(e){i="stack"in e}return!("stack"in r)&&i&&"number"==typeof Error.stackTraceLimit?(g=e,m=t,function(e){Error.stackTraceLimit+=6;try{throw new Error}catch(t){e.stack=t.stack}Error.stackTraceLimit-=6}):(m=function(e,t){return"string"==typeof e?e:"object"!=typeof t&&"function"!=typeof t||void 0===t.name||void 0===t.message?V(t):t.toString()},null)}();"undefined"!=typeof console&&void 0!==console.warn&&(a=function(e){console.warn(e)},d.isNode&&t.stderr.isTTY?a=function(e,t){var n=t?"[33m":"[31m";console.warn(n+e+"[0m\n")}:d.isNode||"string"!=typeof(new Error).stack||(a=function(e,t){console.warn("%c"+e,t?"color: darkorange":"color: red")}));var X={warnings:v,longStackTraces:!1,cancellation:!1,monitoring:!1};return _&&e.longStackTraces(),{longStackTraces:function(){return X.longStackTraces},warnings:function(){return X.warnings},cancellation:function(){return X.cancellation},monitoring:function(){return X.monitoring},propagateFromFunction:function(){return I},boundValueFunction:function(){return N},checkForgottenReturns:function(e,t,n,i,r){if(void 0===e&&null!==t&&x){if(void 0!==r&&r._returnedNonUndefined())return;if(0==(65535&i._bitField))return;n&&(n+=" ");var o="",a="";if(t._trace){for(var c=t._trace.stack.split("\n"),s=j(c),u=s.length-1;u>=0;--u){var d=s[u];if(!h.test(d)){var l=d.match(p);l&&(o="at "+l[1]+":"+l[2]+":"+l[3]+" ");break}}if(s.length>0){var f=s[0];for(u=0;u<c.length;++u)if(c[u]===f){u>0&&(a="\n"+c[u-1]);break}}}var g="a promise was created in a "+n+"handler "+o+"but was not returned from it, see http://goo.gl/rRqMUw"+a;i._warn(g,!0,t)}},setBounds:function(e,t){if(H()){for(var n,i,r=e.stack.split("\n"),o=t.stack.split("\n"),a=-1,c=-1,s=0;s<r.length;++s){if(u=K(r[s])){n=u.fileName,a=u.line;break}}for(s=0;s<o.length;++s){var u;if(u=K(o[s])){i=u.fileName,c=u.line;break}}a<0||c<0||!n||!i||n!==i||a>=c||($=function(e){if(f.test(e))return!0;var t=K(e);return!!(t&&t.fileName===n&&a<=t.line&&t.line<=c)})}},warn:P,deprecated:function(e,t){var n=e+" is deprecated and will be removed in a future version.";return t&&(n+=" Use "+t+" instead."),P(n)},CapturedTrace:Y,fireDomEvent:w,fireGlobalEvent:U}}}).call(this,n(18))},function(e,t,n){"use strict";e.exports=function(e,t){var i=n(5),r=e.CancellationError,o=i.errorObj;function a(e,t,n){this.promise=e,this.type=t,this.handler=n,this.called=!1,this.cancelPromise=null}function c(e){this.finallyHandler=e}function s(e,t){return null!=e.cancelPromise&&(arguments.length>1?e.cancelPromise._reject(t):e.cancelPromise._cancel(),e.cancelPromise=null,!0)}function u(){return l.call(this,this.promise._target()._settledValue())}function d(e){if(!s(this,e))return o.e=e,o}function l(n){var i=this.promise,a=this.handler;if(!this.called){this.called=!0;var l=this.isFinallyHandler()?a.call(i._boundValue()):a.call(i._boundValue(),n);if(void 0!==l){i._setReturnedNonUndefined();var f=t(l,i);if(f instanceof e){if(null!=this.cancelPromise){if(f._isCancelled()){var h=new r("late cancellation observer");return i._attachExtraTrace(h),o.e=h,o}f.isPending()&&f._attachCancellationCallback(new c(this))}return f._then(u,d,void 0,this,void 0)}}}return i.isRejected()?(s(this),o.e=n,o):(s(this),n)}return a.prototype.isFinallyHandler=function(){return 0===this.type},c.prototype._resultCancelled=function(){s(this.finallyHandler)},e.prototype._passThrough=function(e,t,n,i){return"function"!=typeof e?this.then():this._then(n,i,void 0,new a(this,t,e),void 0)},e.prototype.lastly=e.prototype.finally=function(e){return this._passThrough(e,0,l,l)},e.prototype.tap=function(e){return this._passThrough(e,1,l)},a}},function(e,t,n){"use strict";e.exports=function(e){var t=n(5),i=n(40).keys,r=t.tryCatch,o=t.errorObj;return function(n,a,c){return function(s){var u=c._boundValue();e:for(var d=0;d<n.length;++d){var l=n[d];if(l===Error||null!=l&&l.prototype instanceof Error){if(s instanceof l)return r(a).call(u,s)}else if("function"==typeof l){var f=r(l).call(u,s);if(f===o)return f;if(f)return r(a).call(u,s)}else if(t.isObject(s)){for(var h=i(l),p=0;p<h.length;++p){var g=h[p];if(l[g]!=s[g])continue e}return r(a).call(u,s)}}return e}}}},function(e,t,n){"use strict";e.exports=function(e,t,i,r,o){var a=n(5),c=a.tryCatch;e.method=function(n){if("function"!=typeof n)throw new e.TypeError("expecting a function but got "+a.classString(n));return function(){var i=new e(t);i._captureStackTrace(),i._pushContext();var r=c(n).apply(this,arguments),a=i._popContext();return o.checkForgottenReturns(r,a,"Promise.method",i),i._resolveFromSyncValue(r),i}},e.attempt=e.try=function(n){if("function"!=typeof n)return r("expecting a function but got "+a.classString(n));var i,s=new e(t);if(s._captureStackTrace(),s._pushContext(),arguments.length>1){o.deprecated("calling Promise.try with more than 1 argument");var u=arguments[1],d=arguments[2];i=a.isArray(u)?c(n).apply(d,u):c(n).call(d,u)}else i=c(n)();var l=s._popContext();return o.checkForgottenReturns(i,l,"Promise.try",s),s._resolveFromSyncValue(i),s},e.prototype._resolveFromSyncValue=function(e){e===a.errorObj?this._rejectCallback(e.e,!1):this._resolveCallback(e,!0)}}},function(e,t,n){"use strict";e.exports=function(e,t,n,i){var r=!1,o=function(e,t){this._reject(t)},a=function(e,t){t.promiseRejectionQueued=!0,t.bindingPromise._then(o,o,null,this,e)},c=function(e,t){0==(50397184&this._bitField)&&this._resolveCallback(t.target)},s=function(e,t){t.promiseRejectionQueued||this._reject(e)};e.prototype.bind=function(o){r||(r=!0,e.prototype._propagateFrom=i.propagateFromFunction(),e.prototype._boundValue=i.boundValueFunction());var u=n(o),d=new e(t);d._propagateFrom(this,1);var l=this._target();if(d._setBoundTo(u),u instanceof e){var f={promiseRejectionQueued:!1,promise:d,target:l,bindingPromise:u};l._then(t,a,void 0,d,f),u._then(c,s,void 0,d,f),d._setOnCancel(u)}else d._resolveCallback(l);return d},e.prototype._setBoundTo=function(e){void 0!==e?(this._bitField=2097152|this._bitField,this._boundTo=e):this._bitField=-2097153&this._bitField},e.prototype._isBound=function(){return 2097152==(2097152&this._bitField)},e.bind=function(t,n){return e.resolve(n).bind(t)}}},function(e,t,n){"use strict";e.exports=function(e,t,i,r){var o=n(5),a=o.tryCatch,c=o.errorObj,s=e._async;e.prototype.break=e.prototype.cancel=function(){if(!r.cancellation())return this._warn("cancellation is disabled");for(var e=this,t=e;e._isCancellable();){if(!e._cancelBy(t)){t._isFollowing()?t._followee().cancel():t._cancelBranched();break}var n=e._cancellationParent;if(null==n||!n._isCancellable()){e._isFollowing()?e._followee().cancel():e._cancelBranched();break}e._isFollowing()&&e._followee().cancel(),e._setWillBeCancelled(),t=e,e=n}},e.prototype._branchHasCancelled=function(){this._branchesRemainingToCancel--},e.prototype._enoughBranchesHaveCancelled=function(){return void 0===this._branchesRemainingToCancel||this._branchesRemainingToCancel<=0},e.prototype._cancelBy=function(e){return e===this?(this._branchesRemainingToCancel=0,this._invokeOnCancel(),!0):(this._branchHasCancelled(),!!this._enoughBranchesHaveCancelled()&&(this._invokeOnCancel(),!0))},e.prototype._cancelBranched=function(){this._enoughBranchesHaveCancelled()&&this._cancel()},e.prototype._cancel=function(){this._isCancellable()&&(this._setCancelled(),s.invoke(this._cancelPromises,this,void 0))},e.prototype._cancelPromises=function(){this._length()>0&&this._settlePromises()},e.prototype._unsetOnCancel=function(){this._onCancelField=void 0},e.prototype._isCancellable=function(){return this.isPending()&&!this._isCancelled()},e.prototype.isCancellable=function(){return this.isPending()&&!this.isCancelled()},e.prototype._doInvokeOnCancel=function(e,t){if(o.isArray(e))for(var n=0;n<e.length;++n)this._doInvokeOnCancel(e[n],t);else if(void 0!==e)if("function"==typeof e){if(!t){var i=a(e).call(this._boundValue());i===c&&(this._attachExtraTrace(i.e),s.throwLater(i.e))}}else e._resultCancelled(this)},e.prototype._invokeOnCancel=function(){var e=this._onCancel();this._unsetOnCancel(),s.invoke(this._doInvokeOnCancel,this,e)},e.prototype._invokeInternalOnCancel=function(){this._isCancellable()&&(this._doInvokeOnCancel(this._onCancel(),!0),this._unsetOnCancel())},e.prototype._resultCancelled=function(){this.cancel()}}},function(e,t,n){"use strict";e.exports=function(e){function t(){return this.value}function n(){throw this.reason}e.prototype.return=e.prototype.thenReturn=function(n){return n instanceof e&&n.suppressUnhandledRejections(),this._then(t,void 0,void 0,{value:n},void 0)},e.prototype.throw=e.prototype.thenThrow=function(e){return this._then(n,void 0,void 0,{reason:e},void 0)},e.prototype.catchThrow=function(e){if(arguments.length<=1)return this._then(void 0,n,void 0,{reason:e},void 0);var t=arguments[1],i=function(){throw t};return this.caught(e,i)},e.prototype.catchReturn=function(n){if(arguments.length<=1)return n instanceof e&&n.suppressUnhandledRejections(),this._then(void 0,t,void 0,{value:n},void 0);var i=arguments[1];i instanceof e&&i.suppressUnhandledRejections();var r=function(){return i};return this.caught(n,r)}}},function(e,t,n){"use strict";e.exports=function(e){function t(e){void 0!==e?(e=e._target(),this._bitField=e._bitField,this._settledValueField=e._isFateSealed()?e._settledValue():void 0):(this._bitField=0,this._settledValueField=void 0)}t.prototype._settledValue=function(){return this._settledValueField};var n=t.prototype.value=function(){if(!this.isFulfilled())throw new TypeError("cannot get fulfillment value of a non-fulfilled promise\n\n    See http://goo.gl/MqrFmX\n");return this._settledValue()},i=t.prototype.error=t.prototype.reason=function(){if(!this.isRejected())throw new TypeError("cannot get rejection reason of a non-rejected promise\n\n    See http://goo.gl/MqrFmX\n");return this._settledValue()},r=t.prototype.isFulfilled=function(){return 0!=(33554432&this._bitField)},o=t.prototype.isRejected=function(){return 0!=(16777216&this._bitField)},a=t.prototype.isPending=function(){return 0==(50397184&this._bitField)},c=t.prototype.isResolved=function(){return 0!=(50331648&this._bitField)};t.prototype.isCancelled=function(){return 0!=(8454144&this._bitField)},e.prototype.__isCancelled=function(){return 65536==(65536&this._bitField)},e.prototype._isCancelled=function(){return this._target().__isCancelled()},e.prototype.isCancelled=function(){return 0!=(8454144&this._target()._bitField)},e.prototype.isPending=function(){return a.call(this._target())},e.prototype.isRejected=function(){return o.call(this._target())},e.prototype.isFulfilled=function(){return r.call(this._target())},e.prototype.isResolved=function(){return c.call(this._target())},e.prototype.value=function(){return n.call(this._target())},e.prototype.reason=function(){var e=this._target();return e._unsetRejectionIsUnhandled(),i.call(e)},e.prototype._value=function(){return this._settledValue()},e.prototype._reason=function(){return this._unsetRejectionIsUnhandled(),this._settledValue()},e.PromiseInspection=t}},function(e,t,n){"use strict";e.exports=function(e,t,i,r,o,a){var c,s=n(5),u=s.canEvaluate,d=s.tryCatch,l=s.errorObj;if(u){for(var f=function(e){return new Function("value","holder","                             \n            'use strict';                                                    \n            holder.pIndex = value;                                           \n            holder.checkFulfillment(this);                                   \n            ".replace(/Index/g,e))},h=function(e){return new Function("promise","holder","                           \n            'use strict';                                                    \n            holder.pIndex = promise;                                         \n            ".replace(/Index/g,e))},p=function(t){for(var n=new Array(t),i=0;i<n.length;++i)n[i]="this.p"+(i+1);var r=n.join(" = ")+" = null;",a="var promise;\n"+n.map((function(e){return"                                                         \n                promise = "+e+";                                      \n                if (promise instanceof Promise) {                            \n                    promise.cancel();                                        \n                }                                                            \n            "})).join("\n"),c=n.join(", "),s="Holder$"+t,u="return function(tryCatch, errorObj, Promise, async) {    \n            'use strict';                                                    \n            function [TheName](fn) {                                         \n                [TheProperties]                                              \n                this.fn = fn;                                                \n                this.asyncNeeded = true;                                     \n                this.now = 0;                                                \n            }                                                                \n                                                                             \n            [TheName].prototype._callFunction = function(promise) {          \n                promise._pushContext();                                      \n                var ret = tryCatch(this.fn)([ThePassedArguments]);           \n                promise._popContext();                                       \n                if (ret === errorObj) {                                      \n                    promise._rejectCallback(ret.e, false);                   \n                } else {                                                     \n                    promise._resolveCallback(ret);                           \n                }                                                            \n            };                                                               \n                                                                             \n            [TheName].prototype.checkFulfillment = function(promise) {       \n                var now = ++this.now;                                        \n                if (now === [TheTotal]) {                                    \n                    if (this.asyncNeeded) {                                  \n                        async.invoke(this._callFunction, this, promise);     \n                    } else {                                                 \n                        this._callFunction(promise);                         \n                    }                                                        \n                                                                             \n                }                                                            \n            };                                                               \n                                                                             \n            [TheName].prototype._resultCancelled = function() {              \n                [CancellationCode]                                           \n            };                                                               \n                                                                             \n            return [TheName];                                                \n        }(tryCatch, errorObj, Promise, async);                               \n        ";return u=u.replace(/\[TheName\]/g,s).replace(/\[TheTotal\]/g,t).replace(/\[ThePassedArguments\]/g,c).replace(/\[TheProperties\]/g,r).replace(/\[CancellationCode\]/g,a),new Function("tryCatch","errorObj","Promise","async",u)(d,l,e,o)},g=[],m=[],y=[],b=0;b<8;++b)g.push(p(b+1)),m.push(f(b+1)),y.push(h(b+1));c=function(e){this._reject(e)}}e.join=function(){var n,o=arguments.length-1;if(o>0&&"function"==typeof arguments[o]&&(n=arguments[o],o<=8&&u)){(w=new e(r))._captureStackTrace();for(var d=g[o-1],l=new d(n),f=m,h=0;h<o;++h){var p=i(arguments[h],w);if(p instanceof e){var b=(p=p._target())._bitField;0==(50397184&b)?(p._then(f[h],c,void 0,w,l),y[h](p,l),l.asyncNeeded=!1):0!=(33554432&b)?f[h].call(w,p._value(),l):0!=(16777216&b)?w._reject(p._reason()):w._cancel()}else f[h].call(w,p,l)}if(!w._isFateSealed()){if(l.asyncNeeded){var v=a();null!==v&&(l.fn=s.domainBind(v,l.fn))}w._setAsyncGuaranteed(),w._setOnCancel(l)}return w}for(var _=arguments.length,x=new Array(_),D=0;D<_;++D)x[D]=arguments[D];n&&x.pop();var w=new t(x).promise();return void 0!==n?w.spread(n):w}}},function(e,t,n){"use strict";e.exports=function(e,t,i,r,o,a){var c=e._getDomain,s=n(5),u=s.tryCatch,d=s.errorObj,l=e._async;function f(e,t,n,i){this.constructor$(e),this._promise._captureStackTrace();var r=c();this._callback=null===r?t:s.domainBind(r,t),this._preservedValues=i===o?new Array(this.length()):null,this._limit=n,this._inFlight=0,this._queue=[],l.invoke(this._asyncInit,this,void 0)}function h(t,n,r,o){if("function"!=typeof n)return i("expecting a function but got "+s.classString(n));var a=0;if(void 0!==r){if("object"!=typeof r||null===r)return e.reject(new TypeError("options argument must be an object but it is "+s.classString(r)));if("number"!=typeof r.concurrency)return e.reject(new TypeError("'concurrency' must be a number but it is "+s.classString(r.concurrency)));a=r.concurrency}return new f(t,n,a="number"==typeof a&&isFinite(a)&&a>=1?a:0,o).promise()}s.inherits(f,t),f.prototype._asyncInit=function(){this._init$(void 0,-2)},f.prototype._init=function(){},f.prototype._promiseFulfilled=function(t,n){var i=this._values,o=this.length(),c=this._preservedValues,s=this._limit;if(n<0){if(i[n=-1*n-1]=t,s>=1&&(this._inFlight--,this._drainQueue(),this._isResolved()))return!0}else{if(s>=1&&this._inFlight>=s)return i[n]=t,this._queue.push(n),!1;null!==c&&(c[n]=t);var l=this._promise,f=this._callback,h=l._boundValue();l._pushContext();var p=u(f).call(h,t,n,o),g=l._popContext();if(a.checkForgottenReturns(p,g,null!==c?"Promise.filter":"Promise.map",l),p===d)return this._reject(p.e),!0;var m=r(p,this._promise);if(m instanceof e){var y=(m=m._target())._bitField;if(0==(50397184&y))return s>=1&&this._inFlight++,i[n]=m,m._proxy(this,-1*(n+1)),!1;if(0==(33554432&y))return 0!=(16777216&y)?(this._reject(m._reason()),!0):(this._cancel(),!0);p=m._value()}i[n]=p}return++this._totalResolved>=o&&(null!==c?this._filter(i,c):this._resolve(i),!0)},f.prototype._drainQueue=function(){for(var e=this._queue,t=this._limit,n=this._values;e.length>0&&this._inFlight<t;){if(this._isResolved())return;var i=e.pop();this._promiseFulfilled(n[i],i)}},f.prototype._filter=function(e,t){for(var n=t.length,i=new Array(n),r=0,o=0;o<n;++o)e[o]&&(i[r++]=t[o]);i.length=r,this._resolve(i)},f.prototype.preservedValues=function(){return this._preservedValues},e.prototype.map=function(e,t){return h(this,e,t,null)},e.map=function(e,t,n,i){return h(e,t,n,i)}}},function(e,t,n){"use strict";var i=Object.create;if(i){var r=i(null),o=i(null);r[" size"]=o[" size"]=0}e.exports=function(e){var t,i,a=n(5),c=a.canEvaluate,s=a.isIdentifier,u=function(e){return new Function("ensureMethod","                                    \n        return function(obj) {                                               \n            'use strict'                                                     \n            var len = this.length;                                           \n            ensureMethod(obj, 'methodName');                                 \n            switch(len) {                                                    \n                case 1: return obj.methodName(this[0]);                      \n                case 2: return obj.methodName(this[0], this[1]);             \n                case 3: return obj.methodName(this[0], this[1], this[2]);    \n                case 0: return obj.methodName();                             \n                default:                                                     \n                    return obj.methodName.apply(obj, this);                  \n            }                                                                \n        };                                                                   \n        ".replace(/methodName/g,e))(f)},d=function(e){return new Function("obj","                                             \n        'use strict';                                                        \n        return obj.propertyName;                                             \n        ".replace("propertyName",e))},l=function(e,t,n){var i=n[e];if("function"!=typeof i){if(!s(e))return null;if(i=t(e),n[e]=i,n[" size"]++,n[" size"]>512){for(var r=Object.keys(n),o=0;o<256;++o)delete n[r[o]];n[" size"]=r.length-256}}return i};function f(t,n){var i;if(null!=t&&(i=t[n]),"function"!=typeof i){var r="Object "+a.classString(t)+" has no method '"+a.toString(n)+"'";throw new e.TypeError(r)}return i}function h(e){return f(e,this.pop()).apply(e,this)}function p(e){return e[this]}function g(e){var t=+this;return t<0&&(t=Math.max(0,t+e.length)),e[t]}t=function(e){return l(e,u,r)},i=function(e){return l(e,d,o)},e.prototype.call=function(e){for(var n=arguments.length,i=new Array(Math.max(n-1,0)),r=1;r<n;++r)i[r-1]=arguments[r];if(c){var o=t(e);if(null!==o)return this._then(o,void 0,void 0,i,void 0)}return i.push(e),this._then(h,void 0,void 0,i,void 0)},e.prototype.get=function(e){var t;if("number"==typeof e)t=g;else if(c){var n=i(e);t=null!==n?n:p}else t=p;return this._then(t,void 0,void 0,e,void 0)}}},function(e,t,n){"use strict";e.exports=function(e,t,i,r,o,a){var c=n(5),s=n(28).TypeError,u=n(5).inherits,d=c.errorObj,l=c.tryCatch,f={};function h(e){setTimeout((function(){throw e}),0)}function p(t,n){var r=0,a=t.length,c=new e(o);return function o(){if(r>=a)return c._fulfill();var s=function(e){var t=i(e);return t!==e&&"function"==typeof e._isDisposable&&"function"==typeof e._getDisposer&&e._isDisposable()&&t._setDisposable(e._getDisposer()),t}(t[r++]);if(s instanceof e&&s._isDisposable()){try{s=i(s._getDisposer().tryDispose(n),t.promise)}catch(e){return h(e)}if(s instanceof e)return s._then(o,h,null,null,null)}o()}(),c}function g(e,t,n){this._data=e,this._promise=t,this._context=n}function m(e,t,n){this.constructor$(e,t,n)}function y(e){return g.isDisposer(e)?(this.resources[this.index]._setDisposable(e),e.promise()):e}function b(e){this.length=e,this.promise=null,this[e-1]=null}g.prototype.data=function(){return this._data},g.prototype.promise=function(){return this._promise},g.prototype.resource=function(){return this.promise().isFulfilled()?this.promise().value():f},g.prototype.tryDispose=function(e){var t=this.resource(),n=this._context;void 0!==n&&n._pushContext();var i=t!==f?this.doDispose(t,e):null;return void 0!==n&&n._popContext(),this._promise._unsetDisposable(),this._data=null,i},g.isDisposer=function(e){return null!=e&&"function"==typeof e.resource&&"function"==typeof e.tryDispose},u(m,g),m.prototype.doDispose=function(e,t){return this.data().call(e,e,t)},b.prototype._resultCancelled=function(){for(var t=this.length,n=0;n<t;++n){var i=this[n];i instanceof e&&i.cancel()}},e.using=function(){var n=arguments.length;if(n<2)return t("you must pass at least 2 arguments to Promise.using");var r,o=arguments[n-1];if("function"!=typeof o)return t("expecting a function but got "+c.classString(o));var s=!0;2===n&&Array.isArray(arguments[0])?(n=(r=arguments[0]).length,s=!1):(r=arguments,n--);for(var u=new b(n),f=0;f<n;++f){var h=r[f];if(g.isDisposer(h)){var m=h;(h=h.promise())._setDisposable(m)}else{var v=i(h);v instanceof e&&(h=v._then(y,null,null,{resources:u,index:f},void 0))}u[f]=h}var _=new Array(u.length);for(f=0;f<_.length;++f)_[f]=e.resolve(u[f]).reflect();var x=e.all(_).then((function(e){for(var t=0;t<e.length;++t){var n=e[t];if(n.isRejected())return d.e=n.error(),d;if(!n.isFulfilled())return void x.cancel();e[t]=n.value()}D._pushContext(),o=l(o);var i=s?o.apply(void 0,e):o(e),r=D._popContext();return a.checkForgottenReturns(i,r,"Promise.using",D),i})),D=x.lastly((function(){var t=new e.PromiseInspection(x);return p(u,t)}));return u.promise=D,D._setOnCancel(u),D},e.prototype._setDisposable=function(e){this._bitField=131072|this._bitField,this._disposer=e},e.prototype._isDisposable=function(){return(131072&this._bitField)>0},e.prototype._getDisposer=function(){return this._disposer},e.prototype._unsetDisposable=function(){this._bitField=-131073&this._bitField,this._disposer=void 0},e.prototype.disposer=function(e){if("function"==typeof e)return new m(e,this,r());throw new s}}},function(e,t,n){"use strict";e.exports=function(e,t,i){var r=n(5),o=e.TimeoutError;function a(e){this.handle=e}a.prototype._resultCancelled=function(){clearTimeout(this.handle)};var c=function(e){return s(+this).thenReturn(e)},s=e.delay=function(n,r){var o,s;return void 0!==r?(o=e.resolve(r)._then(c,null,null,n,void 0),i.cancellation()&&r instanceof e&&o._setOnCancel(r)):(o=new e(t),s=setTimeout((function(){o._fulfill()}),+n),i.cancellation()&&o._setOnCancel(new a(s)),o._captureStackTrace()),o._setAsyncGuaranteed(),o};e.prototype.delay=function(e){return s(e,this)};function u(e){return clearTimeout(this.handle),e}function d(e){throw clearTimeout(this.handle),e}e.prototype.timeout=function(e,t){var n,c;e=+e;var s=new a(setTimeout((function(){n.isPending()&&function(e,t,n){var i;i="string"!=typeof t?t instanceof Error?t:new o("operation timed out"):new o(t),r.markAsOriginatingFromRejection(i),e._attachExtraTrace(i),e._reject(i),null!=n&&n.cancel()}(n,t,c)}),e));return i.cancellation()?(c=this.then(),(n=c._then(u,d,void 0,s,void 0))._setOnCancel(s)):n=this._then(u,d,void 0,s,void 0),n}}},function(e,t,n){"use strict";e.exports=function(e,t,i,r,o,a){var c=n(28).TypeError,s=n(5),u=s.errorObj,d=s.tryCatch,l=[];function f(t,n,r,o){if(a.cancellation()){var c=new e(i),s=this._finallyPromise=new e(i);this._promise=c.lastly((function(){return s})),c._captureStackTrace(),c._setOnCancel(this)}else{(this._promise=new e(i))._captureStackTrace()}this._stack=o,this._generatorFunction=t,this._receiver=n,this._generator=void 0,this._yieldHandlers="function"==typeof r?[r].concat(l):l,this._yieldedPromise=null,this._cancellationPhase=!1}s.inherits(f,o),f.prototype._isResolved=function(){return null===this._promise},f.prototype._cleanup=function(){this._promise=this._generator=null,a.cancellation()&&null!==this._finallyPromise&&(this._finallyPromise._fulfill(),this._finallyPromise=null)},f.prototype._promiseCancelled=function(){if(!this._isResolved()){var t;if(void 0!==this._generator.return)this._promise._pushContext(),t=d(this._generator.return).call(this._generator,void 0),this._promise._popContext();else{var n=new e.CancellationError("generator .return() sentinel");e.coroutine.returnSentinel=n,this._promise._attachExtraTrace(n),this._promise._pushContext(),t=d(this._generator.throw).call(this._generator,n),this._promise._popContext()}this._cancellationPhase=!0,this._yieldedPromise=null,this._continue(t)}},f.prototype._promiseFulfilled=function(e){this._yieldedPromise=null,this._promise._pushContext();var t=d(this._generator.next).call(this._generator,e);this._promise._popContext(),this._continue(t)},f.prototype._promiseRejected=function(e){this._yieldedPromise=null,this._promise._attachExtraTrace(e),this._promise._pushContext();var t=d(this._generator.throw).call(this._generator,e);this._promise._popContext(),this._continue(t)},f.prototype._resultCancelled=function(){if(this._yieldedPromise instanceof e){var t=this._yieldedPromise;this._yieldedPromise=null,t.cancel()}},f.prototype.promise=function(){return this._promise},f.prototype._run=function(){this._generator=this._generatorFunction.call(this._receiver),this._receiver=this._generatorFunction=void 0,this._promiseFulfilled(void 0)},f.prototype._continue=function(t){var n=this._promise;if(t===u)return this._cleanup(),this._cancellationPhase?n.cancel():n._rejectCallback(t.e,!1);var i=t.value;if(!0===t.done)return this._cleanup(),this._cancellationPhase?n.cancel():n._resolveCallback(i);var o=r(i,this._promise);if(o instanceof e||null!==(o=function(t,n,i){for(var o=0;o<n.length;++o){i._pushContext();var a=d(n[o])(t);if(i._popContext(),a===u){i._pushContext();var c=e.reject(u.e);return i._popContext(),c}var s=r(a,i);if(s instanceof e)return s}return null}(o,this._yieldHandlers,this._promise))){var a=(o=o._target())._bitField;0==(50397184&a)?(this._yieldedPromise=o,o._proxy(this,null)):0!=(33554432&a)?e._async.invoke(this._promiseFulfilled,this,o._value()):0!=(16777216&a)?e._async.invoke(this._promiseRejected,this,o._reason()):this._promiseCancelled()}else this._promiseRejected(new c("A value %s was yielded that could not be treated as a promise\n\n    See http://goo.gl/MqrFmX\n\n".replace("%s",i)+"From coroutine:\n"+this._stack.split("\n").slice(1,-7).join("\n")))},e.coroutine=function(e,t){if("function"!=typeof e)throw new c("generatorFunction must be a function\n\n    See http://goo.gl/MqrFmX\n");var n=Object(t).yieldHandler,i=f,r=(new Error).stack;return function(){var t=e.apply(this,arguments),o=new i(void 0,void 0,n,r),a=o.promise();return o._generator=t,o._promiseFulfilled(void 0),a}},e.coroutine.addYieldHandler=function(e){if("function"!=typeof e)throw new c("expecting a function but got "+s.classString(e));l.push(e)},e.spawn=function(n){if(a.deprecated("Promise.spawn()","Promise.coroutine()"),"function"!=typeof n)return t("generatorFunction must be a function\n\n    See http://goo.gl/MqrFmX\n");var i=new f(n,this),r=i.promise();return i._run(e.spawn),r}}},function(e,t,n){"use strict";e.exports=function(e){var t=n(5),i=e._async,r=t.tryCatch,o=t.errorObj;function a(e,n){if(!t.isArray(e))return c.call(this,e,n);var a=r(n).apply(this._boundValue(),[null].concat(e));a===o&&i.throwLater(a.e)}function c(e,t){var n=this._boundValue(),a=void 0===e?r(t).call(n,null):r(t).call(n,null,e);a===o&&i.throwLater(a.e)}function s(e,t){if(!e){var n=new Error(e+"");n.cause=e,e=n}var a=r(t).call(this._boundValue(),e);a===o&&i.throwLater(a.e)}e.prototype.asCallback=e.prototype.nodeify=function(e,t){if("function"==typeof e){var n=c;void 0!==t&&Object(t).spread&&(n=a),this._then(n,s,void 0,this,e)}return this}}},function(e,t,n){"use strict";e.exports=function(e,t){var i={},r=n(5),o=n(275),a=r.withAppended,c=r.maybeWrapAsError,s=r.canEvaluate,u=n(28).TypeError,d={__isPromisified__:!0},l=new RegExp("^(?:"+["arity","length","name","arguments","caller","callee","prototype","__isPromisified__"].join("|")+")$"),f=function(e){return r.isIdentifier(e)&&"_"!==e.charAt(0)&&"constructor"!==e};function h(e){return!l.test(e)}function p(e){try{return!0===e.__isPromisified__}catch(e){return!1}}function g(e,t,n){var i=r.getDataPropertyOrDefault(e,t+n,d);return!!i&&p(i)}function m(e,t,n,i){for(var o=r.inheritedDataKeys(e),a=[],c=0;c<o.length;++c){var s=o[c],d=e[s],l=i===f||f(s);"function"!=typeof d||p(d)||g(e,s,t)||!i(s,d,e,l)||a.push(s,d)}return function(e,t,n){for(var i=0;i<e.length;i+=2){var r=e[i];if(n.test(r))for(var o=r.replace(n,""),a=0;a<e.length;a+=2)if(e[a]===o)throw new u("Cannot promisify an API that has normal methods with '%s'-suffix\n\n    See http://goo.gl/MqrFmX\n".replace("%s",t))}}(a,t,n),a}var y=s?function(n,s,u,d,l,f){var h=Math.max(0,function(e){return"number"==typeof e.length?Math.max(Math.min(e.length,1024),0):0}(d)-1),p=function(e){for(var t=[e],n=Math.max(0,e-1-3),i=e-1;i>=n;--i)t.push(i);for(i=e+1;i<=3;++i)t.push(i);return t}(h),g="string"==typeof n||s===i;function m(e){var t,n=(t=e,r.filledRange(t,"_arg","")).join(", "),i=e>0?", ":"";return(g?"ret = callback.call(this, {{args}}, nodeback); break;\n":void 0===s?"ret = callback({{args}}, nodeback); break;\n":"ret = callback.call(receiver, {{args}}, nodeback); break;\n").replace("{{args}}",n).replace(", ",i)}var y="string"==typeof n?"this != null ? this['"+n+"'] : fn":"fn",b="'use strict';                                                \n        var ret = function (Parameters) {                                    \n            'use strict';                                                    \n            var len = arguments.length;                                      \n            var promise = new Promise(INTERNAL);                             \n            promise._captureStackTrace();                                    \n            var nodeback = nodebackForPromise(promise, "+f+");   \n            var ret;                                                         \n            var callback = tryCatch([GetFunctionCode]);                      \n            switch(len) {                                                    \n                [CodeForSwitchCase]                                          \n            }                                                                \n            if (ret === errorObj) {                                          \n                promise._rejectCallback(maybeWrapAsError(ret.e), true, true);\n            }                                                                \n            if (!promise._isFateSealed()) promise._setAsyncGuaranteed();     \n            return promise;                                                  \n        };                                                                   \n        notEnumerableProp(ret, '__isPromisified__', true);                   \n        return ret;                                                          \n    ".replace("[CodeForSwitchCase]",function(){for(var e="",t=0;t<p.length;++t)e+="case "+p[t]+":"+m(p[t]);return e+="                                                             \n        default:                                                             \n            var args = new Array(len + 1);                                   \n            var i = 0;                                                       \n            for (var i = 0; i < len; ++i) {                                  \n               args[i] = arguments[i];                                       \n            }                                                                \n            args[i] = nodeback;                                              \n            [CodeForCall]                                                    \n            break;                                                           \n        ".replace("[CodeForCall]",g?"ret = callback.apply(this, args);\n":"ret = callback.apply(receiver, args);\n")}()).replace("[GetFunctionCode]",y);return b=b.replace("Parameters",function(e){return r.filledRange(Math.max(e,3),"_arg","")}(h)),new Function("Promise","fn","receiver","withAppended","maybeWrapAsError","nodebackForPromise","tryCatch","errorObj","notEnumerableProp","INTERNAL",b)(e,d,s,a,c,o,r.tryCatch,r.errorObj,r.notEnumerableProp,t)}:function(n,s,u,d,l,f){var h=function(){return this}(),p=n;function g(){var r=s;s===i&&(r=this);var u=new e(t);u._captureStackTrace();var d="string"==typeof p&&this!==h?this[p]:n,l=o(u,f);try{d.apply(r,a(arguments,l))}catch(e){u._rejectCallback(c(e),!0,!0)}return u._isFateSealed()||u._setAsyncGuaranteed(),u}return"string"==typeof p&&(n=d),r.notEnumerableProp(g,"__isPromisified__",!0),g};function b(e,t,n,o,a){for(var c=new RegExp(t.replace(/([$])/,"\\$")+"$"),s=m(e,t,c,n),u=0,d=s.length;u<d;u+=2){var l=s[u],f=s[u+1],h=l+t;if(o===y)e[h]=y(l,i,l,f,t,a);else{var p=o(f,(function(){return y(l,i,l,f,t,a)}));r.notEnumerableProp(p,"__isPromisified__",!0),e[h]=p}}return r.toFastProperties(e),e}e.promisify=function(e,t){if("function"!=typeof e)throw new u("expecting a function but got "+r.classString(e));if(p(e))return e;var n=function(e,t,n){return y(e,t,void 0,e,null,n)}(e,void 0===(t=Object(t)).context?i:t.context,!!t.multiArgs);return r.copyDescriptors(e,n,h),n},e.promisifyAll=function(e,t){if("function"!=typeof e&&"object"!=typeof e)throw new u("the target of promisifyAll must be an object or a function\n\n    See http://goo.gl/MqrFmX\n");var n=!!(t=Object(t)).multiArgs,i=t.suffix;"string"!=typeof i&&(i="Async");var o=t.filter;"function"!=typeof o&&(o=f);var a=t.promisifier;if("function"!=typeof a&&(a=y),!r.isIdentifier(i))throw new RangeError("suffix must be a valid identifier\n\n    See http://goo.gl/MqrFmX\n");for(var c=r.inheritedDataKeys(e),s=0;s<c.length;++s){var d=e[c[s]];"constructor"!==c[s]&&r.isClass(d)&&(b(d.prototype,i,o,a,n),b(d,i,o,a,n))}return b(e,i,o,a,n)}}},function(e,t,n){"use strict";e.exports=function(e,t,i,r){var o,a=n(5),c=a.isObject,s=n(40);"function"==typeof Map&&(o=Map);var u=function(){var e=0,t=0;function n(n,i){this[e]=n,this[e+t]=i,e++}return function(i){t=i.size,e=0;var r=new Array(2*i.size);return i.forEach(n,r),r}}();function d(e){var t,n=!1;if(void 0!==o&&e instanceof o)t=u(e),n=!0;else{var i=s.keys(e),r=i.length;t=new Array(2*r);for(var a=0;a<r;++a){var c=i[a];t[a]=e[c],t[a+r]=c}}this.constructor$(t),this._isMap=n,this._init$(void 0,-3)}function l(t){var n,o=i(t);return c(o)?(n=o instanceof e?o._then(e.props,void 0,void 0,void 0,void 0):new d(o).promise(),o instanceof e&&n._propagateFrom(o,2),n):r("cannot await properties of a non-object\n\n    See http://goo.gl/MqrFmX\n")}a.inherits(d,t),d.prototype._init=function(){},d.prototype._promiseFulfilled=function(e,t){if(this._values[t]=e,++this._totalResolved>=this._length){var n;if(this._isMap)n=function(e){for(var t=new o,n=e.length/2|0,i=0;i<n;++i){var r=e[n+i],a=e[i];t.set(r,a)}return t}(this._values);else{n={};for(var i=this.length(),r=0,a=this.length();r<a;++r)n[this._values[r+i]]=this._values[r]}return this._resolve(n),!0}return!1},d.prototype.shouldCopyValues=function(){return!1},d.prototype.getActualLength=function(e){return e>>1},e.prototype.props=function(){return l(this)},e.props=function(e){return l(e)}}},function(e,t,n){"use strict";e.exports=function(e,t,i,r){var o=n(5);function a(n,c){var s,u=i(n);if(u instanceof e)return(s=u).then((function(e){return a(e,s)}));if(null===(n=o.asArray(n)))return r("expecting an array or an iterable object but got "+o.classString(n));var d=new e(t);void 0!==c&&d._propagateFrom(c,3);for(var l=d._fulfill,f=d._reject,h=0,p=n.length;h<p;++h){var g=n[h];(void 0!==g||h in n)&&e.cast(g)._then(l,f,void 0,d,null)}return d}e.race=function(e){return a(e,void 0)},e.prototype.race=function(){return a(this,void 0)}}},function(e,t,n){"use strict";e.exports=function(e,t,i,r,o,a){var c=e._getDomain,s=n(5),u=s.tryCatch;function d(t,n,i,r){this.constructor$(t);var a=c();this._fn=null===a?n:s.domainBind(a,n),void 0!==i&&(i=e.resolve(i))._attachCancellationCallback(this),this._initialValue=i,this._currentCancellable=null,this._eachValues=r===o?Array(this._length):0===r?null:void 0,this._promise._captureStackTrace(),this._init$(void 0,-5)}function l(e,t){this.isFulfilled()?t._resolve(e):t._reject(e)}function f(e,t,n,r){return"function"!=typeof t?i("expecting a function but got "+s.classString(t)):new d(e,t,n,r).promise()}function h(t){this.accum=t,this.array._gotAccum(t);var n=r(this.value,this.array._promise);return n instanceof e?(this.array._currentCancellable=n,n._then(p,void 0,void 0,this,void 0)):p.call(this,n)}function p(t){var n,i=this.array,r=i._promise,o=u(i._fn);r._pushContext(),(n=void 0!==i._eachValues?o.call(r._boundValue(),t,this.index,this.length):o.call(r._boundValue(),this.accum,t,this.index,this.length))instanceof e&&(i._currentCancellable=n);var c=r._popContext();return a.checkForgottenReturns(n,c,void 0!==i._eachValues?"Promise.each":"Promise.reduce",r),n}s.inherits(d,t),d.prototype._gotAccum=function(e){void 0!==this._eachValues&&null!==this._eachValues&&e!==o&&this._eachValues.push(e)},d.prototype._eachComplete=function(e){return null!==this._eachValues&&this._eachValues.push(e),this._eachValues},d.prototype._init=function(){},d.prototype._resolveEmptyArray=function(){this._resolve(void 0!==this._eachValues?this._eachValues:this._initialValue)},d.prototype.shouldCopyValues=function(){return!1},d.prototype._resolve=function(e){this._promise._resolveCallback(e),this._values=null},d.prototype._resultCancelled=function(t){if(t===this._initialValue)return this._cancel();this._isResolved()||(this._resultCancelled$(),this._currentCancellable instanceof e&&this._currentCancellable.cancel(),this._initialValue instanceof e&&this._initialValue.cancel())},d.prototype._iterate=function(t){var n,i;this._values=t;var r=t.length;if(void 0!==this._initialValue?(n=this._initialValue,i=0):(n=e.resolve(t[0]),i=1),this._currentCancellable=n,!n.isRejected())for(;i<r;++i){var o={accum:null,value:t[i],index:i,length:r,array:this};n=n._then(h,void 0,void 0,o,void 0)}void 0!==this._eachValues&&(n=n._then(this._eachComplete,void 0,void 0,this,void 0)),n._then(l,l,void 0,n,this)},e.prototype.reduce=function(e,t){return f(this,e,t,null)},e.reduce=function(e,t,n,i){return f(e,t,n,i)}}},function(e,t,n){"use strict";e.exports=function(e,t,i){var r=e.PromiseInspection;function o(e){this.constructor$(e)}n(5).inherits(o,t),o.prototype._promiseResolved=function(e,t){return this._values[e]=t,++this._totalResolved>=this._length&&(this._resolve(this._values),!0)},o.prototype._promiseFulfilled=function(e,t){var n=new r;return n._bitField=33554432,n._settledValueField=e,this._promiseResolved(t,n)},o.prototype._promiseRejected=function(e,t){var n=new r;return n._bitField=16777216,n._settledValueField=e,this._promiseResolved(t,n)},e.settle=function(e){return i.deprecated(".settle()",".reflect()"),new o(e).promise()},e.prototype.settle=function(){return e.settle(this)}}},function(e,t,n){"use strict";e.exports=function(e,t,i){var r=n(5),o=n(28).RangeError,a=n(28).AggregateError,c=r.isArray,s={};function u(e){this.constructor$(e),this._howMany=0,this._unwrap=!1,this._initialized=!1}function d(e,t){if((0|t)!==t||t<0)return i("expecting a positive integer\n\n    See http://goo.gl/MqrFmX\n");var n=new u(e),r=n.promise();return n.setHowMany(t),n.init(),r}r.inherits(u,t),u.prototype._init=function(){if(this._initialized)if(0!==this._howMany){this._init$(void 0,-5);var e=c(this._values);!this._isResolved()&&e&&this._howMany>this._canPossiblyFulfill()&&this._reject(this._getRangeError(this.length()))}else this._resolve([])},u.prototype.init=function(){this._initialized=!0,this._init()},u.prototype.setUnwrap=function(){this._unwrap=!0},u.prototype.howMany=function(){return this._howMany},u.prototype.setHowMany=function(e){this._howMany=e},u.prototype._promiseFulfilled=function(e){return this._addFulfilled(e),this._fulfilled()===this.howMany()&&(this._values.length=this.howMany(),1===this.howMany()&&this._unwrap?this._resolve(this._values[0]):this._resolve(this._values),!0)},u.prototype._promiseRejected=function(e){return this._addRejected(e),this._checkOutcome()},u.prototype._promiseCancelled=function(){return this._values instanceof e||null==this._values?this._cancel():(this._addRejected(s),this._checkOutcome())},u.prototype._checkOutcome=function(){if(this.howMany()>this._canPossiblyFulfill()){for(var e=new a,t=this.length();t<this._values.length;++t)this._values[t]!==s&&e.push(this._values[t]);return e.length>0?this._reject(e):this._cancel(),!0}return!1},u.prototype._fulfilled=function(){return this._totalResolved},u.prototype._rejected=function(){return this._values.length-this.length()},u.prototype._addRejected=function(e){this._values.push(e)},u.prototype._addFulfilled=function(e){this._values[this._totalResolved++]=e},u.prototype._canPossiblyFulfill=function(){return this.length()-this._rejected()},u.prototype._getRangeError=function(e){var t="Input array must contain at least "+this._howMany+" items but contains only "+e+" items";return new o(t)},u.prototype._resolveEmptyArray=function(){this._reject(this._getRangeError(0))},e.some=function(e,t){return d(e,t)},e.prototype.some=function(e){return d(this,e)},e._SomePromiseArray=u}},function(e,t,n){"use strict";e.exports=function(e,t){var n=e.map;e.prototype.filter=function(e,i){return n(this,e,i,t)},e.filter=function(e,i,r){return n(e,i,r,t)}}},function(e,t,n){"use strict";e.exports=function(e,t){var n=e.reduce,i=e.all;function r(){return i(this)}e.prototype.each=function(e){return n(this,e,t,0)._then(r,void 0,void 0,this,void 0)},e.prototype.mapSeries=function(e){return n(this,e,t,t)},e.each=function(e,i){return n(e,i,t,0)._then(r,void 0,void 0,e,void 0)},e.mapSeries=function(e,i){return n(e,i,t,t)}}},function(e,t,n){"use strict";e.exports=function(e){var t=e._SomePromiseArray;function n(e){var n=new t(e),i=n.promise();return n.setHowMany(1),n.setUnwrap(),n.init(),i}e.any=function(e){return n(e)},e.prototype.any=function(){return n(this)}}},function(e,t,n){(function(t,n,i,r){e.exports=function e(t,n,i){function r(a,c){if(!n[a]){if(!t[a]){if(o)return o(a,!0);var s=new Error("Cannot find module '"+a+"'");throw s.code="MODULE_NOT_FOUND",s}var u=n[a]={exports:{}};t[a][0].call(u.exports,(function(e){return r(t[a][1][e]||e)}),u,u.exports,e,t,n,i)}return n[a].exports}for(var o=!1,a=0;a<i.length;a++)r(i[a]);return r}({1:[function(e,t,n){"use strict";var i=e("./utils"),r=e("./support"),o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";n.encode=function(e){for(var t,n,r,a,c,s,u,d=[],l=0,f=e.length,h=f,p="string"!==i.getTypeOf(e);l<e.length;)h=f-l,r=p?(t=e[l++],n=l<f?e[l++]:0,l<f?e[l++]:0):(t=e.charCodeAt(l++),n=l<f?e.charCodeAt(l++):0,l<f?e.charCodeAt(l++):0),a=t>>2,c=(3&t)<<4|n>>4,s=1<h?(15&n)<<2|r>>6:64,u=2<h?63&r:64,d.push(o.charAt(a)+o.charAt(c)+o.charAt(s)+o.charAt(u));return d.join("")},n.decode=function(e){var t,n,i,a,c,s,u=0,d=0,l="data:";if(e.substr(0,l.length)===l)throw new Error("Invalid base64 input, it looks like a data url.");var f,h=3*(e=e.replace(/[^A-Za-z0-9+/=]/g,"")).length/4;if(e.charAt(e.length-1)===o.charAt(64)&&h--,e.charAt(e.length-2)===o.charAt(64)&&h--,h%1!=0)throw new Error("Invalid base64 input, bad content length.");for(f=r.uint8array?new Uint8Array(0|h):new Array(0|h);u<e.length;)t=o.indexOf(e.charAt(u++))<<2|(a=o.indexOf(e.charAt(u++)))>>4,n=(15&a)<<4|(c=o.indexOf(e.charAt(u++)))>>2,i=(3&c)<<6|(s=o.indexOf(e.charAt(u++))),f[d++]=t,64!==c&&(f[d++]=n),64!==s&&(f[d++]=i);return f}},{"./support":30,"./utils":32}],2:[function(e,t,n){"use strict";var i=e("./external"),r=e("./stream/DataWorker"),o=e("./stream/Crc32Probe"),a=e("./stream/DataLengthProbe");function c(e,t,n,i,r){this.compressedSize=e,this.uncompressedSize=t,this.crc32=n,this.compression=i,this.compressedContent=r}c.prototype={getContentWorker:function(){var e=new r(i.Promise.resolve(this.compressedContent)).pipe(this.compression.uncompressWorker()).pipe(new a("data_length")),t=this;return e.on("end",(function(){if(this.streamInfo.data_length!==t.uncompressedSize)throw new Error("Bug : uncompressed data size mismatch")})),e},getCompressedWorker:function(){return new r(i.Promise.resolve(this.compressedContent)).withStreamInfo("compressedSize",this.compressedSize).withStreamInfo("uncompressedSize",this.uncompressedSize).withStreamInfo("crc32",this.crc32).withStreamInfo("compression",this.compression)}},c.createWorkerFrom=function(e,t,n){return e.pipe(new o).pipe(new a("uncompressedSize")).pipe(t.compressWorker(n)).pipe(new a("compressedSize")).withStreamInfo("compression",t)},t.exports=c},{"./external":6,"./stream/Crc32Probe":25,"./stream/DataLengthProbe":26,"./stream/DataWorker":27}],3:[function(e,t,n){"use strict";var i=e("./stream/GenericWorker");n.STORE={magic:"\0\0",compressWorker:function(){return new i("STORE compression")},uncompressWorker:function(){return new i("STORE decompression")}},n.DEFLATE=e("./flate")},{"./flate":7,"./stream/GenericWorker":28}],4:[function(e,t,n){"use strict";var i=e("./utils"),r=function(){for(var e,t=[],n=0;n<256;n++){e=n;for(var i=0;i<8;i++)e=1&e?3988292384^e>>>1:e>>>1;t[n]=e}return t}();t.exports=function(e,t){return void 0!==e&&e.length?"string"!==i.getTypeOf(e)?function(e,t,n,i){var o=r,a=0+n;e^=-1;for(var c=0;c<a;c++)e=e>>>8^o[255&(e^t[c])];return-1^e}(0|t,e,e.length):function(e,t,n,i){var o=r,a=0+n;e^=-1;for(var c=0;c<a;c++)e=e>>>8^o[255&(e^t.charCodeAt(c))];return-1^e}(0|t,e,e.length):0}},{"./utils":32}],5:[function(e,t,n){"use strict";n.base64=!1,n.binary=!1,n.dir=!1,n.createFolders=!0,n.date=null,n.compression=null,n.compressionOptions=null,n.comment=null,n.unixPermissions=null,n.dosPermissions=null},{}],6:[function(e,t,n){"use strict";var i;i="undefined"!=typeof Promise?Promise:e("lie"),t.exports={Promise:i}},{lie:37}],7:[function(e,t,n){"use strict";var i="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Uint32Array,r=e("pako"),o=e("./utils"),a=e("./stream/GenericWorker"),c=i?"uint8array":"array";function s(e,t){a.call(this,"FlateWorker/"+e),this._pako=null,this._pakoAction=e,this._pakoOptions=t,this.meta={}}n.magic="\b\0",o.inherits(s,a),s.prototype.processChunk=function(e){this.meta=e.meta,null===this._pako&&this._createPako(),this._pako.push(o.transformTo(c,e.data),!1)},s.prototype.flush=function(){a.prototype.flush.call(this),null===this._pako&&this._createPako(),this._pako.push([],!0)},s.prototype.cleanUp=function(){a.prototype.cleanUp.call(this),this._pako=null},s.prototype._createPako=function(){this._pako=new r[this._pakoAction]({raw:!0,level:this._pakoOptions.level||-1});var e=this;this._pako.onData=function(t){e.push({data:t,meta:e.meta})}},n.compressWorker=function(e){return new s("Deflate",e)},n.uncompressWorker=function(){return new s("Inflate",{})}},{"./stream/GenericWorker":28,"./utils":32,pako:38}],8:[function(e,t,n){"use strict";function i(e,t){var n,i="";for(n=0;n<t;n++)i+=String.fromCharCode(255&e),e>>>=8;return i}function r(e,t,n,r,a,d){var l,f,h=e.file,p=e.compression,g=d!==c.utf8encode,m=o.transformTo("string",d(h.name)),y=o.transformTo("string",c.utf8encode(h.name)),b=h.comment,v=o.transformTo("string",d(b)),_=o.transformTo("string",c.utf8encode(b)),x=y.length!==h.name.length,D=_.length!==b.length,w="",U="",T="",E=h.dir,k=h.date,C={crc32:0,compressedSize:0,uncompressedSize:0};t&&!n||(C.crc32=e.crc32,C.compressedSize=e.compressedSize,C.uncompressedSize=e.uncompressedSize);var S=0;t&&(S|=8),g||!x&&!D||(S|=2048);var F=0,A=0;E&&(F|=16),"UNIX"===a?(A=798,F|=function(e,t){var n=e;return e||(n=t?16893:33204),(65535&n)<<16}(h.unixPermissions,E)):(A=20,F|=function(e){return 63&(e||0)}(h.dosPermissions)),l=k.getUTCHours(),l<<=6,l|=k.getUTCMinutes(),l<<=5,l|=k.getUTCSeconds()/2,f=k.getUTCFullYear()-1980,f<<=4,f|=k.getUTCMonth()+1,f<<=5,f|=k.getUTCDate(),x&&(U=i(1,1)+i(s(m),4)+y,w+="up"+i(U.length,2)+U),D&&(T=i(1,1)+i(s(v),4)+_,w+="uc"+i(T.length,2)+T);var O="";return O+="\n\0",O+=i(S,2),O+=p.magic,O+=i(l,2),O+=i(f,2),O+=i(C.crc32,4),O+=i(C.compressedSize,4),O+=i(C.uncompressedSize,4),O+=i(m.length,2),O+=i(w.length,2),{fileRecord:u.LOCAL_FILE_HEADER+O+m+w,dirRecord:u.CENTRAL_FILE_HEADER+i(A,2)+O+i(v.length,2)+"\0\0\0\0"+i(F,4)+i(r,4)+m+w+v}}var o=e("../utils"),a=e("../stream/GenericWorker"),c=e("../utf8"),s=e("../crc32"),u=e("../signature");function d(e,t,n,i){a.call(this,"ZipFileWorker"),this.bytesWritten=0,this.zipComment=t,this.zipPlatform=n,this.encodeFileName=i,this.streamFiles=e,this.accumulate=!1,this.contentBuffer=[],this.dirRecords=[],this.currentSourceOffset=0,this.entriesCount=0,this.currentFile=null,this._sources=[]}o.inherits(d,a),d.prototype.push=function(e){var t=e.meta.percent||0,n=this.entriesCount,i=this._sources.length;this.accumulate?this.contentBuffer.push(e):(this.bytesWritten+=e.data.length,a.prototype.push.call(this,{data:e.data,meta:{currentFile:this.currentFile,percent:n?(t+100*(n-i-1))/n:100}}))},d.prototype.openedSource=function(e){this.currentSourceOffset=this.bytesWritten,this.currentFile=e.file.name;var t=this.streamFiles&&!e.file.dir;if(t){var n=r(e,t,!1,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);this.push({data:n.fileRecord,meta:{percent:0}})}else this.accumulate=!0},d.prototype.closedSource=function(e){this.accumulate=!1;var t=this.streamFiles&&!e.file.dir,n=r(e,t,!0,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);if(this.dirRecords.push(n.dirRecord),t)this.push({data:function(e){return u.DATA_DESCRIPTOR+i(e.crc32,4)+i(e.compressedSize,4)+i(e.uncompressedSize,4)}(e),meta:{percent:100}});else for(this.push({data:n.fileRecord,meta:{percent:0}});this.contentBuffer.length;)this.push(this.contentBuffer.shift());this.currentFile=null},d.prototype.flush=function(){for(var e=this.bytesWritten,t=0;t<this.dirRecords.length;t++)this.push({data:this.dirRecords[t],meta:{percent:100}});var n=this.bytesWritten-e,r=function(e,t,n,r,a){var c=o.transformTo("string",a(r));return u.CENTRAL_DIRECTORY_END+"\0\0\0\0"+i(e,2)+i(e,2)+i(t,4)+i(n,4)+i(c.length,2)+c}(this.dirRecords.length,n,e,this.zipComment,this.encodeFileName);this.push({data:r,meta:{percent:100}})},d.prototype.prepareNextSource=function(){this.previous=this._sources.shift(),this.openedSource(this.previous.streamInfo),this.isPaused?this.previous.pause():this.previous.resume()},d.prototype.registerPrevious=function(e){this._sources.push(e);var t=this;return e.on("data",(function(e){t.processChunk(e)})),e.on("end",(function(){t.closedSource(t.previous.streamInfo),t._sources.length?t.prepareNextSource():t.end()})),e.on("error",(function(e){t.error(e)})),this},d.prototype.resume=function(){return!!a.prototype.resume.call(this)&&(!this.previous&&this._sources.length?(this.prepareNextSource(),!0):this.previous||this._sources.length||this.generatedError?void 0:(this.end(),!0))},d.prototype.error=function(e){var t=this._sources;if(!a.prototype.error.call(this,e))return!1;for(var n=0;n<t.length;n++)try{t[n].error(e)}catch(e){}return!0},d.prototype.lock=function(){a.prototype.lock.call(this);for(var e=this._sources,t=0;t<e.length;t++)e[t].lock()},t.exports=d},{"../crc32":4,"../signature":23,"../stream/GenericWorker":28,"../utf8":31,"../utils":32}],9:[function(e,t,n){"use strict";var i=e("../compressions"),r=e("./ZipFileWorker");n.generateWorker=function(e,t,n){var o=new r(t.streamFiles,n,t.platform,t.encodeFileName),a=0;try{e.forEach((function(e,n){a++;var r=function(e,t){var n=e||t,r=i[n];if(!r)throw new Error(n+" is not a valid compression method !");return r}(n.options.compression,t.compression),c=n.options.compressionOptions||t.compressionOptions||{},s=n.dir,u=n.date;n._compressWorker(r,c).withStreamInfo("file",{name:e,dir:s,date:u,comment:n.comment||"",unixPermissions:n.unixPermissions,dosPermissions:n.dosPermissions}).pipe(o)})),o.entriesCount=a}catch(e){o.error(e)}return o}},{"../compressions":3,"./ZipFileWorker":8}],10:[function(e,t,n){"use strict";function i(){if(!(this instanceof i))return new i;if(arguments.length)throw new Error("The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.");this.files=Object.create(null),this.comment=null,this.root="",this.clone=function(){var e=new i;for(var t in this)"function"!=typeof this[t]&&(e[t]=this[t]);return e}}(i.prototype=e("./object")).loadAsync=e("./load"),i.support=e("./support"),i.defaults=e("./defaults"),i.version="3.10.1",i.loadAsync=function(e,t){return(new i).loadAsync(e,t)},i.external=e("./external"),t.exports=i},{"./defaults":5,"./external":6,"./load":11,"./object":15,"./support":30}],11:[function(e,t,n){"use strict";var i=e("./utils"),r=e("./external"),o=e("./utf8"),a=e("./zipEntries"),c=e("./stream/Crc32Probe"),s=e("./nodejsUtils");function u(e){return new r.Promise((function(t,n){var i=e.decompressed.getContentWorker().pipe(new c);i.on("error",(function(e){n(e)})).on("end",(function(){i.streamInfo.crc32!==e.decompressed.crc32?n(new Error("Corrupted zip : CRC32 mismatch")):t()})).resume()}))}t.exports=function(e,t){var n=this;return t=i.extend(t||{},{base64:!1,checkCRC32:!1,optimizedBinaryString:!1,createFolders:!1,decodeFileName:o.utf8decode}),s.isNode&&s.isStream(e)?r.Promise.reject(new Error("JSZip can't accept a stream when loading a zip file.")):i.prepareContent("the loaded zip file",e,!0,t.optimizedBinaryString,t.base64).then((function(e){var n=new a(t);return n.load(e),n})).then((function(e){var n=[r.Promise.resolve(e)],i=e.files;if(t.checkCRC32)for(var o=0;o<i.length;o++)n.push(u(i[o]));return r.Promise.all(n)})).then((function(e){for(var r=e.shift(),o=r.files,a=0;a<o.length;a++){var c=o[a],s=c.fileNameStr,u=i.resolve(c.fileNameStr);n.file(u,c.decompressed,{binary:!0,optimizedBinaryString:!0,date:c.date,dir:c.dir,comment:c.fileCommentStr.length?c.fileCommentStr:null,unixPermissions:c.unixPermissions,dosPermissions:c.dosPermissions,createFolders:t.createFolders}),c.dir||(n.file(u).unsafeOriginalName=s)}return r.zipComment.length&&(n.comment=r.zipComment),n}))}},{"./external":6,"./nodejsUtils":14,"./stream/Crc32Probe":25,"./utf8":31,"./utils":32,"./zipEntries":33}],12:[function(e,t,n){"use strict";var i=e("../utils"),r=e("../stream/GenericWorker");function o(e,t){r.call(this,"Nodejs stream input adapter for "+e),this._upstreamEnded=!1,this._bindStream(t)}i.inherits(o,r),o.prototype._bindStream=function(e){var t=this;(this._stream=e).pause(),e.on("data",(function(e){t.push({data:e,meta:{percent:0}})})).on("error",(function(e){t.isPaused?this.generatedError=e:t.error(e)})).on("end",(function(){t.isPaused?t._upstreamEnded=!0:t.end()}))},o.prototype.pause=function(){return!!r.prototype.pause.call(this)&&(this._stream.pause(),!0)},o.prototype.resume=function(){return!!r.prototype.resume.call(this)&&(this._upstreamEnded?this.end():this._stream.resume(),!0)},t.exports=o},{"../stream/GenericWorker":28,"../utils":32}],13:[function(e,t,n){"use strict";var i=e("readable-stream").Readable;function r(e,t,n){i.call(this,t),this._helper=e;var r=this;e.on("data",(function(e,t){r.push(e)||r._helper.pause(),n&&n(t)})).on("error",(function(e){r.emit("error",e)})).on("end",(function(){r.push(null)}))}e("../utils").inherits(r,i),r.prototype._read=function(){this._helper.resume()},t.exports=r},{"../utils":32,"readable-stream":16}],14:[function(e,n,i){"use strict";n.exports={isNode:void 0!==t,newBufferFrom:function(e,n){if(t.from&&t.from!==Uint8Array.from)return t.from(e,n);if("number"==typeof e)throw new Error('The "data" argument must not be a number');return new t(e,n)},allocBuffer:function(e){if(t.alloc)return t.alloc(e);var n=new t(e);return n.fill(0),n},isBuffer:function(e){return t.isBuffer(e)},isStream:function(e){return e&&"function"==typeof e.on&&"function"==typeof e.pause&&"function"==typeof e.resume}}},{}],15:[function(e,t,n){"use strict";function i(e,t,n){var i,r=o.getTypeOf(t),c=o.extend(n||{},s);c.date=c.date||new Date,null!==c.compression&&(c.compression=c.compression.toUpperCase()),"string"==typeof c.unixPermissions&&(c.unixPermissions=parseInt(c.unixPermissions,8)),c.unixPermissions&&16384&c.unixPermissions&&(c.dir=!0),c.dosPermissions&&16&c.dosPermissions&&(c.dir=!0),c.dir&&(e=g(e)),c.createFolders&&(i=p(e))&&m.call(this,i,!0);var l,y="string"===r&&!1===c.binary&&!1===c.base64;n&&void 0!==n.binary||(c.binary=!y),(t instanceof u&&0===t.uncompressedSize||c.dir||!t||0===t.length)&&(c.base64=!1,c.binary=!0,t="",c.compression="STORE",r="string"),l=t instanceof u||t instanceof a?t:f.isNode&&f.isStream(t)?new h(e,t):o.prepareContent(e,t,c.binary,c.optimizedBinaryString,c.base64);var b=new d(e,l,c);this.files[e]=b}var r=e("./utf8"),o=e("./utils"),a=e("./stream/GenericWorker"),c=e("./stream/StreamHelper"),s=e("./defaults"),u=e("./compressedObject"),d=e("./zipObject"),l=e("./generate"),f=e("./nodejsUtils"),h=e("./nodejs/NodejsStreamInputAdapter"),p=function(e){"/"===e.slice(-1)&&(e=e.substring(0,e.length-1));var t=e.lastIndexOf("/");return 0<t?e.substring(0,t):""},g=function(e){return"/"!==e.slice(-1)&&(e+="/"),e},m=function(e,t){return t=void 0!==t?t:s.createFolders,e=g(e),this.files[e]||i.call(this,e,null,{dir:!0,createFolders:t}),this.files[e]};function y(e){return"[object RegExp]"===Object.prototype.toString.call(e)}var b={load:function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},forEach:function(e){var t,n,i;for(t in this.files)i=this.files[t],(n=t.slice(this.root.length,t.length))&&t.slice(0,this.root.length)===this.root&&e(n,i)},filter:function(e){var t=[];return this.forEach((function(n,i){e(n,i)&&t.push(i)})),t},file:function(e,t,n){if(1!==arguments.length)return e=this.root+e,i.call(this,e,t,n),this;if(y(e)){var r=e;return this.filter((function(e,t){return!t.dir&&r.test(e)}))}var o=this.files[this.root+e];return o&&!o.dir?o:null},folder:function(e){if(!e)return this;if(y(e))return this.filter((function(t,n){return n.dir&&e.test(t)}));var t=this.root+e,n=m.call(this,t),i=this.clone();return i.root=n.name,i},remove:function(e){e=this.root+e;var t=this.files[e];if(t||("/"!==e.slice(-1)&&(e+="/"),t=this.files[e]),t&&!t.dir)delete this.files[e];else for(var n=this.filter((function(t,n){return n.name.slice(0,e.length)===e})),i=0;i<n.length;i++)delete this.files[n[i].name];return this},generate:function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},generateInternalStream:function(e){var t,n={};try{if((n=o.extend(e||{},{streamFiles:!1,compression:"STORE",compressionOptions:null,type:"",platform:"DOS",comment:null,mimeType:"application/zip",encodeFileName:r.utf8encode})).type=n.type.toLowerCase(),n.compression=n.compression.toUpperCase(),"binarystring"===n.type&&(n.type="string"),!n.type)throw new Error("No output type specified.");o.checkSupport(n.type),"darwin"!==n.platform&&"freebsd"!==n.platform&&"linux"!==n.platform&&"sunos"!==n.platform||(n.platform="UNIX"),"win32"===n.platform&&(n.platform="DOS");var i=n.comment||this.comment||"";t=l.generateWorker(this,n,i)}catch(e){(t=new a("error")).error(e)}return new c(t,n.type||"string",n.mimeType)},generateAsync:function(e,t){return this.generateInternalStream(e).accumulate(t)},generateNodeStream:function(e,t){return(e=e||{}).type||(e.type="nodebuffer"),this.generateInternalStream(e).toNodejsStream(t)}};t.exports=b},{"./compressedObject":2,"./defaults":5,"./generate":9,"./nodejs/NodejsStreamInputAdapter":12,"./nodejsUtils":14,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31,"./utils":32,"./zipObject":35}],16:[function(e,t,n){"use strict";t.exports=e("stream")},{stream:void 0}],17:[function(e,t,n){"use strict";var i=e("./DataReader");function r(e){i.call(this,e);for(var t=0;t<this.data.length;t++)e[t]=255&e[t]}e("../utils").inherits(r,i),r.prototype.byteAt=function(e){return this.data[this.zero+e]},r.prototype.lastIndexOfSignature=function(e){for(var t=e.charCodeAt(0),n=e.charCodeAt(1),i=e.charCodeAt(2),r=e.charCodeAt(3),o=this.length-4;0<=o;--o)if(this.data[o]===t&&this.data[o+1]===n&&this.data[o+2]===i&&this.data[o+3]===r)return o-this.zero;return-1},r.prototype.readAndCheckSignature=function(e){var t=e.charCodeAt(0),n=e.charCodeAt(1),i=e.charCodeAt(2),r=e.charCodeAt(3),o=this.readData(4);return t===o[0]&&n===o[1]&&i===o[2]&&r===o[3]},r.prototype.readData=function(e){if(this.checkOffset(e),0===e)return[];var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=r},{"../utils":32,"./DataReader":18}],18:[function(e,t,n){"use strict";var i=e("../utils");function r(e){this.data=e,this.length=e.length,this.index=0,this.zero=0}r.prototype={checkOffset:function(e){this.checkIndex(this.index+e)},checkIndex:function(e){if(this.length<this.zero+e||e<0)throw new Error("End of data reached (data length = "+this.length+", asked index = "+e+"). Corrupted zip ?")},setIndex:function(e){this.checkIndex(e),this.index=e},skip:function(e){this.setIndex(this.index+e)},byteAt:function(){},readInt:function(e){var t,n=0;for(this.checkOffset(e),t=this.index+e-1;t>=this.index;t--)n=(n<<8)+this.byteAt(t);return this.index+=e,n},readString:function(e){return i.transformTo("string",this.readData(e))},readData:function(){},lastIndexOfSignature:function(){},readAndCheckSignature:function(){},readDate:function(){var e=this.readInt(4);return new Date(Date.UTC(1980+(e>>25&127),(e>>21&15)-1,e>>16&31,e>>11&31,e>>5&63,(31&e)<<1))}},t.exports=r},{"../utils":32}],19:[function(e,t,n){"use strict";var i=e("./Uint8ArrayReader");function r(e){i.call(this,e)}e("../utils").inherits(r,i),r.prototype.readData=function(e){this.checkOffset(e);var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=r},{"../utils":32,"./Uint8ArrayReader":21}],20:[function(e,t,n){"use strict";var i=e("./DataReader");function r(e){i.call(this,e)}e("../utils").inherits(r,i),r.prototype.byteAt=function(e){return this.data.charCodeAt(this.zero+e)},r.prototype.lastIndexOfSignature=function(e){return this.data.lastIndexOf(e)-this.zero},r.prototype.readAndCheckSignature=function(e){return e===this.readData(4)},r.prototype.readData=function(e){this.checkOffset(e);var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=r},{"../utils":32,"./DataReader":18}],21:[function(e,t,n){"use strict";var i=e("./ArrayReader");function r(e){i.call(this,e)}e("../utils").inherits(r,i),r.prototype.readData=function(e){if(this.checkOffset(e),0===e)return new Uint8Array(0);var t=this.data.subarray(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=r},{"../utils":32,"./ArrayReader":17}],22:[function(e,t,n){"use strict";var i=e("../utils"),r=e("../support"),o=e("./ArrayReader"),a=e("./StringReader"),c=e("./NodeBufferReader"),s=e("./Uint8ArrayReader");t.exports=function(e){var t=i.getTypeOf(e);return i.checkSupport(t),"string"!==t||r.uint8array?"nodebuffer"===t?new c(e):r.uint8array?new s(i.transformTo("uint8array",e)):new o(i.transformTo("array",e)):new a(e)}},{"../support":30,"../utils":32,"./ArrayReader":17,"./NodeBufferReader":19,"./StringReader":20,"./Uint8ArrayReader":21}],23:[function(e,t,n){"use strict";n.LOCAL_FILE_HEADER="PK",n.CENTRAL_FILE_HEADER="PK",n.CENTRAL_DIRECTORY_END="PK",n.ZIP64_CENTRAL_DIRECTORY_LOCATOR="PK",n.ZIP64_CENTRAL_DIRECTORY_END="PK",n.DATA_DESCRIPTOR="PK\b"},{}],24:[function(e,t,n){"use strict";var i=e("./GenericWorker"),r=e("../utils");function o(e){i.call(this,"ConvertWorker to "+e),this.destType=e}r.inherits(o,i),o.prototype.processChunk=function(e){this.push({data:r.transformTo(this.destType,e.data),meta:e.meta})},t.exports=o},{"../utils":32,"./GenericWorker":28}],25:[function(e,t,n){"use strict";var i=e("./GenericWorker"),r=e("../crc32");function o(){i.call(this,"Crc32Probe"),this.withStreamInfo("crc32",0)}e("../utils").inherits(o,i),o.prototype.processChunk=function(e){this.streamInfo.crc32=r(e.data,this.streamInfo.crc32||0),this.push(e)},t.exports=o},{"../crc32":4,"../utils":32,"./GenericWorker":28}],26:[function(e,t,n){"use strict";var i=e("../utils"),r=e("./GenericWorker");function o(e){r.call(this,"DataLengthProbe for "+e),this.propName=e,this.withStreamInfo(e,0)}i.inherits(o,r),o.prototype.processChunk=function(e){if(e){var t=this.streamInfo[this.propName]||0;this.streamInfo[this.propName]=t+e.data.length}r.prototype.processChunk.call(this,e)},t.exports=o},{"../utils":32,"./GenericWorker":28}],27:[function(e,t,n){"use strict";var i=e("../utils"),r=e("./GenericWorker");function o(e){r.call(this,"DataWorker");var t=this;this.dataIsReady=!1,this.index=0,this.max=0,this.data=null,this.type="",this._tickScheduled=!1,e.then((function(e){t.dataIsReady=!0,t.data=e,t.max=e&&e.length||0,t.type=i.getTypeOf(e),t.isPaused||t._tickAndRepeat()}),(function(e){t.error(e)}))}i.inherits(o,r),o.prototype.cleanUp=function(){r.prototype.cleanUp.call(this),this.data=null},o.prototype.resume=function(){return!!r.prototype.resume.call(this)&&(!this._tickScheduled&&this.dataIsReady&&(this._tickScheduled=!0,i.delay(this._tickAndRepeat,[],this)),!0)},o.prototype._tickAndRepeat=function(){this._tickScheduled=!1,this.isPaused||this.isFinished||(this._tick(),this.isFinished||(i.delay(this._tickAndRepeat,[],this),this._tickScheduled=!0))},o.prototype._tick=function(){if(this.isPaused||this.isFinished)return!1;var e=null,t=Math.min(this.max,this.index+16384);if(this.index>=this.max)return this.end();switch(this.type){case"string":e=this.data.substring(this.index,t);break;case"uint8array":e=this.data.subarray(this.index,t);break;case"array":case"nodebuffer":e=this.data.slice(this.index,t)}return this.index=t,this.push({data:e,meta:{percent:this.max?this.index/this.max*100:0}})},t.exports=o},{"../utils":32,"./GenericWorker":28}],28:[function(e,t,n){"use strict";function i(e){this.name=e||"default",this.streamInfo={},this.generatedError=null,this.extraStreamInfo={},this.isPaused=!0,this.isFinished=!1,this.isLocked=!1,this._listeners={data:[],end:[],error:[]},this.previous=null}i.prototype={push:function(e){this.emit("data",e)},end:function(){if(this.isFinished)return!1;this.flush();try{this.emit("end"),this.cleanUp(),this.isFinished=!0}catch(e){this.emit("error",e)}return!0},error:function(e){return!this.isFinished&&(this.isPaused?this.generatedError=e:(this.isFinished=!0,this.emit("error",e),this.previous&&this.previous.error(e),this.cleanUp()),!0)},on:function(e,t){return this._listeners[e].push(t),this},cleanUp:function(){this.streamInfo=this.generatedError=this.extraStreamInfo=null,this._listeners=[]},emit:function(e,t){if(this._listeners[e])for(var n=0;n<this._listeners[e].length;n++)this._listeners[e][n].call(this,t)},pipe:function(e){return e.registerPrevious(this)},registerPrevious:function(e){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.streamInfo=e.streamInfo,this.mergeStreamInfo(),this.previous=e;var t=this;return e.on("data",(function(e){t.processChunk(e)})),e.on("end",(function(){t.end()})),e.on("error",(function(e){t.error(e)})),this},pause:function(){return!this.isPaused&&!this.isFinished&&(this.isPaused=!0,this.previous&&this.previous.pause(),!0)},resume:function(){if(!this.isPaused||this.isFinished)return!1;var e=this.isPaused=!1;return this.generatedError&&(this.error(this.generatedError),e=!0),this.previous&&this.previous.resume(),!e},flush:function(){},processChunk:function(e){this.push(e)},withStreamInfo:function(e,t){return this.extraStreamInfo[e]=t,this.mergeStreamInfo(),this},mergeStreamInfo:function(){for(var e in this.extraStreamInfo)Object.prototype.hasOwnProperty.call(this.extraStreamInfo,e)&&(this.streamInfo[e]=this.extraStreamInfo[e])},lock:function(){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.isLocked=!0,this.previous&&this.previous.lock()},toString:function(){var e="Worker "+this.name;return this.previous?this.previous+" -> "+e:e}},t.exports=i},{}],29:[function(e,n,i){"use strict";var r=e("../utils"),o=e("./ConvertWorker"),a=e("./GenericWorker"),c=e("../base64"),s=e("../support"),u=e("../external"),d=null;if(s.nodestream)try{d=e("../nodejs/NodejsStreamOutputAdapter")}catch(e){}function l(e,t,n){var i=t;switch(t){case"blob":case"arraybuffer":i="uint8array";break;case"base64":i="string"}try{this._internalType=i,this._outputType=t,this._mimeType=n,r.checkSupport(i),this._worker=e.pipe(new o(i)),e.lock()}catch(e){this._worker=new a("error"),this._worker.error(e)}}l.prototype={accumulate:function(e){return function(e,n){return new u.Promise((function(i,o){var a=[],s=e._internalType,u=e._outputType,d=e._mimeType;e.on("data",(function(e,t){a.push(e),n&&n(t)})).on("error",(function(e){a=[],o(e)})).on("end",(function(){try{var e=function(e,t,n){switch(e){case"blob":return r.newBlob(r.transformTo("arraybuffer",t),n);case"base64":return c.encode(t);default:return r.transformTo(e,t)}}(u,function(e,n){var i,r=0,o=null,a=0;for(i=0;i<n.length;i++)a+=n[i].length;switch(e){case"string":return n.join("");case"array":return Array.prototype.concat.apply([],n);case"uint8array":for(o=new Uint8Array(a),i=0;i<n.length;i++)o.set(n[i],r),r+=n[i].length;return o;case"nodebuffer":return t.concat(n);default:throw new Error("concat : unsupported type '"+e+"'")}}(s,a),d);i(e)}catch(e){o(e)}a=[]})).resume()}))}(this,e)},on:function(e,t){var n=this;return"data"===e?this._worker.on(e,(function(e){t.call(n,e.data,e.meta)})):this._worker.on(e,(function(){r.delay(t,arguments,n)})),this},resume:function(){return r.delay(this._worker.resume,[],this._worker),this},pause:function(){return this._worker.pause(),this},toNodejsStream:function(e){if(r.checkSupport("nodestream"),"nodebuffer"!==this._outputType)throw new Error(this._outputType+" is not supported by this method");return new d(this,{objectMode:"nodebuffer"!==this._outputType},e)}},n.exports=l},{"../base64":1,"../external":6,"../nodejs/NodejsStreamOutputAdapter":13,"../support":30,"../utils":32,"./ConvertWorker":24,"./GenericWorker":28}],30:[function(e,n,i){"use strict";if(i.base64=!0,i.array=!0,i.string=!0,i.arraybuffer="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof Uint8Array,i.nodebuffer=void 0!==t,i.uint8array="undefined"!=typeof Uint8Array,"undefined"==typeof ArrayBuffer)i.blob=!1;else{var r=new ArrayBuffer(0);try{i.blob=0===new Blob([r],{type:"application/zip"}).size}catch(e){try{var o=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);o.append(r),i.blob=0===o.getBlob("application/zip").size}catch(e){i.blob=!1}}}try{i.nodestream=!!e("readable-stream").Readable}catch(e){i.nodestream=!1}},{"readable-stream":16}],31:[function(e,t,n){"use strict";for(var i=e("./utils"),r=e("./support"),o=e("./nodejsUtils"),a=e("./stream/GenericWorker"),c=new Array(256),s=0;s<256;s++)c[s]=252<=s?6:248<=s?5:240<=s?4:224<=s?3:192<=s?2:1;function u(){a.call(this,"utf-8 decode"),this.leftOver=null}function d(){a.call(this,"utf-8 encode")}c[254]=c[254]=1,n.utf8encode=function(e){return r.nodebuffer?o.newBufferFrom(e,"utf-8"):function(e){var t,n,i,o,a,c=e.length,s=0;for(o=0;o<c;o++)55296==(64512&(n=e.charCodeAt(o)))&&o+1<c&&56320==(64512&(i=e.charCodeAt(o+1)))&&(n=65536+(n-55296<<10)+(i-56320),o++),s+=n<128?1:n<2048?2:n<65536?3:4;for(t=r.uint8array?new Uint8Array(s):new Array(s),o=a=0;a<s;o++)55296==(64512&(n=e.charCodeAt(o)))&&o+1<c&&56320==(64512&(i=e.charCodeAt(o+1)))&&(n=65536+(n-55296<<10)+(i-56320),o++),n<128?t[a++]=n:(n<2048?t[a++]=192|n>>>6:(n<65536?t[a++]=224|n>>>12:(t[a++]=240|n>>>18,t[a++]=128|n>>>12&63),t[a++]=128|n>>>6&63),t[a++]=128|63&n);return t}(e)},n.utf8decode=function(e){return r.nodebuffer?i.transformTo("nodebuffer",e).toString("utf-8"):function(e){var t,n,r,o,a=e.length,s=new Array(2*a);for(t=n=0;t<a;)if((r=e[t++])<128)s[n++]=r;else if(4<(o=c[r]))s[n++]=65533,t+=o-1;else{for(r&=2===o?31:3===o?15:7;1<o&&t<a;)r=r<<6|63&e[t++],o--;1<o?s[n++]=65533:r<65536?s[n++]=r:(r-=65536,s[n++]=55296|r>>10&1023,s[n++]=56320|1023&r)}return s.length!==n&&(s.subarray?s=s.subarray(0,n):s.length=n),i.applyFromCharCode(s)}(e=i.transformTo(r.uint8array?"uint8array":"array",e))},i.inherits(u,a),u.prototype.processChunk=function(e){var t=i.transformTo(r.uint8array?"uint8array":"array",e.data);if(this.leftOver&&this.leftOver.length){if(r.uint8array){var o=t;(t=new Uint8Array(o.length+this.leftOver.length)).set(this.leftOver,0),t.set(o,this.leftOver.length)}else t=this.leftOver.concat(t);this.leftOver=null}var a=function(e,t){var n;for((t=t||e.length)>e.length&&(t=e.length),n=t-1;0<=n&&128==(192&e[n]);)n--;return n<0||0===n?t:n+c[e[n]]>t?n:t}(t),s=t;a!==t.length&&(r.uint8array?(s=t.subarray(0,a),this.leftOver=t.subarray(a,t.length)):(s=t.slice(0,a),this.leftOver=t.slice(a,t.length))),this.push({data:n.utf8decode(s),meta:e.meta})},u.prototype.flush=function(){this.leftOver&&this.leftOver.length&&(this.push({data:n.utf8decode(this.leftOver),meta:{}}),this.leftOver=null)},n.Utf8DecodeWorker=u,i.inherits(d,a),d.prototype.processChunk=function(e){this.push({data:n.utf8encode(e.data),meta:e.meta})},n.Utf8EncodeWorker=d},{"./nodejsUtils":14,"./stream/GenericWorker":28,"./support":30,"./utils":32}],32:[function(e,t,i){"use strict";var r=e("./support"),o=e("./base64"),a=e("./nodejsUtils"),c=e("./external");function s(e){return e}function u(e,t){for(var n=0;n<e.length;++n)t[n]=255&e.charCodeAt(n);return t}e("setimmediate"),i.newBlob=function(e,t){i.checkSupport("blob");try{return new Blob([e],{type:t})}catch(i){try{var n=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);return n.append(e),n.getBlob(t)}catch(e){throw new Error("Bug : can't construct the Blob.")}}};var d={stringifyByChunk:function(e,t,n){var i=[],r=0,o=e.length;if(o<=n)return String.fromCharCode.apply(null,e);for(;r<o;)"array"===t||"nodebuffer"===t?i.push(String.fromCharCode.apply(null,e.slice(r,Math.min(r+n,o)))):i.push(String.fromCharCode.apply(null,e.subarray(r,Math.min(r+n,o)))),r+=n;return i.join("")},stringifyByChar:function(e){for(var t="",n=0;n<e.length;n++)t+=String.fromCharCode(e[n]);return t},applyCanBeUsed:{uint8array:function(){try{return r.uint8array&&1===String.fromCharCode.apply(null,new Uint8Array(1)).length}catch(e){return!1}}(),nodebuffer:function(){try{return r.nodebuffer&&1===String.fromCharCode.apply(null,a.allocBuffer(1)).length}catch(e){return!1}}()}};function l(e){var t=65536,n=i.getTypeOf(e),r=!0;if("uint8array"===n?r=d.applyCanBeUsed.uint8array:"nodebuffer"===n&&(r=d.applyCanBeUsed.nodebuffer),r)for(;1<t;)try{return d.stringifyByChunk(e,n,t)}catch(e){t=Math.floor(t/2)}return d.stringifyByChar(e)}function f(e,t){for(var n=0;n<e.length;n++)t[n]=e[n];return t}i.applyFromCharCode=l;var h={};h.string={string:s,array:function(e){return u(e,new Array(e.length))},arraybuffer:function(e){return h.string.uint8array(e).buffer},uint8array:function(e){return u(e,new Uint8Array(e.length))},nodebuffer:function(e){return u(e,a.allocBuffer(e.length))}},h.array={string:l,array:s,arraybuffer:function(e){return new Uint8Array(e).buffer},uint8array:function(e){return new Uint8Array(e)},nodebuffer:function(e){return a.newBufferFrom(e)}},h.arraybuffer={string:function(e){return l(new Uint8Array(e))},array:function(e){return f(new Uint8Array(e),new Array(e.byteLength))},arraybuffer:s,uint8array:function(e){return new Uint8Array(e)},nodebuffer:function(e){return a.newBufferFrom(new Uint8Array(e))}},h.uint8array={string:l,array:function(e){return f(e,new Array(e.length))},arraybuffer:function(e){return e.buffer},uint8array:s,nodebuffer:function(e){return a.newBufferFrom(e)}},h.nodebuffer={string:l,array:function(e){return f(e,new Array(e.length))},arraybuffer:function(e){return h.nodebuffer.uint8array(e).buffer},uint8array:function(e){return f(e,new Uint8Array(e.length))},nodebuffer:s},i.transformTo=function(e,t){if(t=t||"",!e)return t;i.checkSupport(e);var n=i.getTypeOf(t);return h[n][e](t)},i.resolve=function(e){for(var t=e.split("/"),n=[],i=0;i<t.length;i++){var r=t[i];"."===r||""===r&&0!==i&&i!==t.length-1||(".."===r?n.pop():n.push(r))}return n.join("/")},i.getTypeOf=function(e){return"string"==typeof e?"string":"[object Array]"===Object.prototype.toString.call(e)?"array":r.nodebuffer&&a.isBuffer(e)?"nodebuffer":r.uint8array&&e instanceof Uint8Array?"uint8array":r.arraybuffer&&e instanceof ArrayBuffer?"arraybuffer":void 0},i.checkSupport=function(e){if(!r[e.toLowerCase()])throw new Error(e+" is not supported by this platform")},i.MAX_VALUE_16BITS=65535,i.MAX_VALUE_32BITS=-1,i.pretty=function(e){var t,n,i="";for(n=0;n<(e||"").length;n++)i+="\\x"+((t=e.charCodeAt(n))<16?"0":"")+t.toString(16).toUpperCase();return i},i.delay=function(e,t,i){n((function(){e.apply(i||null,t||[])}))},i.inherits=function(e,t){function n(){}n.prototype=t.prototype,e.prototype=new n},i.extend=function(){var e,t,n={};for(e=0;e<arguments.length;e++)for(t in arguments[e])Object.prototype.hasOwnProperty.call(arguments[e],t)&&void 0===n[t]&&(n[t]=arguments[e][t]);return n},i.prepareContent=function(e,t,n,a,s){return c.Promise.resolve(t).then((function(e){return r.blob&&(e instanceof Blob||-1!==["[object File]","[object Blob]"].indexOf(Object.prototype.toString.call(e)))&&"undefined"!=typeof FileReader?new c.Promise((function(t,n){var i=new FileReader;i.onload=function(e){t(e.target.result)},i.onerror=function(e){n(e.target.error)},i.readAsArrayBuffer(e)})):e})).then((function(t){var d=i.getTypeOf(t);return d?("arraybuffer"===d?t=i.transformTo("uint8array",t):"string"===d&&(s?t=o.decode(t):n&&!0!==a&&(t=function(e){return u(e,r.uint8array?new Uint8Array(e.length):new Array(e.length))}(t))),t):c.Promise.reject(new Error("Can't read the data of '"+e+"'. Is it in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?"))}))}},{"./base64":1,"./external":6,"./nodejsUtils":14,"./support":30,setimmediate:54}],33:[function(e,t,n){"use strict";var i=e("./reader/readerFor"),r=e("./utils"),o=e("./signature"),a=e("./zipEntry"),c=e("./support");function s(e){this.files=[],this.loadOptions=e}s.prototype={checkSignature:function(e){if(!this.reader.readAndCheckSignature(e)){this.reader.index-=4;var t=this.reader.readString(4);throw new Error("Corrupted zip or bug: unexpected signature ("+r.pretty(t)+", expected "+r.pretty(e)+")")}},isSignature:function(e,t){var n=this.reader.index;this.reader.setIndex(e);var i=this.reader.readString(4)===t;return this.reader.setIndex(n),i},readBlockEndOfCentral:function(){this.diskNumber=this.reader.readInt(2),this.diskWithCentralDirStart=this.reader.readInt(2),this.centralDirRecordsOnThisDisk=this.reader.readInt(2),this.centralDirRecords=this.reader.readInt(2),this.centralDirSize=this.reader.readInt(4),this.centralDirOffset=this.reader.readInt(4),this.zipCommentLength=this.reader.readInt(2);var e=this.reader.readData(this.zipCommentLength),t=c.uint8array?"uint8array":"array",n=r.transformTo(t,e);this.zipComment=this.loadOptions.decodeFileName(n)},readBlockZip64EndOfCentral:function(){this.zip64EndOfCentralSize=this.reader.readInt(8),this.reader.skip(4),this.diskNumber=this.reader.readInt(4),this.diskWithCentralDirStart=this.reader.readInt(4),this.centralDirRecordsOnThisDisk=this.reader.readInt(8),this.centralDirRecords=this.reader.readInt(8),this.centralDirSize=this.reader.readInt(8),this.centralDirOffset=this.reader.readInt(8),this.zip64ExtensibleData={};for(var e,t,n,i=this.zip64EndOfCentralSize-44;0<i;)e=this.reader.readInt(2),t=this.reader.readInt(4),n=this.reader.readData(t),this.zip64ExtensibleData[e]={id:e,length:t,value:n}},readBlockZip64EndOfCentralLocator:function(){if(this.diskWithZip64CentralDirStart=this.reader.readInt(4),this.relativeOffsetEndOfZip64CentralDir=this.reader.readInt(8),this.disksCount=this.reader.readInt(4),1<this.disksCount)throw new Error("Multi-volumes zip are not supported")},readLocalFiles:function(){var e,t;for(e=0;e<this.files.length;e++)t=this.files[e],this.reader.setIndex(t.localHeaderOffset),this.checkSignature(o.LOCAL_FILE_HEADER),t.readLocalPart(this.reader),t.handleUTF8(),t.processAttributes()},readCentralDir:function(){var e;for(this.reader.setIndex(this.centralDirOffset);this.reader.readAndCheckSignature(o.CENTRAL_FILE_HEADER);)(e=new a({zip64:this.zip64},this.loadOptions)).readCentralPart(this.reader),this.files.push(e);if(this.centralDirRecords!==this.files.length&&0!==this.centralDirRecords&&0===this.files.length)throw new Error("Corrupted zip or bug: expected "+this.centralDirRecords+" records in central dir, got "+this.files.length)},readEndOfCentral:function(){var e=this.reader.lastIndexOfSignature(o.CENTRAL_DIRECTORY_END);if(e<0)throw this.isSignature(0,o.LOCAL_FILE_HEADER)?new Error("Corrupted zip: can't find end of central directory"):new Error("Can't find end of central directory : is this a zip file ? If it is, see https://stuk.github.io/jszip/documentation/howto/read_zip.html");this.reader.setIndex(e);var t=e;if(this.checkSignature(o.CENTRAL_DIRECTORY_END),this.readBlockEndOfCentral(),this.diskNumber===r.MAX_VALUE_16BITS||this.diskWithCentralDirStart===r.MAX_VALUE_16BITS||this.centralDirRecordsOnThisDisk===r.MAX_VALUE_16BITS||this.centralDirRecords===r.MAX_VALUE_16BITS||this.centralDirSize===r.MAX_VALUE_32BITS||this.centralDirOffset===r.MAX_VALUE_32BITS){if(this.zip64=!0,(e=this.reader.lastIndexOfSignature(o.ZIP64_CENTRAL_DIRECTORY_LOCATOR))<0)throw new Error("Corrupted zip: can't find the ZIP64 end of central directory locator");if(this.reader.setIndex(e),this.checkSignature(o.ZIP64_CENTRAL_DIRECTORY_LOCATOR),this.readBlockZip64EndOfCentralLocator(),!this.isSignature(this.relativeOffsetEndOfZip64CentralDir,o.ZIP64_CENTRAL_DIRECTORY_END)&&(this.relativeOffsetEndOfZip64CentralDir=this.reader.lastIndexOfSignature(o.ZIP64_CENTRAL_DIRECTORY_END),this.relativeOffsetEndOfZip64CentralDir<0))throw new Error("Corrupted zip: can't find the ZIP64 end of central directory");this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir),this.checkSignature(o.ZIP64_CENTRAL_DIRECTORY_END),this.readBlockZip64EndOfCentral()}var n=this.centralDirOffset+this.centralDirSize;this.zip64&&(n+=20,n+=12+this.zip64EndOfCentralSize);var i=t-n;if(0<i)this.isSignature(t,o.CENTRAL_FILE_HEADER)||(this.reader.zero=i);else if(i<0)throw new Error("Corrupted zip: missing "+Math.abs(i)+" bytes.")},prepareReader:function(e){this.reader=i(e)},load:function(e){this.prepareReader(e),this.readEndOfCentral(),this.readCentralDir(),this.readLocalFiles()}},t.exports=s},{"./reader/readerFor":22,"./signature":23,"./support":30,"./utils":32,"./zipEntry":34}],34:[function(e,t,n){"use strict";var i=e("./reader/readerFor"),r=e("./utils"),o=e("./compressedObject"),a=e("./crc32"),c=e("./utf8"),s=e("./compressions"),u=e("./support");function d(e,t){this.options=e,this.loadOptions=t}d.prototype={isEncrypted:function(){return 1==(1&this.bitFlag)},useUTF8:function(){return 2048==(2048&this.bitFlag)},readLocalPart:function(e){var t,n;if(e.skip(22),this.fileNameLength=e.readInt(2),n=e.readInt(2),this.fileName=e.readData(this.fileNameLength),e.skip(n),-1===this.compressedSize||-1===this.uncompressedSize)throw new Error("Bug or corrupted zip : didn't get enough information from the central directory (compressedSize === -1 || uncompressedSize === -1)");if(null===(t=function(e){for(var t in s)if(Object.prototype.hasOwnProperty.call(s,t)&&s[t].magic===e)return s[t];return null}(this.compressionMethod)))throw new Error("Corrupted zip : compression "+r.pretty(this.compressionMethod)+" unknown (inner file : "+r.transformTo("string",this.fileName)+")");this.decompressed=new o(this.compressedSize,this.uncompressedSize,this.crc32,t,e.readData(this.compressedSize))},readCentralPart:function(e){this.versionMadeBy=e.readInt(2),e.skip(2),this.bitFlag=e.readInt(2),this.compressionMethod=e.readString(2),this.date=e.readDate(),this.crc32=e.readInt(4),this.compressedSize=e.readInt(4),this.uncompressedSize=e.readInt(4);var t=e.readInt(2);if(this.extraFieldsLength=e.readInt(2),this.fileCommentLength=e.readInt(2),this.diskNumberStart=e.readInt(2),this.internalFileAttributes=e.readInt(2),this.externalFileAttributes=e.readInt(4),this.localHeaderOffset=e.readInt(4),this.isEncrypted())throw new Error("Encrypted zip are not supported");e.skip(t),this.readExtraFields(e),this.parseZIP64ExtraField(e),this.fileComment=e.readData(this.fileCommentLength)},processAttributes:function(){this.unixPermissions=null,this.dosPermissions=null;var e=this.versionMadeBy>>8;this.dir=!!(16&this.externalFileAttributes),0==e&&(this.dosPermissions=63&this.externalFileAttributes),3==e&&(this.unixPermissions=this.externalFileAttributes>>16&65535),this.dir||"/"!==this.fileNameStr.slice(-1)||(this.dir=!0)},parseZIP64ExtraField:function(){if(this.extraFields[1]){var e=i(this.extraFields[1].value);this.uncompressedSize===r.MAX_VALUE_32BITS&&(this.uncompressedSize=e.readInt(8)),this.compressedSize===r.MAX_VALUE_32BITS&&(this.compressedSize=e.readInt(8)),this.localHeaderOffset===r.MAX_VALUE_32BITS&&(this.localHeaderOffset=e.readInt(8)),this.diskNumberStart===r.MAX_VALUE_32BITS&&(this.diskNumberStart=e.readInt(4))}},readExtraFields:function(e){var t,n,i,r=e.index+this.extraFieldsLength;for(this.extraFields||(this.extraFields={});e.index+4<r;)t=e.readInt(2),n=e.readInt(2),i=e.readData(n),this.extraFields[t]={id:t,length:n,value:i};e.setIndex(r)},handleUTF8:function(){var e=u.uint8array?"uint8array":"array";if(this.useUTF8())this.fileNameStr=c.utf8decode(this.fileName),this.fileCommentStr=c.utf8decode(this.fileComment);else{var t=this.findExtraFieldUnicodePath();if(null!==t)this.fileNameStr=t;else{var n=r.transformTo(e,this.fileName);this.fileNameStr=this.loadOptions.decodeFileName(n)}var i=this.findExtraFieldUnicodeComment();if(null!==i)this.fileCommentStr=i;else{var o=r.transformTo(e,this.fileComment);this.fileCommentStr=this.loadOptions.decodeFileName(o)}}},findExtraFieldUnicodePath:function(){var e=this.extraFields[28789];if(e){var t=i(e.value);return 1!==t.readInt(1)||a(this.fileName)!==t.readInt(4)?null:c.utf8decode(t.readData(e.length-5))}return null},findExtraFieldUnicodeComment:function(){var e=this.extraFields[25461];if(e){var t=i(e.value);return 1!==t.readInt(1)||a(this.fileComment)!==t.readInt(4)?null:c.utf8decode(t.readData(e.length-5))}return null}},t.exports=d},{"./compressedObject":2,"./compressions":3,"./crc32":4,"./reader/readerFor":22,"./support":30,"./utf8":31,"./utils":32}],35:[function(e,t,n){"use strict";function i(e,t,n){this.name=e,this.dir=n.dir,this.date=n.date,this.comment=n.comment,this.unixPermissions=n.unixPermissions,this.dosPermissions=n.dosPermissions,this._data=t,this._dataBinary=n.binary,this.options={compression:n.compression,compressionOptions:n.compressionOptions}}var r=e("./stream/StreamHelper"),o=e("./stream/DataWorker"),a=e("./utf8"),c=e("./compressedObject"),s=e("./stream/GenericWorker");i.prototype={internalStream:function(e){var t=null,n="string";try{if(!e)throw new Error("No output type specified.");var i="string"===(n=e.toLowerCase())||"text"===n;"binarystring"!==n&&"text"!==n||(n="string"),t=this._decompressWorker();var o=!this._dataBinary;o&&!i&&(t=t.pipe(new a.Utf8EncodeWorker)),!o&&i&&(t=t.pipe(new a.Utf8DecodeWorker))}catch(e){(t=new s("error")).error(e)}return new r(t,n,"")},async:function(e,t){return this.internalStream(e).accumulate(t)},nodeStream:function(e,t){return this.internalStream(e||"nodebuffer").toNodejsStream(t)},_compressWorker:function(e,t){if(this._data instanceof c&&this._data.compression.magic===e.magic)return this._data.getCompressedWorker();var n=this._decompressWorker();return this._dataBinary||(n=n.pipe(new a.Utf8EncodeWorker)),c.createWorkerFrom(n,e,t)},_decompressWorker:function(){return this._data instanceof c?this._data.getContentWorker():this._data instanceof s?this._data:new o(this._data)}};for(var u=["asText","asBinary","asNodeBuffer","asUint8Array","asArrayBuffer"],d=function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},l=0;l<u.length;l++)i.prototype[u[l]]=d;t.exports=i},{"./compressedObject":2,"./stream/DataWorker":27,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31}],36:[function(e,t,n){(function(e){"use strict";var n,i,r=e.MutationObserver||e.WebKitMutationObserver;if(r){var o=0,a=new r(d),c=e.document.createTextNode("");a.observe(c,{characterData:!0}),n=function(){c.data=o=++o%2}}else if(e.setImmediate||void 0===e.MessageChannel)n="document"in e&&"onreadystatechange"in e.document.createElement("script")?function(){var t=e.document.createElement("script");t.onreadystatechange=function(){d(),t.onreadystatechange=null,t.parentNode.removeChild(t),t=null},e.document.documentElement.appendChild(t)}:function(){setTimeout(d,0)};else{var s=new e.MessageChannel;s.port1.onmessage=d,n=function(){s.port2.postMessage(0)}}var u=[];function d(){var e,t;i=!0;for(var n=u.length;n;){for(t=u,u=[],e=-1;++e<n;)t[e]();n=u.length}i=!1}t.exports=function(e){1!==u.push(e)||i||n()}}).call(this,void 0!==i?i:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],37:[function(e,t,n){"use strict";var i=e("immediate");function r(){}var o={},a=["REJECTED"],c=["FULFILLED"],s=["PENDING"];function u(e){if("function"!=typeof e)throw new TypeError("resolver must be a function");this.state=s,this.queue=[],this.outcome=void 0,e!==r&&h(this,e)}function d(e,t,n){this.promise=e,"function"==typeof t&&(this.onFulfilled=t,this.callFulfilled=this.otherCallFulfilled),"function"==typeof n&&(this.onRejected=n,this.callRejected=this.otherCallRejected)}function l(e,t,n){i((function(){var i;try{i=t(n)}catch(i){return o.reject(e,i)}i===e?o.reject(e,new TypeError("Cannot resolve promise with itself")):o.resolve(e,i)}))}function f(e){var t=e&&e.then;if(e&&("object"==typeof e||"function"==typeof e)&&"function"==typeof t)return function(){t.apply(e,arguments)}}function h(e,t){var n=!1;function i(t){n||(n=!0,o.reject(e,t))}function r(t){n||(n=!0,o.resolve(e,t))}var a=p((function(){t(r,i)}));"error"===a.status&&i(a.value)}function p(e,t){var n={};try{n.value=e(t),n.status="success"}catch(e){n.status="error",n.value=e}return n}(t.exports=u).prototype.finally=function(e){if("function"!=typeof e)return this;var t=this.constructor;return this.then((function(n){return t.resolve(e()).then((function(){return n}))}),(function(n){return t.resolve(e()).then((function(){throw n}))}))},u.prototype.catch=function(e){return this.then(null,e)},u.prototype.then=function(e,t){if("function"!=typeof e&&this.state===c||"function"!=typeof t&&this.state===a)return this;var n=new this.constructor(r);return this.state!==s?l(n,this.state===c?e:t,this.outcome):this.queue.push(new d(n,e,t)),n},d.prototype.callFulfilled=function(e){o.resolve(this.promise,e)},d.prototype.otherCallFulfilled=function(e){l(this.promise,this.onFulfilled,e)},d.prototype.callRejected=function(e){o.reject(this.promise,e)},d.prototype.otherCallRejected=function(e){l(this.promise,this.onRejected,e)},o.resolve=function(e,t){var n=p(f,t);if("error"===n.status)return o.reject(e,n.value);var i=n.value;if(i)h(e,i);else{e.state=c,e.outcome=t;for(var r=-1,a=e.queue.length;++r<a;)e.queue[r].callFulfilled(t)}return e},o.reject=function(e,t){e.state=a,e.outcome=t;for(var n=-1,i=e.queue.length;++n<i;)e.queue[n].callRejected(t);return e},u.resolve=function(e){return e instanceof this?e:o.resolve(new this(r),e)},u.reject=function(e){var t=new this(r);return o.reject(t,e)},u.all=function(e){var t=this;if("[object Array]"!==Object.prototype.toString.call(e))return this.reject(new TypeError("must be an array"));var n=e.length,i=!1;if(!n)return this.resolve([]);for(var a=new Array(n),c=0,s=-1,u=new this(r);++s<n;)d(e[s],s);return u;function d(e,r){t.resolve(e).then((function(e){a[r]=e,++c!==n||i||(i=!0,o.resolve(u,a))}),(function(e){i||(i=!0,o.reject(u,e))}))}},u.race=function(e){if("[object Array]"!==Object.prototype.toString.call(e))return this.reject(new TypeError("must be an array"));var t=e.length,n=!1;if(!t)return this.resolve([]);for(var i,a=-1,c=new this(r);++a<t;)i=e[a],this.resolve(i).then((function(e){n||(n=!0,o.resolve(c,e))}),(function(e){n||(n=!0,o.reject(c,e))}));return c}},{immediate:36}],38:[function(e,t,n){"use strict";var i={};(0,e("./lib/utils/common").assign)(i,e("./lib/deflate"),e("./lib/inflate"),e("./lib/zlib/constants")),t.exports=i},{"./lib/deflate":39,"./lib/inflate":40,"./lib/utils/common":41,"./lib/zlib/constants":44}],39:[function(e,t,n){"use strict";var i=e("./zlib/deflate"),r=e("./utils/common"),o=e("./utils/strings"),a=e("./zlib/messages"),c=e("./zlib/zstream"),s=Object.prototype.toString;function u(e){if(!(this instanceof u))return new u(e);this.options=r.assign({level:-1,method:8,chunkSize:16384,windowBits:15,memLevel:8,strategy:0,to:""},e||{});var t=this.options;t.raw&&0<t.windowBits?t.windowBits=-t.windowBits:t.gzip&&0<t.windowBits&&t.windowBits<16&&(t.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new c,this.strm.avail_out=0;var n=i.deflateInit2(this.strm,t.level,t.method,t.windowBits,t.memLevel,t.strategy);if(0!==n)throw new Error(a[n]);if(t.header&&i.deflateSetHeader(this.strm,t.header),t.dictionary){var d;if(d="string"==typeof t.dictionary?o.string2buf(t.dictionary):"[object ArrayBuffer]"===s.call(t.dictionary)?new Uint8Array(t.dictionary):t.dictionary,0!==(n=i.deflateSetDictionary(this.strm,d)))throw new Error(a[n]);this._dict_set=!0}}function d(e,t){var n=new u(t);if(n.push(e,!0),n.err)throw n.msg||a[n.err];return n.result}u.prototype.push=function(e,t){var n,a,c=this.strm,u=this.options.chunkSize;if(this.ended)return!1;a=t===~~t?t:!0===t?4:0,"string"==typeof e?c.input=o.string2buf(e):"[object ArrayBuffer]"===s.call(e)?c.input=new Uint8Array(e):c.input=e,c.next_in=0,c.avail_in=c.input.length;do{if(0===c.avail_out&&(c.output=new r.Buf8(u),c.next_out=0,c.avail_out=u),1!==(n=i.deflate(c,a))&&0!==n)return this.onEnd(n),!(this.ended=!0);0!==c.avail_out&&(0!==c.avail_in||4!==a&&2!==a)||("string"===this.options.to?this.onData(o.buf2binstring(r.shrinkBuf(c.output,c.next_out))):this.onData(r.shrinkBuf(c.output,c.next_out)))}while((0<c.avail_in||0===c.avail_out)&&1!==n);return 4===a?(n=i.deflateEnd(this.strm),this.onEnd(n),this.ended=!0,0===n):2!==a||(this.onEnd(0),!(c.avail_out=0))},u.prototype.onData=function(e){this.chunks.push(e)},u.prototype.onEnd=function(e){0===e&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=r.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg},n.Deflate=u,n.deflate=d,n.deflateRaw=function(e,t){return(t=t||{}).raw=!0,d(e,t)},n.gzip=function(e,t){return(t=t||{}).gzip=!0,d(e,t)}},{"./utils/common":41,"./utils/strings":42,"./zlib/deflate":46,"./zlib/messages":51,"./zlib/zstream":53}],40:[function(e,t,n){"use strict";var i=e("./zlib/inflate"),r=e("./utils/common"),o=e("./utils/strings"),a=e("./zlib/constants"),c=e("./zlib/messages"),s=e("./zlib/zstream"),u=e("./zlib/gzheader"),d=Object.prototype.toString;function l(e){if(!(this instanceof l))return new l(e);this.options=r.assign({chunkSize:16384,windowBits:0,to:""},e||{});var t=this.options;t.raw&&0<=t.windowBits&&t.windowBits<16&&(t.windowBits=-t.windowBits,0===t.windowBits&&(t.windowBits=-15)),!(0<=t.windowBits&&t.windowBits<16)||e&&e.windowBits||(t.windowBits+=32),15<t.windowBits&&t.windowBits<48&&0==(15&t.windowBits)&&(t.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new s,this.strm.avail_out=0;var n=i.inflateInit2(this.strm,t.windowBits);if(n!==a.Z_OK)throw new Error(c[n]);this.header=new u,i.inflateGetHeader(this.strm,this.header)}function f(e,t){var n=new l(t);if(n.push(e,!0),n.err)throw n.msg||c[n.err];return n.result}l.prototype.push=function(e,t){var n,c,s,u,l,f,h=this.strm,p=this.options.chunkSize,g=this.options.dictionary,m=!1;if(this.ended)return!1;c=t===~~t?t:!0===t?a.Z_FINISH:a.Z_NO_FLUSH,"string"==typeof e?h.input=o.binstring2buf(e):"[object ArrayBuffer]"===d.call(e)?h.input=new Uint8Array(e):h.input=e,h.next_in=0,h.avail_in=h.input.length;do{if(0===h.avail_out&&(h.output=new r.Buf8(p),h.next_out=0,h.avail_out=p),(n=i.inflate(h,a.Z_NO_FLUSH))===a.Z_NEED_DICT&&g&&(f="string"==typeof g?o.string2buf(g):"[object ArrayBuffer]"===d.call(g)?new Uint8Array(g):g,n=i.inflateSetDictionary(this.strm,f)),n===a.Z_BUF_ERROR&&!0===m&&(n=a.Z_OK,m=!1),n!==a.Z_STREAM_END&&n!==a.Z_OK)return this.onEnd(n),!(this.ended=!0);h.next_out&&(0!==h.avail_out&&n!==a.Z_STREAM_END&&(0!==h.avail_in||c!==a.Z_FINISH&&c!==a.Z_SYNC_FLUSH)||("string"===this.options.to?(s=o.utf8border(h.output,h.next_out),u=h.next_out-s,l=o.buf2string(h.output,s),h.next_out=u,h.avail_out=p-u,u&&r.arraySet(h.output,h.output,s,u,0),this.onData(l)):this.onData(r.shrinkBuf(h.output,h.next_out)))),0===h.avail_in&&0===h.avail_out&&(m=!0)}while((0<h.avail_in||0===h.avail_out)&&n!==a.Z_STREAM_END);return n===a.Z_STREAM_END&&(c=a.Z_FINISH),c===a.Z_FINISH?(n=i.inflateEnd(this.strm),this.onEnd(n),this.ended=!0,n===a.Z_OK):c!==a.Z_SYNC_FLUSH||(this.onEnd(a.Z_OK),!(h.avail_out=0))},l.prototype.onData=function(e){this.chunks.push(e)},l.prototype.onEnd=function(e){e===a.Z_OK&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=r.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg},n.Inflate=l,n.inflate=f,n.inflateRaw=function(e,t){return(t=t||{}).raw=!0,f(e,t)},n.ungzip=f},{"./utils/common":41,"./utils/strings":42,"./zlib/constants":44,"./zlib/gzheader":47,"./zlib/inflate":49,"./zlib/messages":51,"./zlib/zstream":53}],41:[function(e,t,n){"use strict";var i="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Int32Array;n.assign=function(e){for(var t=Array.prototype.slice.call(arguments,1);t.length;){var n=t.shift();if(n){if("object"!=typeof n)throw new TypeError(n+"must be non-object");for(var i in n)n.hasOwnProperty(i)&&(e[i]=n[i])}}return e},n.shrinkBuf=function(e,t){return e.length===t?e:e.subarray?e.subarray(0,t):(e.length=t,e)};var r={arraySet:function(e,t,n,i,r){if(t.subarray&&e.subarray)e.set(t.subarray(n,n+i),r);else for(var o=0;o<i;o++)e[r+o]=t[n+o]},flattenChunks:function(e){var t,n,i,r,o,a;for(t=i=0,n=e.length;t<n;t++)i+=e[t].length;for(a=new Uint8Array(i),t=r=0,n=e.length;t<n;t++)o=e[t],a.set(o,r),r+=o.length;return a}},o={arraySet:function(e,t,n,i,r){for(var o=0;o<i;o++)e[r+o]=t[n+o]},flattenChunks:function(e){return[].concat.apply([],e)}};n.setTyped=function(e){e?(n.Buf8=Uint8Array,n.Buf16=Uint16Array,n.Buf32=Int32Array,n.assign(n,r)):(n.Buf8=Array,n.Buf16=Array,n.Buf32=Array,n.assign(n,o))},n.setTyped(i)},{}],42:[function(e,t,n){"use strict";var i=e("./common"),r=!0,o=!0;try{String.fromCharCode.apply(null,[0])}catch(e){r=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(e){o=!1}for(var a=new i.Buf8(256),c=0;c<256;c++)a[c]=252<=c?6:248<=c?5:240<=c?4:224<=c?3:192<=c?2:1;function s(e,t){if(t<65537&&(e.subarray&&o||!e.subarray&&r))return String.fromCharCode.apply(null,i.shrinkBuf(e,t));for(var n="",a=0;a<t;a++)n+=String.fromCharCode(e[a]);return n}a[254]=a[254]=1,n.string2buf=function(e){var t,n,r,o,a,c=e.length,s=0;for(o=0;o<c;o++)55296==(64512&(n=e.charCodeAt(o)))&&o+1<c&&56320==(64512&(r=e.charCodeAt(o+1)))&&(n=65536+(n-55296<<10)+(r-56320),o++),s+=n<128?1:n<2048?2:n<65536?3:4;for(t=new i.Buf8(s),o=a=0;a<s;o++)55296==(64512&(n=e.charCodeAt(o)))&&o+1<c&&56320==(64512&(r=e.charCodeAt(o+1)))&&(n=65536+(n-55296<<10)+(r-56320),o++),n<128?t[a++]=n:(n<2048?t[a++]=192|n>>>6:(n<65536?t[a++]=224|n>>>12:(t[a++]=240|n>>>18,t[a++]=128|n>>>12&63),t[a++]=128|n>>>6&63),t[a++]=128|63&n);return t},n.buf2binstring=function(e){return s(e,e.length)},n.binstring2buf=function(e){for(var t=new i.Buf8(e.length),n=0,r=t.length;n<r;n++)t[n]=e.charCodeAt(n);return t},n.buf2string=function(e,t){var n,i,r,o,c=t||e.length,u=new Array(2*c);for(n=i=0;n<c;)if((r=e[n++])<128)u[i++]=r;else if(4<(o=a[r]))u[i++]=65533,n+=o-1;else{for(r&=2===o?31:3===o?15:7;1<o&&n<c;)r=r<<6|63&e[n++],o--;1<o?u[i++]=65533:r<65536?u[i++]=r:(r-=65536,u[i++]=55296|r>>10&1023,u[i++]=56320|1023&r)}return s(u,i)},n.utf8border=function(e,t){var n;for((t=t||e.length)>e.length&&(t=e.length),n=t-1;0<=n&&128==(192&e[n]);)n--;return n<0||0===n?t:n+a[e[n]]>t?n:t}},{"./common":41}],43:[function(e,t,n){"use strict";t.exports=function(e,t,n,i){for(var r=65535&e|0,o=e>>>16&65535|0,a=0;0!==n;){for(n-=a=2e3<n?2e3:n;o=o+(r=r+t[i++]|0)|0,--a;);r%=65521,o%=65521}return r|o<<16|0}},{}],44:[function(e,t,n){"use strict";t.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},{}],45:[function(e,t,n){"use strict";var i=function(){for(var e,t=[],n=0;n<256;n++){e=n;for(var i=0;i<8;i++)e=1&e?3988292384^e>>>1:e>>>1;t[n]=e}return t}();t.exports=function(e,t,n,r){var o=i,a=r+n;e^=-1;for(var c=r;c<a;c++)e=e>>>8^o[255&(e^t[c])];return-1^e}},{}],46:[function(e,t,n){"use strict";var i,r=e("../utils/common"),o=e("./trees"),a=e("./adler32"),c=e("./crc32"),s=e("./messages"),u=-2,d=258,l=262,f=113;function h(e,t){return e.msg=s[t],t}function p(e){return(e<<1)-(4<e?9:0)}function g(e){for(var t=e.length;0<=--t;)e[t]=0}function m(e){var t=e.state,n=t.pending;n>e.avail_out&&(n=e.avail_out),0!==n&&(r.arraySet(e.output,t.pending_buf,t.pending_out,n,e.next_out),e.next_out+=n,t.pending_out+=n,e.total_out+=n,e.avail_out-=n,t.pending-=n,0===t.pending&&(t.pending_out=0))}function y(e,t){o._tr_flush_block(e,0<=e.block_start?e.block_start:-1,e.strstart-e.block_start,t),e.block_start=e.strstart,m(e.strm)}function b(e,t){e.pending_buf[e.pending++]=t}function v(e,t){e.pending_buf[e.pending++]=t>>>8&255,e.pending_buf[e.pending++]=255&t}function _(e,t){var n,i,r=e.max_chain_length,o=e.strstart,a=e.prev_length,c=e.nice_match,s=e.strstart>e.w_size-l?e.strstart-(e.w_size-l):0,u=e.window,f=e.w_mask,h=e.prev,p=e.strstart+d,g=u[o+a-1],m=u[o+a];e.prev_length>=e.good_match&&(r>>=2),c>e.lookahead&&(c=e.lookahead);do{if(u[(n=t)+a]===m&&u[n+a-1]===g&&u[n]===u[o]&&u[++n]===u[o+1]){o+=2,n++;do{}while(u[++o]===u[++n]&&u[++o]===u[++n]&&u[++o]===u[++n]&&u[++o]===u[++n]&&u[++o]===u[++n]&&u[++o]===u[++n]&&u[++o]===u[++n]&&u[++o]===u[++n]&&o<p);if(i=d-(p-o),o=p-d,a<i){if(e.match_start=t,c<=(a=i))break;g=u[o+a-1],m=u[o+a]}}}while((t=h[t&f])>s&&0!=--r);return a<=e.lookahead?a:e.lookahead}function x(e){var t,n,i,o,s,u,d,f,h,p,g=e.w_size;do{if(o=e.window_size-e.lookahead-e.strstart,e.strstart>=g+(g-l)){for(r.arraySet(e.window,e.window,g,g,0),e.match_start-=g,e.strstart-=g,e.block_start-=g,t=n=e.hash_size;i=e.head[--t],e.head[t]=g<=i?i-g:0,--n;);for(t=n=g;i=e.prev[--t],e.prev[t]=g<=i?i-g:0,--n;);o+=g}if(0===e.strm.avail_in)break;if(u=e.strm,d=e.window,f=e.strstart+e.lookahead,p=void 0,(h=o)<(p=u.avail_in)&&(p=h),n=0===p?0:(u.avail_in-=p,r.arraySet(d,u.input,u.next_in,p,f),1===u.state.wrap?u.adler=a(u.adler,d,p,f):2===u.state.wrap&&(u.adler=c(u.adler,d,p,f)),u.next_in+=p,u.total_in+=p,p),e.lookahead+=n,e.lookahead+e.insert>=3)for(s=e.strstart-e.insert,e.ins_h=e.window[s],e.ins_h=(e.ins_h<<e.hash_shift^e.window[s+1])&e.hash_mask;e.insert&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[s+3-1])&e.hash_mask,e.prev[s&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=s,s++,e.insert--,!(e.lookahead+e.insert<3)););}while(e.lookahead<l&&0!==e.strm.avail_in)}function D(e,t){for(var n,i;;){if(e.lookahead<l){if(x(e),e.lookahead<l&&0===t)return 1;if(0===e.lookahead)break}if(n=0,e.lookahead>=3&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,n=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!==n&&e.strstart-n<=e.w_size-l&&(e.match_length=_(e,n)),e.match_length>=3)if(i=o._tr_tally(e,e.strstart-e.match_start,e.match_length-3),e.lookahead-=e.match_length,e.match_length<=e.max_lazy_match&&e.lookahead>=3){for(e.match_length--;e.strstart++,e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,n=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart,0!=--e.match_length;);e.strstart++}else e.strstart+=e.match_length,e.match_length=0,e.ins_h=e.window[e.strstart],e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+1])&e.hash_mask;else i=o._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++;if(i&&(y(e,!1),0===e.strm.avail_out))return 1}return e.insert=e.strstart<2?e.strstart:2,4===t?(y(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(y(e,!1),0===e.strm.avail_out)?1:2}function w(e,t){for(var n,i,r;;){if(e.lookahead<l){if(x(e),e.lookahead<l&&0===t)return 1;if(0===e.lookahead)break}if(n=0,e.lookahead>=3&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,n=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),e.prev_length=e.match_length,e.prev_match=e.match_start,e.match_length=2,0!==n&&e.prev_length<e.max_lazy_match&&e.strstart-n<=e.w_size-l&&(e.match_length=_(e,n),e.match_length<=5&&(1===e.strategy||3===e.match_length&&4096<e.strstart-e.match_start)&&(e.match_length=2)),e.prev_length>=3&&e.match_length<=e.prev_length){for(r=e.strstart+e.lookahead-3,i=o._tr_tally(e,e.strstart-1-e.prev_match,e.prev_length-3),e.lookahead-=e.prev_length-1,e.prev_length-=2;++e.strstart<=r&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,n=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!=--e.prev_length;);if(e.match_available=0,e.match_length=2,e.strstart++,i&&(y(e,!1),0===e.strm.avail_out))return 1}else if(e.match_available){if((i=o._tr_tally(e,0,e.window[e.strstart-1]))&&y(e,!1),e.strstart++,e.lookahead--,0===e.strm.avail_out)return 1}else e.match_available=1,e.strstart++,e.lookahead--}return e.match_available&&(i=o._tr_tally(e,0,e.window[e.strstart-1]),e.match_available=0),e.insert=e.strstart<2?e.strstart:2,4===t?(y(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(y(e,!1),0===e.strm.avail_out)?1:2}function U(e,t,n,i,r){this.good_length=e,this.max_lazy=t,this.nice_length=n,this.max_chain=i,this.func=r}function T(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=8,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new r.Buf16(1146),this.dyn_dtree=new r.Buf16(122),this.bl_tree=new r.Buf16(78),g(this.dyn_ltree),g(this.dyn_dtree),g(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new r.Buf16(16),this.heap=new r.Buf16(573),g(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new r.Buf16(573),g(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function E(e){var t;return e&&e.state?(e.total_in=e.total_out=0,e.data_type=2,(t=e.state).pending=0,t.pending_out=0,t.wrap<0&&(t.wrap=-t.wrap),t.status=t.wrap?42:f,e.adler=2===t.wrap?0:1,t.last_flush=0,o._tr_init(t),0):h(e,u)}function k(e){var t=E(e);return 0===t&&function(e){e.window_size=2*e.w_size,g(e.head),e.max_lazy_match=i[e.level].max_lazy,e.good_match=i[e.level].good_length,e.nice_match=i[e.level].nice_length,e.max_chain_length=i[e.level].max_chain,e.strstart=0,e.block_start=0,e.lookahead=0,e.insert=0,e.match_length=e.prev_length=2,e.match_available=0,e.ins_h=0}(e.state),t}function C(e,t,n,i,o,a){if(!e)return u;var c=1;if(-1===t&&(t=6),i<0?(c=0,i=-i):15<i&&(c=2,i-=16),o<1||9<o||8!==n||i<8||15<i||t<0||9<t||a<0||4<a)return h(e,u);8===i&&(i=9);var s=new T;return(e.state=s).strm=e,s.wrap=c,s.gzhead=null,s.w_bits=i,s.w_size=1<<s.w_bits,s.w_mask=s.w_size-1,s.hash_bits=o+7,s.hash_size=1<<s.hash_bits,s.hash_mask=s.hash_size-1,s.hash_shift=~~((s.hash_bits+3-1)/3),s.window=new r.Buf8(2*s.w_size),s.head=new r.Buf16(s.hash_size),s.prev=new r.Buf16(s.w_size),s.lit_bufsize=1<<o+6,s.pending_buf_size=4*s.lit_bufsize,s.pending_buf=new r.Buf8(s.pending_buf_size),s.d_buf=1*s.lit_bufsize,s.l_buf=3*s.lit_bufsize,s.level=t,s.strategy=a,s.method=n,k(e)}i=[new U(0,0,0,0,(function(e,t){var n=65535;for(n>e.pending_buf_size-5&&(n=e.pending_buf_size-5);;){if(e.lookahead<=1){if(x(e),0===e.lookahead&&0===t)return 1;if(0===e.lookahead)break}e.strstart+=e.lookahead,e.lookahead=0;var i=e.block_start+n;if((0===e.strstart||e.strstart>=i)&&(e.lookahead=e.strstart-i,e.strstart=i,y(e,!1),0===e.strm.avail_out))return 1;if(e.strstart-e.block_start>=e.w_size-l&&(y(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(y(e,!0),0===e.strm.avail_out?3:4):(e.strstart>e.block_start&&(y(e,!1),e.strm.avail_out),1)})),new U(4,4,8,4,D),new U(4,5,16,8,D),new U(4,6,32,32,D),new U(4,4,16,16,w),new U(8,16,32,32,w),new U(8,16,128,128,w),new U(8,32,128,256,w),new U(32,128,258,1024,w),new U(32,258,258,4096,w)],n.deflateInit=function(e,t){return C(e,t,8,15,8,0)},n.deflateInit2=C,n.deflateReset=k,n.deflateResetKeep=E,n.deflateSetHeader=function(e,t){return e&&e.state?2!==e.state.wrap?u:(e.state.gzhead=t,0):u},n.deflate=function(e,t){var n,r,a,s;if(!e||!e.state||5<t||t<0)return e?h(e,u):u;if(r=e.state,!e.output||!e.input&&0!==e.avail_in||666===r.status&&4!==t)return h(e,0===e.avail_out?-5:u);if(r.strm=e,n=r.last_flush,r.last_flush=t,42===r.status)if(2===r.wrap)e.adler=0,b(r,31),b(r,139),b(r,8),r.gzhead?(b(r,(r.gzhead.text?1:0)+(r.gzhead.hcrc?2:0)+(r.gzhead.extra?4:0)+(r.gzhead.name?8:0)+(r.gzhead.comment?16:0)),b(r,255&r.gzhead.time),b(r,r.gzhead.time>>8&255),b(r,r.gzhead.time>>16&255),b(r,r.gzhead.time>>24&255),b(r,9===r.level?2:2<=r.strategy||r.level<2?4:0),b(r,255&r.gzhead.os),r.gzhead.extra&&r.gzhead.extra.length&&(b(r,255&r.gzhead.extra.length),b(r,r.gzhead.extra.length>>8&255)),r.gzhead.hcrc&&(e.adler=c(e.adler,r.pending_buf,r.pending,0)),r.gzindex=0,r.status=69):(b(r,0),b(r,0),b(r,0),b(r,0),b(r,0),b(r,9===r.level?2:2<=r.strategy||r.level<2?4:0),b(r,3),r.status=f);else{var l=8+(r.w_bits-8<<4)<<8;l|=(2<=r.strategy||r.level<2?0:r.level<6?1:6===r.level?2:3)<<6,0!==r.strstart&&(l|=32),l+=31-l%31,r.status=f,v(r,l),0!==r.strstart&&(v(r,e.adler>>>16),v(r,65535&e.adler)),e.adler=1}if(69===r.status)if(r.gzhead.extra){for(a=r.pending;r.gzindex<(65535&r.gzhead.extra.length)&&(r.pending!==r.pending_buf_size||(r.gzhead.hcrc&&r.pending>a&&(e.adler=c(e.adler,r.pending_buf,r.pending-a,a)),m(e),a=r.pending,r.pending!==r.pending_buf_size));)b(r,255&r.gzhead.extra[r.gzindex]),r.gzindex++;r.gzhead.hcrc&&r.pending>a&&(e.adler=c(e.adler,r.pending_buf,r.pending-a,a)),r.gzindex===r.gzhead.extra.length&&(r.gzindex=0,r.status=73)}else r.status=73;if(73===r.status)if(r.gzhead.name){a=r.pending;do{if(r.pending===r.pending_buf_size&&(r.gzhead.hcrc&&r.pending>a&&(e.adler=c(e.adler,r.pending_buf,r.pending-a,a)),m(e),a=r.pending,r.pending===r.pending_buf_size)){s=1;break}s=r.gzindex<r.gzhead.name.length?255&r.gzhead.name.charCodeAt(r.gzindex++):0,b(r,s)}while(0!==s);r.gzhead.hcrc&&r.pending>a&&(e.adler=c(e.adler,r.pending_buf,r.pending-a,a)),0===s&&(r.gzindex=0,r.status=91)}else r.status=91;if(91===r.status)if(r.gzhead.comment){a=r.pending;do{if(r.pending===r.pending_buf_size&&(r.gzhead.hcrc&&r.pending>a&&(e.adler=c(e.adler,r.pending_buf,r.pending-a,a)),m(e),a=r.pending,r.pending===r.pending_buf_size)){s=1;break}s=r.gzindex<r.gzhead.comment.length?255&r.gzhead.comment.charCodeAt(r.gzindex++):0,b(r,s)}while(0!==s);r.gzhead.hcrc&&r.pending>a&&(e.adler=c(e.adler,r.pending_buf,r.pending-a,a)),0===s&&(r.status=103)}else r.status=103;if(103===r.status&&(r.gzhead.hcrc?(r.pending+2>r.pending_buf_size&&m(e),r.pending+2<=r.pending_buf_size&&(b(r,255&e.adler),b(r,e.adler>>8&255),e.adler=0,r.status=f)):r.status=f),0!==r.pending){if(m(e),0===e.avail_out)return r.last_flush=-1,0}else if(0===e.avail_in&&p(t)<=p(n)&&4!==t)return h(e,-5);if(666===r.status&&0!==e.avail_in)return h(e,-5);if(0!==e.avail_in||0!==r.lookahead||0!==t&&666!==r.status){var _=2===r.strategy?function(e,t){for(var n;;){if(0===e.lookahead&&(x(e),0===e.lookahead)){if(0===t)return 1;break}if(e.match_length=0,n=o._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++,n&&(y(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(y(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(y(e,!1),0===e.strm.avail_out)?1:2}(r,t):3===r.strategy?function(e,t){for(var n,i,r,a,c=e.window;;){if(e.lookahead<=d){if(x(e),e.lookahead<=d&&0===t)return 1;if(0===e.lookahead)break}if(e.match_length=0,e.lookahead>=3&&0<e.strstart&&(i=c[r=e.strstart-1])===c[++r]&&i===c[++r]&&i===c[++r]){a=e.strstart+d;do{}while(i===c[++r]&&i===c[++r]&&i===c[++r]&&i===c[++r]&&i===c[++r]&&i===c[++r]&&i===c[++r]&&i===c[++r]&&r<a);e.match_length=d-(a-r),e.match_length>e.lookahead&&(e.match_length=e.lookahead)}if(e.match_length>=3?(n=o._tr_tally(e,1,e.match_length-3),e.lookahead-=e.match_length,e.strstart+=e.match_length,e.match_length=0):(n=o._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++),n&&(y(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(y(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(y(e,!1),0===e.strm.avail_out)?1:2}(r,t):i[r.level].func(r,t);if(3!==_&&4!==_||(r.status=666),1===_||3===_)return 0===e.avail_out&&(r.last_flush=-1),0;if(2===_&&(1===t?o._tr_align(r):5!==t&&(o._tr_stored_block(r,0,0,!1),3===t&&(g(r.head),0===r.lookahead&&(r.strstart=0,r.block_start=0,r.insert=0))),m(e),0===e.avail_out))return r.last_flush=-1,0}return 4!==t?0:r.wrap<=0?1:(2===r.wrap?(b(r,255&e.adler),b(r,e.adler>>8&255),b(r,e.adler>>16&255),b(r,e.adler>>24&255),b(r,255&e.total_in),b(r,e.total_in>>8&255),b(r,e.total_in>>16&255),b(r,e.total_in>>24&255)):(v(r,e.adler>>>16),v(r,65535&e.adler)),m(e),0<r.wrap&&(r.wrap=-r.wrap),0!==r.pending?0:1)},n.deflateEnd=function(e){var t;return e&&e.state?42!==(t=e.state.status)&&69!==t&&73!==t&&91!==t&&103!==t&&t!==f&&666!==t?h(e,u):(e.state=null,t===f?h(e,-3):0):u},n.deflateSetDictionary=function(e,t){var n,i,o,c,s,d,l,f,h=t.length;if(!e||!e.state)return u;if(2===(c=(n=e.state).wrap)||1===c&&42!==n.status||n.lookahead)return u;for(1===c&&(e.adler=a(e.adler,t,h,0)),n.wrap=0,h>=n.w_size&&(0===c&&(g(n.head),n.strstart=0,n.block_start=0,n.insert=0),f=new r.Buf8(n.w_size),r.arraySet(f,t,h-n.w_size,n.w_size,0),t=f,h=n.w_size),s=e.avail_in,d=e.next_in,l=e.input,e.avail_in=h,e.next_in=0,e.input=t,x(n);n.lookahead>=3;){for(i=n.strstart,o=n.lookahead-2;n.ins_h=(n.ins_h<<n.hash_shift^n.window[i+3-1])&n.hash_mask,n.prev[i&n.w_mask]=n.head[n.ins_h],n.head[n.ins_h]=i,i++,--o;);n.strstart=i,n.lookahead=2,x(n)}return n.strstart+=n.lookahead,n.block_start=n.strstart,n.insert=n.lookahead,n.lookahead=0,n.match_length=n.prev_length=2,n.match_available=0,e.next_in=d,e.input=l,e.avail_in=s,n.wrap=c,0},n.deflateInfo="pako deflate (from Nodeca project)"},{"../utils/common":41,"./adler32":43,"./crc32":45,"./messages":51,"./trees":52}],47:[function(e,t,n){"use strict";t.exports=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}},{}],48:[function(e,t,n){"use strict";t.exports=function(e,t){var n,i,r,o,a,c,s,u,d,l,f,h,p,g,m,y,b,v,_,x,D,w,U,T,E;n=e.state,i=e.next_in,T=e.input,r=i+(e.avail_in-5),o=e.next_out,E=e.output,a=o-(t-e.avail_out),c=o+(e.avail_out-257),s=n.dmax,u=n.wsize,d=n.whave,l=n.wnext,f=n.window,h=n.hold,p=n.bits,g=n.lencode,m=n.distcode,y=(1<<n.lenbits)-1,b=(1<<n.distbits)-1;e:do{p<15&&(h+=T[i++]<<p,p+=8,h+=T[i++]<<p,p+=8),v=g[h&y];t:for(;;){if(h>>>=_=v>>>24,p-=_,0==(_=v>>>16&255))E[o++]=65535&v;else{if(!(16&_)){if(0==(64&_)){v=g[(65535&v)+(h&(1<<_)-1)];continue t}if(32&_){n.mode=12;break e}e.msg="invalid literal/length code",n.mode=30;break e}x=65535&v,(_&=15)&&(p<_&&(h+=T[i++]<<p,p+=8),x+=h&(1<<_)-1,h>>>=_,p-=_),p<15&&(h+=T[i++]<<p,p+=8,h+=T[i++]<<p,p+=8),v=m[h&b];n:for(;;){if(h>>>=_=v>>>24,p-=_,!(16&(_=v>>>16&255))){if(0==(64&_)){v=m[(65535&v)+(h&(1<<_)-1)];continue n}e.msg="invalid distance code",n.mode=30;break e}if(D=65535&v,p<(_&=15)&&(h+=T[i++]<<p,(p+=8)<_&&(h+=T[i++]<<p,p+=8)),s<(D+=h&(1<<_)-1)){e.msg="invalid distance too far back",n.mode=30;break e}if(h>>>=_,p-=_,(_=o-a)<D){if(d<(_=D-_)&&n.sane){e.msg="invalid distance too far back",n.mode=30;break e}if(U=f,(w=0)===l){if(w+=u-_,_<x){for(x-=_;E[o++]=f[w++],--_;);w=o-D,U=E}}else if(l<_){if(w+=u+l-_,(_-=l)<x){for(x-=_;E[o++]=f[w++],--_;);if(w=0,l<x){for(x-=_=l;E[o++]=f[w++],--_;);w=o-D,U=E}}}else if(w+=l-_,_<x){for(x-=_;E[o++]=f[w++],--_;);w=o-D,U=E}for(;2<x;)E[o++]=U[w++],E[o++]=U[w++],E[o++]=U[w++],x-=3;x&&(E[o++]=U[w++],1<x&&(E[o++]=U[w++]))}else{for(w=o-D;E[o++]=E[w++],E[o++]=E[w++],E[o++]=E[w++],2<(x-=3););x&&(E[o++]=E[w++],1<x&&(E[o++]=E[w++]))}break}}break}}while(i<r&&o<c);i-=x=p>>3,h&=(1<<(p-=x<<3))-1,e.next_in=i,e.next_out=o,e.avail_in=i<r?r-i+5:5-(i-r),e.avail_out=o<c?c-o+257:257-(o-c),n.hold=h,n.bits=p}},{}],49:[function(e,t,n){"use strict";var i=e("../utils/common"),r=e("./adler32"),o=e("./crc32"),a=e("./inffast"),c=e("./inftrees"),s=-2;function u(e){return(e>>>24&255)+(e>>>8&65280)+((65280&e)<<8)+((255&e)<<24)}function d(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new i.Buf16(320),this.work=new i.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function l(e){var t;return e&&e.state?(t=e.state,e.total_in=e.total_out=t.total=0,e.msg="",t.wrap&&(e.adler=1&t.wrap),t.mode=1,t.last=0,t.havedict=0,t.dmax=32768,t.head=null,t.hold=0,t.bits=0,t.lencode=t.lendyn=new i.Buf32(852),t.distcode=t.distdyn=new i.Buf32(592),t.sane=1,t.back=-1,0):s}function f(e){var t;return e&&e.state?((t=e.state).wsize=0,t.whave=0,t.wnext=0,l(e)):s}function h(e,t){var n,i;return e&&e.state?(i=e.state,t<0?(n=0,t=-t):(n=1+(t>>4),t<48&&(t&=15)),t&&(t<8||15<t)?s:(null!==i.window&&i.wbits!==t&&(i.window=null),i.wrap=n,i.wbits=t,f(e))):s}function p(e,t){var n,i;return e?(i=new d,(e.state=i).window=null,0!==(n=h(e,t))&&(e.state=null),n):s}var g,m,y=!0;function b(e){if(y){var t;for(g=new i.Buf32(512),m=new i.Buf32(32),t=0;t<144;)e.lens[t++]=8;for(;t<256;)e.lens[t++]=9;for(;t<280;)e.lens[t++]=7;for(;t<288;)e.lens[t++]=8;for(c(1,e.lens,0,288,g,0,e.work,{bits:9}),t=0;t<32;)e.lens[t++]=5;c(2,e.lens,0,32,m,0,e.work,{bits:5}),y=!1}e.lencode=g,e.lenbits=9,e.distcode=m,e.distbits=5}function v(e,t,n,r){var o,a=e.state;return null===a.window&&(a.wsize=1<<a.wbits,a.wnext=0,a.whave=0,a.window=new i.Buf8(a.wsize)),r>=a.wsize?(i.arraySet(a.window,t,n-a.wsize,a.wsize,0),a.wnext=0,a.whave=a.wsize):(r<(o=a.wsize-a.wnext)&&(o=r),i.arraySet(a.window,t,n-r,o,a.wnext),(r-=o)?(i.arraySet(a.window,t,n-r,r,0),a.wnext=r,a.whave=a.wsize):(a.wnext+=o,a.wnext===a.wsize&&(a.wnext=0),a.whave<a.wsize&&(a.whave+=o))),0}n.inflateReset=f,n.inflateReset2=h,n.inflateResetKeep=l,n.inflateInit=function(e){return p(e,15)},n.inflateInit2=p,n.inflate=function(e,t){var n,d,l,f,h,p,g,m,y,_,x,D,w,U,T,E,k,C,S,F,A,O,W,B,I=0,N=new i.Buf8(4),L=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!e||!e.state||!e.output||!e.input&&0!==e.avail_in)return s;12===(n=e.state).mode&&(n.mode=13),h=e.next_out,l=e.output,g=e.avail_out,f=e.next_in,d=e.input,p=e.avail_in,m=n.hold,y=n.bits,_=p,x=g,O=0;e:for(;;)switch(n.mode){case 1:if(0===n.wrap){n.mode=13;break}for(;y<16;){if(0===p)break e;p--,m+=d[f++]<<y,y+=8}if(2&n.wrap&&35615===m){N[n.check=0]=255&m,N[1]=m>>>8&255,n.check=o(n.check,N,2,0),y=m=0,n.mode=2;break}if(n.flags=0,n.head&&(n.head.done=!1),!(1&n.wrap)||(((255&m)<<8)+(m>>8))%31){e.msg="incorrect header check",n.mode=30;break}if(8!=(15&m)){e.msg="unknown compression method",n.mode=30;break}if(y-=4,A=8+(15&(m>>>=4)),0===n.wbits)n.wbits=A;else if(A>n.wbits){e.msg="invalid window size",n.mode=30;break}n.dmax=1<<A,e.adler=n.check=1,n.mode=512&m?10:12,y=m=0;break;case 2:for(;y<16;){if(0===p)break e;p--,m+=d[f++]<<y,y+=8}if(n.flags=m,8!=(255&n.flags)){e.msg="unknown compression method",n.mode=30;break}if(57344&n.flags){e.msg="unknown header flags set",n.mode=30;break}n.head&&(n.head.text=m>>8&1),512&n.flags&&(N[0]=255&m,N[1]=m>>>8&255,n.check=o(n.check,N,2,0)),y=m=0,n.mode=3;case 3:for(;y<32;){if(0===p)break e;p--,m+=d[f++]<<y,y+=8}n.head&&(n.head.time=m),512&n.flags&&(N[0]=255&m,N[1]=m>>>8&255,N[2]=m>>>16&255,N[3]=m>>>24&255,n.check=o(n.check,N,4,0)),y=m=0,n.mode=4;case 4:for(;y<16;){if(0===p)break e;p--,m+=d[f++]<<y,y+=8}n.head&&(n.head.xflags=255&m,n.head.os=m>>8),512&n.flags&&(N[0]=255&m,N[1]=m>>>8&255,n.check=o(n.check,N,2,0)),y=m=0,n.mode=5;case 5:if(1024&n.flags){for(;y<16;){if(0===p)break e;p--,m+=d[f++]<<y,y+=8}n.length=m,n.head&&(n.head.extra_len=m),512&n.flags&&(N[0]=255&m,N[1]=m>>>8&255,n.check=o(n.check,N,2,0)),y=m=0}else n.head&&(n.head.extra=null);n.mode=6;case 6:if(1024&n.flags&&(p<(D=n.length)&&(D=p),D&&(n.head&&(A=n.head.extra_len-n.length,n.head.extra||(n.head.extra=new Array(n.head.extra_len)),i.arraySet(n.head.extra,d,f,D,A)),512&n.flags&&(n.check=o(n.check,d,D,f)),p-=D,f+=D,n.length-=D),n.length))break e;n.length=0,n.mode=7;case 7:if(2048&n.flags){if(0===p)break e;for(D=0;A=d[f+D++],n.head&&A&&n.length<65536&&(n.head.name+=String.fromCharCode(A)),A&&D<p;);if(512&n.flags&&(n.check=o(n.check,d,D,f)),p-=D,f+=D,A)break e}else n.head&&(n.head.name=null);n.length=0,n.mode=8;case 8:if(4096&n.flags){if(0===p)break e;for(D=0;A=d[f+D++],n.head&&A&&n.length<65536&&(n.head.comment+=String.fromCharCode(A)),A&&D<p;);if(512&n.flags&&(n.check=o(n.check,d,D,f)),p-=D,f+=D,A)break e}else n.head&&(n.head.comment=null);n.mode=9;case 9:if(512&n.flags){for(;y<16;){if(0===p)break e;p--,m+=d[f++]<<y,y+=8}if(m!==(65535&n.check)){e.msg="header crc mismatch",n.mode=30;break}y=m=0}n.head&&(n.head.hcrc=n.flags>>9&1,n.head.done=!0),e.adler=n.check=0,n.mode=12;break;case 10:for(;y<32;){if(0===p)break e;p--,m+=d[f++]<<y,y+=8}e.adler=n.check=u(m),y=m=0,n.mode=11;case 11:if(0===n.havedict)return e.next_out=h,e.avail_out=g,e.next_in=f,e.avail_in=p,n.hold=m,n.bits=y,2;e.adler=n.check=1,n.mode=12;case 12:if(5===t||6===t)break e;case 13:if(n.last){m>>>=7&y,y-=7&y,n.mode=27;break}for(;y<3;){if(0===p)break e;p--,m+=d[f++]<<y,y+=8}switch(n.last=1&m,y-=1,3&(m>>>=1)){case 0:n.mode=14;break;case 1:if(b(n),n.mode=20,6!==t)break;m>>>=2,y-=2;break e;case 2:n.mode=17;break;case 3:e.msg="invalid block type",n.mode=30}m>>>=2,y-=2;break;case 14:for(m>>>=7&y,y-=7&y;y<32;){if(0===p)break e;p--,m+=d[f++]<<y,y+=8}if((65535&m)!=(m>>>16^65535)){e.msg="invalid stored block lengths",n.mode=30;break}if(n.length=65535&m,y=m=0,n.mode=15,6===t)break e;case 15:n.mode=16;case 16:if(D=n.length){if(p<D&&(D=p),g<D&&(D=g),0===D)break e;i.arraySet(l,d,f,D,h),p-=D,f+=D,g-=D,h+=D,n.length-=D;break}n.mode=12;break;case 17:for(;y<14;){if(0===p)break e;p--,m+=d[f++]<<y,y+=8}if(n.nlen=257+(31&m),m>>>=5,y-=5,n.ndist=1+(31&m),m>>>=5,y-=5,n.ncode=4+(15&m),m>>>=4,y-=4,286<n.nlen||30<n.ndist){e.msg="too many length or distance symbols",n.mode=30;break}n.have=0,n.mode=18;case 18:for(;n.have<n.ncode;){for(;y<3;){if(0===p)break e;p--,m+=d[f++]<<y,y+=8}n.lens[L[n.have++]]=7&m,m>>>=3,y-=3}for(;n.have<19;)n.lens[L[n.have++]]=0;if(n.lencode=n.lendyn,n.lenbits=7,W={bits:n.lenbits},O=c(0,n.lens,0,19,n.lencode,0,n.work,W),n.lenbits=W.bits,O){e.msg="invalid code lengths set",n.mode=30;break}n.have=0,n.mode=19;case 19:for(;n.have<n.nlen+n.ndist;){for(;E=(I=n.lencode[m&(1<<n.lenbits)-1])>>>16&255,k=65535&I,!((T=I>>>24)<=y);){if(0===p)break e;p--,m+=d[f++]<<y,y+=8}if(k<16)m>>>=T,y-=T,n.lens[n.have++]=k;else{if(16===k){for(B=T+2;y<B;){if(0===p)break e;p--,m+=d[f++]<<y,y+=8}if(m>>>=T,y-=T,0===n.have){e.msg="invalid bit length repeat",n.mode=30;break}A=n.lens[n.have-1],D=3+(3&m),m>>>=2,y-=2}else if(17===k){for(B=T+3;y<B;){if(0===p)break e;p--,m+=d[f++]<<y,y+=8}y-=T,A=0,D=3+(7&(m>>>=T)),m>>>=3,y-=3}else{for(B=T+7;y<B;){if(0===p)break e;p--,m+=d[f++]<<y,y+=8}y-=T,A=0,D=11+(127&(m>>>=T)),m>>>=7,y-=7}if(n.have+D>n.nlen+n.ndist){e.msg="invalid bit length repeat",n.mode=30;break}for(;D--;)n.lens[n.have++]=A}}if(30===n.mode)break;if(0===n.lens[256]){e.msg="invalid code -- missing end-of-block",n.mode=30;break}if(n.lenbits=9,W={bits:n.lenbits},O=c(1,n.lens,0,n.nlen,n.lencode,0,n.work,W),n.lenbits=W.bits,O){e.msg="invalid literal/lengths set",n.mode=30;break}if(n.distbits=6,n.distcode=n.distdyn,W={bits:n.distbits},O=c(2,n.lens,n.nlen,n.ndist,n.distcode,0,n.work,W),n.distbits=W.bits,O){e.msg="invalid distances set",n.mode=30;break}if(n.mode=20,6===t)break e;case 20:n.mode=21;case 21:if(6<=p&&258<=g){e.next_out=h,e.avail_out=g,e.next_in=f,e.avail_in=p,n.hold=m,n.bits=y,a(e,x),h=e.next_out,l=e.output,g=e.avail_out,f=e.next_in,d=e.input,p=e.avail_in,m=n.hold,y=n.bits,12===n.mode&&(n.back=-1);break}for(n.back=0;E=(I=n.lencode[m&(1<<n.lenbits)-1])>>>16&255,k=65535&I,!((T=I>>>24)<=y);){if(0===p)break e;p--,m+=d[f++]<<y,y+=8}if(E&&0==(240&E)){for(C=T,S=E,F=k;E=(I=n.lencode[F+((m&(1<<C+S)-1)>>C)])>>>16&255,k=65535&I,!(C+(T=I>>>24)<=y);){if(0===p)break e;p--,m+=d[f++]<<y,y+=8}m>>>=C,y-=C,n.back+=C}if(m>>>=T,y-=T,n.back+=T,n.length=k,0===E){n.mode=26;break}if(32&E){n.back=-1,n.mode=12;break}if(64&E){e.msg="invalid literal/length code",n.mode=30;break}n.extra=15&E,n.mode=22;case 22:if(n.extra){for(B=n.extra;y<B;){if(0===p)break e;p--,m+=d[f++]<<y,y+=8}n.length+=m&(1<<n.extra)-1,m>>>=n.extra,y-=n.extra,n.back+=n.extra}n.was=n.length,n.mode=23;case 23:for(;E=(I=n.distcode[m&(1<<n.distbits)-1])>>>16&255,k=65535&I,!((T=I>>>24)<=y);){if(0===p)break e;p--,m+=d[f++]<<y,y+=8}if(0==(240&E)){for(C=T,S=E,F=k;E=(I=n.distcode[F+((m&(1<<C+S)-1)>>C)])>>>16&255,k=65535&I,!(C+(T=I>>>24)<=y);){if(0===p)break e;p--,m+=d[f++]<<y,y+=8}m>>>=C,y-=C,n.back+=C}if(m>>>=T,y-=T,n.back+=T,64&E){e.msg="invalid distance code",n.mode=30;break}n.offset=k,n.extra=15&E,n.mode=24;case 24:if(n.extra){for(B=n.extra;y<B;){if(0===p)break e;p--,m+=d[f++]<<y,y+=8}n.offset+=m&(1<<n.extra)-1,m>>>=n.extra,y-=n.extra,n.back+=n.extra}if(n.offset>n.dmax){e.msg="invalid distance too far back",n.mode=30;break}n.mode=25;case 25:if(0===g)break e;if(D=x-g,n.offset>D){if((D=n.offset-D)>n.whave&&n.sane){e.msg="invalid distance too far back",n.mode=30;break}w=D>n.wnext?(D-=n.wnext,n.wsize-D):n.wnext-D,D>n.length&&(D=n.length),U=n.window}else U=l,w=h-n.offset,D=n.length;for(g<D&&(D=g),g-=D,n.length-=D;l[h++]=U[w++],--D;);0===n.length&&(n.mode=21);break;case 26:if(0===g)break e;l[h++]=n.length,g--,n.mode=21;break;case 27:if(n.wrap){for(;y<32;){if(0===p)break e;p--,m|=d[f++]<<y,y+=8}if(x-=g,e.total_out+=x,n.total+=x,x&&(e.adler=n.check=n.flags?o(n.check,l,x,h-x):r(n.check,l,x,h-x)),x=g,(n.flags?m:u(m))!==n.check){e.msg="incorrect data check",n.mode=30;break}y=m=0}n.mode=28;case 28:if(n.wrap&&n.flags){for(;y<32;){if(0===p)break e;p--,m+=d[f++]<<y,y+=8}if(m!==(4294967295&n.total)){e.msg="incorrect length check",n.mode=30;break}y=m=0}n.mode=29;case 29:O=1;break e;case 30:O=-3;break e;case 31:return-4;case 32:default:return s}return e.next_out=h,e.avail_out=g,e.next_in=f,e.avail_in=p,n.hold=m,n.bits=y,(n.wsize||x!==e.avail_out&&n.mode<30&&(n.mode<27||4!==t))&&v(e,e.output,e.next_out,x-e.avail_out)?(n.mode=31,-4):(_-=e.avail_in,x-=e.avail_out,e.total_in+=_,e.total_out+=x,n.total+=x,n.wrap&&x&&(e.adler=n.check=n.flags?o(n.check,l,x,e.next_out-x):r(n.check,l,x,e.next_out-x)),e.data_type=n.bits+(n.last?64:0)+(12===n.mode?128:0)+(20===n.mode||15===n.mode?256:0),(0==_&&0===x||4===t)&&0===O&&(O=-5),O)},n.inflateEnd=function(e){if(!e||!e.state)return s;var t=e.state;return t.window&&(t.window=null),e.state=null,0},n.inflateGetHeader=function(e,t){var n;return e&&e.state?0==(2&(n=e.state).wrap)?s:((n.head=t).done=!1,0):s},n.inflateSetDictionary=function(e,t){var n,i=t.length;return e&&e.state?0!==(n=e.state).wrap&&11!==n.mode?s:11===n.mode&&r(1,t,i,0)!==n.check?-3:v(e,t,i,i)?(n.mode=31,-4):(n.havedict=1,0):s},n.inflateInfo="pako inflate (from Nodeca project)"},{"../utils/common":41,"./adler32":43,"./crc32":45,"./inffast":48,"./inftrees":50}],50:[function(e,t,n){"use strict";var i=e("../utils/common"),r=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],o=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],a=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],c=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];t.exports=function(e,t,n,s,u,d,l,f){var h,p,g,m,y,b,v,_,x,D=f.bits,w=0,U=0,T=0,E=0,k=0,C=0,S=0,F=0,A=0,O=0,W=null,B=0,I=new i.Buf16(16),N=new i.Buf16(16),L=null,R=0;for(w=0;w<=15;w++)I[w]=0;for(U=0;U<s;U++)I[t[n+U]]++;for(k=D,E=15;1<=E&&0===I[E];E--);if(E<k&&(k=E),0===E)return u[d++]=20971520,u[d++]=20971520,f.bits=1,0;for(T=1;T<E&&0===I[T];T++);for(k<T&&(k=T),w=F=1;w<=15;w++)if(F<<=1,(F-=I[w])<0)return-1;if(0<F&&(0===e||1!==E))return-1;for(N[1]=0,w=1;w<15;w++)N[w+1]=N[w]+I[w];for(U=0;U<s;U++)0!==t[n+U]&&(l[N[t[n+U]]++]=U);if(b=0===e?(W=L=l,19):1===e?(W=r,B-=257,L=o,R-=257,256):(W=a,L=c,-1),w=T,y=d,S=U=O=0,g=-1,m=(A=1<<(C=k))-1,1===e&&852<A||2===e&&592<A)return 1;for(;;){for(v=w-S,x=l[U]<b?(_=0,l[U]):l[U]>b?(_=L[R+l[U]],W[B+l[U]]):(_=96,0),h=1<<w-S,T=p=1<<C;u[y+(O>>S)+(p-=h)]=v<<24|_<<16|x|0,0!==p;);for(h=1<<w-1;O&h;)h>>=1;if(0!==h?(O&=h-1,O+=h):O=0,U++,0==--I[w]){if(w===E)break;w=t[n+l[U]]}if(k<w&&(O&m)!==g){for(0===S&&(S=k),y+=T,F=1<<(C=w-S);C+S<E&&!((F-=I[C+S])<=0);)C++,F<<=1;if(A+=1<<C,1===e&&852<A||2===e&&592<A)return 1;u[g=O&m]=k<<24|C<<16|y-d|0}}return 0!==O&&(u[y+O]=w-S<<24|64<<16|0),f.bits=k,0}},{"../utils/common":41}],51:[function(e,t,n){"use strict";t.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}},{}],52:[function(e,t,n){"use strict";var i=e("../utils/common");function r(e){for(var t=e.length;0<=--t;)e[t]=0}var o=256,a=286,c=30,s=15,u=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],d=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],l=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],f=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],h=new Array(576);r(h);var p=new Array(60);r(p);var g=new Array(512);r(g);var m=new Array(256);r(m);var y=new Array(29);r(y);var b,v,_,x=new Array(c);function D(e,t,n,i,r){this.static_tree=e,this.extra_bits=t,this.extra_base=n,this.elems=i,this.max_length=r,this.has_stree=e&&e.length}function w(e,t){this.dyn_tree=e,this.max_code=0,this.stat_desc=t}function U(e){return e<256?g[e]:g[256+(e>>>7)]}function T(e,t){e.pending_buf[e.pending++]=255&t,e.pending_buf[e.pending++]=t>>>8&255}function E(e,t,n){e.bi_valid>16-n?(e.bi_buf|=t<<e.bi_valid&65535,T(e,e.bi_buf),e.bi_buf=t>>16-e.bi_valid,e.bi_valid+=n-16):(e.bi_buf|=t<<e.bi_valid&65535,e.bi_valid+=n)}function k(e,t,n){E(e,n[2*t],n[2*t+1])}function C(e,t){for(var n=0;n|=1&e,e>>>=1,n<<=1,0<--t;);return n>>>1}function S(e,t,n){var i,r,o=new Array(16),a=0;for(i=1;i<=s;i++)o[i]=a=a+n[i-1]<<1;for(r=0;r<=t;r++){var c=e[2*r+1];0!==c&&(e[2*r]=C(o[c]++,c))}}function F(e){var t;for(t=0;t<a;t++)e.dyn_ltree[2*t]=0;for(t=0;t<c;t++)e.dyn_dtree[2*t]=0;for(t=0;t<19;t++)e.bl_tree[2*t]=0;e.dyn_ltree[512]=1,e.opt_len=e.static_len=0,e.last_lit=e.matches=0}function A(e){8<e.bi_valid?T(e,e.bi_buf):0<e.bi_valid&&(e.pending_buf[e.pending++]=e.bi_buf),e.bi_buf=0,e.bi_valid=0}function O(e,t,n,i){var r=2*t,o=2*n;return e[r]<e[o]||e[r]===e[o]&&i[t]<=i[n]}function W(e,t,n){for(var i=e.heap[n],r=n<<1;r<=e.heap_len&&(r<e.heap_len&&O(t,e.heap[r+1],e.heap[r],e.depth)&&r++,!O(t,i,e.heap[r],e.depth));)e.heap[n]=e.heap[r],n=r,r<<=1;e.heap[n]=i}function B(e,t,n){var i,r,a,c,s=0;if(0!==e.last_lit)for(;i=e.pending_buf[e.d_buf+2*s]<<8|e.pending_buf[e.d_buf+2*s+1],r=e.pending_buf[e.l_buf+s],s++,0===i?k(e,r,t):(k(e,(a=m[r])+o+1,t),0!==(c=u[a])&&E(e,r-=y[a],c),k(e,a=U(--i),n),0!==(c=d[a])&&E(e,i-=x[a],c)),s<e.last_lit;);k(e,256,t)}function I(e,t){var n,i,r,o=t.dyn_tree,a=t.stat_desc.static_tree,c=t.stat_desc.has_stree,u=t.stat_desc.elems,d=-1;for(e.heap_len=0,e.heap_max=573,n=0;n<u;n++)0!==o[2*n]?(e.heap[++e.heap_len]=d=n,e.depth[n]=0):o[2*n+1]=0;for(;e.heap_len<2;)o[2*(r=e.heap[++e.heap_len]=d<2?++d:0)]=1,e.depth[r]=0,e.opt_len--,c&&(e.static_len-=a[2*r+1]);for(t.max_code=d,n=e.heap_len>>1;1<=n;n--)W(e,o,n);for(r=u;n=e.heap[1],e.heap[1]=e.heap[e.heap_len--],W(e,o,1),i=e.heap[1],e.heap[--e.heap_max]=n,e.heap[--e.heap_max]=i,o[2*r]=o[2*n]+o[2*i],e.depth[r]=(e.depth[n]>=e.depth[i]?e.depth[n]:e.depth[i])+1,o[2*n+1]=o[2*i+1]=r,e.heap[1]=r++,W(e,o,1),2<=e.heap_len;);e.heap[--e.heap_max]=e.heap[1],function(e,t){var n,i,r,o,a,c,u=t.dyn_tree,d=t.max_code,l=t.stat_desc.static_tree,f=t.stat_desc.has_stree,h=t.stat_desc.extra_bits,p=t.stat_desc.extra_base,g=t.stat_desc.max_length,m=0;for(o=0;o<=s;o++)e.bl_count[o]=0;for(u[2*e.heap[e.heap_max]+1]=0,n=e.heap_max+1;n<573;n++)g<(o=u[2*u[2*(i=e.heap[n])+1]+1]+1)&&(o=g,m++),u[2*i+1]=o,d<i||(e.bl_count[o]++,a=0,p<=i&&(a=h[i-p]),c=u[2*i],e.opt_len+=c*(o+a),f&&(e.static_len+=c*(l[2*i+1]+a)));if(0!==m){do{for(o=g-1;0===e.bl_count[o];)o--;e.bl_count[o]--,e.bl_count[o+1]+=2,e.bl_count[g]--,m-=2}while(0<m);for(o=g;0!==o;o--)for(i=e.bl_count[o];0!==i;)d<(r=e.heap[--n])||(u[2*r+1]!==o&&(e.opt_len+=(o-u[2*r+1])*u[2*r],u[2*r+1]=o),i--)}}(e,t),S(o,d,e.bl_count)}function N(e,t,n){var i,r,o=-1,a=t[1],c=0,s=7,u=4;for(0===a&&(s=138,u=3),t[2*(n+1)+1]=65535,i=0;i<=n;i++)r=a,a=t[2*(i+1)+1],++c<s&&r===a||(c<u?e.bl_tree[2*r]+=c:0!==r?(r!==o&&e.bl_tree[2*r]++,e.bl_tree[32]++):c<=10?e.bl_tree[34]++:e.bl_tree[36]++,o=r,u=(c=0)===a?(s=138,3):r===a?(s=6,3):(s=7,4))}function L(e,t,n){var i,r,o=-1,a=t[1],c=0,s=7,u=4;for(0===a&&(s=138,u=3),i=0;i<=n;i++)if(r=a,a=t[2*(i+1)+1],!(++c<s&&r===a)){if(c<u)for(;k(e,r,e.bl_tree),0!=--c;);else 0!==r?(r!==o&&(k(e,r,e.bl_tree),c--),k(e,16,e.bl_tree),E(e,c-3,2)):c<=10?(k(e,17,e.bl_tree),E(e,c-3,3)):(k(e,18,e.bl_tree),E(e,c-11,7));o=r,u=(c=0)===a?(s=138,3):r===a?(s=6,3):(s=7,4)}}r(x);var R=!1;function P(e,t,n,r){E(e,0+(r?1:0),3),function(e,t,n,r){A(e),T(e,n),T(e,~n),i.arraySet(e.pending_buf,e.window,t,n,e.pending),e.pending+=n}(e,t,n)}n._tr_init=function(e){R||(function(){var e,t,n,i,r,o=new Array(16);for(i=n=0;i<28;i++)for(y[i]=n,e=0;e<1<<u[i];e++)m[n++]=i;for(m[n-1]=i,i=r=0;i<16;i++)for(x[i]=r,e=0;e<1<<d[i];e++)g[r++]=i;for(r>>=7;i<c;i++)for(x[i]=r<<7,e=0;e<1<<d[i]-7;e++)g[256+r++]=i;for(t=0;t<=s;t++)o[t]=0;for(e=0;e<=143;)h[2*e+1]=8,e++,o[8]++;for(;e<=255;)h[2*e+1]=9,e++,o[9]++;for(;e<=279;)h[2*e+1]=7,e++,o[7]++;for(;e<=287;)h[2*e+1]=8,e++,o[8]++;for(S(h,287,o),e=0;e<c;e++)p[2*e+1]=5,p[2*e]=C(e,5);b=new D(h,u,257,a,s),v=new D(p,d,0,c,s),_=new D(new Array(0),l,0,19,7)}(),R=!0),e.l_desc=new w(e.dyn_ltree,b),e.d_desc=new w(e.dyn_dtree,v),e.bl_desc=new w(e.bl_tree,_),e.bi_buf=0,e.bi_valid=0,F(e)},n._tr_stored_block=P,n._tr_flush_block=function(e,t,n,i){var r,a,c=0;0<e.level?(2===e.strm.data_type&&(e.strm.data_type=function(e){var t,n=4093624447;for(t=0;t<=31;t++,n>>>=1)if(1&n&&0!==e.dyn_ltree[2*t])return 0;if(0!==e.dyn_ltree[18]||0!==e.dyn_ltree[20]||0!==e.dyn_ltree[26])return 1;for(t=32;t<o;t++)if(0!==e.dyn_ltree[2*t])return 1;return 0}(e)),I(e,e.l_desc),I(e,e.d_desc),c=function(e){var t;for(N(e,e.dyn_ltree,e.l_desc.max_code),N(e,e.dyn_dtree,e.d_desc.max_code),I(e,e.bl_desc),t=18;3<=t&&0===e.bl_tree[2*f[t]+1];t--);return e.opt_len+=3*(t+1)+5+5+4,t}(e),r=e.opt_len+3+7>>>3,(a=e.static_len+3+7>>>3)<=r&&(r=a)):r=a=n+5,n+4<=r&&-1!==t?P(e,t,n,i):4===e.strategy||a===r?(E(e,2+(i?1:0),3),B(e,h,p)):(E(e,4+(i?1:0),3),function(e,t,n,i){var r;for(E(e,t-257,5),E(e,n-1,5),E(e,i-4,4),r=0;r<i;r++)E(e,e.bl_tree[2*f[r]+1],3);L(e,e.dyn_ltree,t-1),L(e,e.dyn_dtree,n-1)}(e,e.l_desc.max_code+1,e.d_desc.max_code+1,c+1),B(e,e.dyn_ltree,e.dyn_dtree)),F(e),i&&A(e)},n._tr_tally=function(e,t,n){return e.pending_buf[e.d_buf+2*e.last_lit]=t>>>8&255,e.pending_buf[e.d_buf+2*e.last_lit+1]=255&t,e.pending_buf[e.l_buf+e.last_lit]=255&n,e.last_lit++,0===t?e.dyn_ltree[2*n]++:(e.matches++,t--,e.dyn_ltree[2*(m[n]+o+1)]++,e.dyn_dtree[2*U(t)]++),e.last_lit===e.lit_bufsize-1},n._tr_align=function(e){E(e,2,3),k(e,256,h),function(e){16===e.bi_valid?(T(e,e.bi_buf),e.bi_buf=0,e.bi_valid=0):8<=e.bi_valid&&(e.pending_buf[e.pending++]=255&e.bi_buf,e.bi_buf>>=8,e.bi_valid-=8)}(e)}},{"../utils/common":41}],53:[function(e,t,n){"use strict";t.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}},{}],54:[function(e,t,n){(function(e){!function(e,t){"use strict";if(!e.setImmediate){var n,i,o,a,c=1,s={},u=!1,d=e.document,l=Object.getPrototypeOf&&Object.getPrototypeOf(e);l=l&&l.setTimeout?l:e,n="[object process]"==={}.toString.call(e.process)?function(e){r.nextTick((function(){h(e)}))}:function(){if(e.postMessage&&!e.importScripts){var t=!0,n=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=n,t}}()?(a="setImmediate$"+Math.random()+"$",e.addEventListener?e.addEventListener("message",p,!1):e.attachEvent("onmessage",p),function(t){e.postMessage(a+t,"*")}):e.MessageChannel?((o=new MessageChannel).port1.onmessage=function(e){h(e.data)},function(e){o.port2.postMessage(e)}):d&&"onreadystatechange"in d.createElement("script")?(i=d.documentElement,function(e){var t=d.createElement("script");t.onreadystatechange=function(){h(e),t.onreadystatechange=null,i.removeChild(t),t=null},i.appendChild(t)}):function(e){setTimeout(h,0,e)},l.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),i=0;i<t.length;i++)t[i]=arguments[i+1];var r={callback:e,args:t};return s[c]=r,n(c),c++},l.clearImmediate=f}function f(e){delete s[e]}function h(e){if(u)setTimeout(h,0,e);else{var t=s[e];if(t){u=!0;try{!function(e){var t=e.callback,n=e.args;switch(n.length){case 0:t();break;case 1:t(n[0]);break;case 2:t(n[0],n[1]);break;case 3:t(n[0],n[1],n[2]);break;default:t.apply(void 0,n)}}(t)}finally{f(e),u=!1}}}}function p(t){t.source===e&&"string"==typeof t.data&&0===t.data.indexOf(a)&&h(+t.data.slice(a.length))}}("undefined"==typeof self?void 0===e?this:e:self)}).call(this,void 0!==i?i:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}]},{},[10])(10)}).call(this,n(100).Buffer,n(274).setImmediate,n(9),n(18))},function(e,t,n){var i=n(7),r=n(27),o=n(277);t.read=c,t.readXmlFromZipFile=function(e,t){return e.exists(t)?e.read(t,"utf-8").then(s).then(c):r.resolve(null)};var a={"http://schemas.openxmlformats.org/wordprocessingml/2006/main":"w","http://schemas.openxmlformats.org/officeDocument/2006/relationships":"r","http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing":"wp","http://schemas.openxmlformats.org/drawingml/2006/main":"a","http://schemas.openxmlformats.org/drawingml/2006/picture":"pic","http://purl.oclc.org/ooxml/wordprocessingml/main":"w","http://purl.oclc.org/ooxml/officeDocument/relationships":"r","http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing":"wp","http://purl.oclc.org/ooxml/drawingml/main":"a","http://purl.oclc.org/ooxml/drawingml/picture":"pic","http://schemas.openxmlformats.org/package/2006/content-types":"content-types","http://schemas.openxmlformats.org/package/2006/relationships":"relationships","http://schemas.openxmlformats.org/markup-compatibility/2006":"mc","urn:schemas-microsoft-com:vml":"v","urn:schemas-microsoft-com:office:word":"office-word"};function c(e){return o.readString(e,a).then((function(e){return u(e)[0]}))}function s(e){return e.replace(/^\uFEFF/g,"")}function u(e){return"element"===e.type?"mc:AlternateContent"===e.name?e.first("mc:Fallback").children:(e.children=i.flatten(e.children.map(u,!0)),[e]):[e]}},function(e,t,n){var i=n(27),r=n(7),o=n(424),a=n(278),c=a.Element;t.readString=function(e,t){t=t||{};try{var n=o.parseFromString(e,"text/xml")}catch(e){return i.reject(e)}if("parsererror"===n.documentElement.tagName)return i.resolve(new Error(n.documentElement.textContent));function u(e){switch(e.nodeType){case s.ELEMENT_NODE:return function(e){var t=d(e),n=[];r.forEach(e.childNodes,(function(e){var t=u(e);t&&n.push(t)}));var i={};return r.forEach(e.attributes,(function(e){i[d(e)]=e.value})),new c(t,i,n)}(e);case s.TEXT_NODE:return a.text(e.nodeValue)}}function d(e){if(e.namespaceURI){var n=t[e.namespaceURI];return(n?n+":":"{"+e.namespaceURI+"}")+e.localName}return e.localName}return i.resolve(u(n.documentElement))};var s=o.Node},function(e,t,n){var i=n(425),r=n(101);t.parseFromString=function(e){var t=null,n=new i.DOMParser({errorHandler:function(e,n){t={level:e,message:n}}}).parseFromString(e);if(null===t)return n;throw new Error(t.level+": "+t.message)},t.Node=r.Node},function(e,t,n){var i=n(101);t.DOMImplementation=i.DOMImplementation,t.XMLSerializer=i.XMLSerializer,t.DOMParser=n(426).DOMParser},function(e,t,n){var i=n(59),r=n(101),o=n(427),a=n(428),c=r.DOMImplementation,s=i.NAMESPACE,u=a.ParseError,d=a.XMLReader;function l(e){return e.replace(/\r[\n\u0085]/g,"\n").replace(/[\r\u0085\u2028]/g,"\n")}function f(e){this.options=e||{locator:{}}}function h(){this.cdata=!1}function p(e,t){t.lineNumber=e.lineNumber,t.columnNumber=e.columnNumber}function g(e){if(e)return"\n@"+(e.systemId||"")+"#[line:"+e.lineNumber+",col:"+e.columnNumber+"]"}function m(e,t,n){return"string"==typeof e?e.substr(t,n):e.length>=t+n||t?new java.lang.String(e,t,n)+"":e}function y(e,t){e.currentElement?e.currentElement.appendChild(t):e.doc.appendChild(t)}f.prototype.parseFromString=function(e,t){var n=this.options,i=new d,r=n.domBuilder||new h,a=n.errorHandler,c=n.locator,u=n.xmlns||{},f=/\/x?html?$/.test(t),p=f?o.HTML_ENTITIES:o.XML_ENTITIES;c&&r.setDocumentLocator(c),i.errorHandler=function(e,t,n){if(!e){if(t instanceof h)return t;e=t}var i={},r=e instanceof Function;function o(t){var o=e[t];!o&&r&&(o=2==e.length?function(n){e(t,n)}:e),i[t]=o&&function(e){o("[xmldom "+t+"]\t"+e+g(n))}||function(){}}return n=n||{},o("warning"),o("error"),o("fatalError"),i}(a,r,c),i.domBuilder=n.domBuilder||r,f&&(u[""]=s.HTML),u.xml=u.xml||s.XML;var m=n.normalizeLineEndings||l;return e&&"string"==typeof e?i.parse(m(e),u,p):i.errorHandler.error("invalid doc source"),r.doc},h.prototype={startDocument:function(){this.doc=(new c).createDocument(null,null,null),this.locator&&(this.doc.documentURI=this.locator.systemId)},startElement:function(e,t,n,i){var r=this.doc,o=r.createElementNS(e,n||t),a=i.length;y(this,o),this.currentElement=o,this.locator&&p(this.locator,o);for(var c=0;c<a;c++){e=i.getURI(c);var s=i.getValue(c),u=(n=i.getQName(c),r.createAttributeNS(e,n));this.locator&&p(i.getLocator(c),u),u.value=u.nodeValue=s,o.setAttributeNode(u)}},endElement:function(e,t,n){var i=this.currentElement;i.tagName;this.currentElement=i.parentNode},startPrefixMapping:function(e,t){},endPrefixMapping:function(e){},processingInstruction:function(e,t){var n=this.doc.createProcessingInstruction(e,t);this.locator&&p(this.locator,n),y(this,n)},ignorableWhitespace:function(e,t,n){},characters:function(e,t,n){if(e=m.apply(this,arguments)){if(this.cdata)var i=this.doc.createCDATASection(e);else i=this.doc.createTextNode(e);this.currentElement?this.currentElement.appendChild(i):/^\s*$/.test(e)&&this.doc.appendChild(i),this.locator&&p(this.locator,i)}},skippedEntity:function(e){},endDocument:function(){this.doc.normalize()},setDocumentLocator:function(e){(this.locator=e)&&(e.lineNumber=0)},comment:function(e,t,n){e=m.apply(this,arguments);var i=this.doc.createComment(e);this.locator&&p(this.locator,i),y(this,i)},startCDATA:function(){this.cdata=!0},endCDATA:function(){this.cdata=!1},startDTD:function(e,t,n){var i=this.doc.implementation;if(i&&i.createDocumentType){var r=i.createDocumentType(e,t,n);this.locator&&p(this.locator,r),y(this,r),this.doc.doctype=r}},warning:function(e){console.warn("[xmldom warning]\t"+e,g(this.locator))},error:function(e){console.error("[xmldom error]\t"+e,g(this.locator))},fatalError:function(e){throw new u(e,this.locator)}},"endDTD,startEntity,endEntity,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,resolveEntity,getExternalSubset,notationDecl,unparsedEntityDecl".replace(/\w+/g,(function(e){h.prototype[e]=function(){return null}})),t.__DOMHandler=h,t.normalizeLineEndings=l,t.DOMParser=f},function(e,t,n){"use strict";var i=n(59).freeze;t.XML_ENTITIES=i({amp:"&",apos:"'",gt:">",lt:"<",quot:'"'}),t.HTML_ENTITIES=i({Aacute:"Á",aacute:"á",Abreve:"Ă",abreve:"ă",ac:"∾",acd:"∿",acE:"∾̳",Acirc:"Â",acirc:"â",acute:"´",Acy:"А",acy:"а",AElig:"Æ",aelig:"æ",af:"⁡",Afr:"𝔄",afr:"𝔞",Agrave:"À",agrave:"à",alefsym:"ℵ",aleph:"ℵ",Alpha:"Α",alpha:"α",Amacr:"Ā",amacr:"ā",amalg:"⨿",AMP:"&",amp:"&",And:"⩓",and:"∧",andand:"⩕",andd:"⩜",andslope:"⩘",andv:"⩚",ang:"∠",ange:"⦤",angle:"∠",angmsd:"∡",angmsdaa:"⦨",angmsdab:"⦩",angmsdac:"⦪",angmsdad:"⦫",angmsdae:"⦬",angmsdaf:"⦭",angmsdag:"⦮",angmsdah:"⦯",angrt:"∟",angrtvb:"⊾",angrtvbd:"⦝",angsph:"∢",angst:"Å",angzarr:"⍼",Aogon:"Ą",aogon:"ą",Aopf:"𝔸",aopf:"𝕒",ap:"≈",apacir:"⩯",apE:"⩰",ape:"≊",apid:"≋",apos:"'",ApplyFunction:"⁡",approx:"≈",approxeq:"≊",Aring:"Å",aring:"å",Ascr:"𝒜",ascr:"𝒶",Assign:"≔",ast:"*",asymp:"≈",asympeq:"≍",Atilde:"Ã",atilde:"ã",Auml:"Ä",auml:"ä",awconint:"∳",awint:"⨑",backcong:"≌",backepsilon:"϶",backprime:"‵",backsim:"∽",backsimeq:"⋍",Backslash:"∖",Barv:"⫧",barvee:"⊽",Barwed:"⌆",barwed:"⌅",barwedge:"⌅",bbrk:"⎵",bbrktbrk:"⎶",bcong:"≌",Bcy:"Б",bcy:"б",bdquo:"„",becaus:"∵",Because:"∵",because:"∵",bemptyv:"⦰",bepsi:"϶",bernou:"ℬ",Bernoullis:"ℬ",Beta:"Β",beta:"β",beth:"ℶ",between:"≬",Bfr:"𝔅",bfr:"𝔟",bigcap:"⋂",bigcirc:"◯",bigcup:"⋃",bigodot:"⨀",bigoplus:"⨁",bigotimes:"⨂",bigsqcup:"⨆",bigstar:"★",bigtriangledown:"▽",bigtriangleup:"△",biguplus:"⨄",bigvee:"⋁",bigwedge:"⋀",bkarow:"⤍",blacklozenge:"⧫",blacksquare:"▪",blacktriangle:"▴",blacktriangledown:"▾",blacktriangleleft:"◂",blacktriangleright:"▸",blank:"␣",blk12:"▒",blk14:"░",blk34:"▓",block:"█",bne:"=⃥",bnequiv:"≡⃥",bNot:"⫭",bnot:"⌐",Bopf:"𝔹",bopf:"𝕓",bot:"⊥",bottom:"⊥",bowtie:"⋈",boxbox:"⧉",boxDL:"╗",boxDl:"╖",boxdL:"╕",boxdl:"┐",boxDR:"╔",boxDr:"╓",boxdR:"╒",boxdr:"┌",boxH:"═",boxh:"─",boxHD:"╦",boxHd:"╤",boxhD:"╥",boxhd:"┬",boxHU:"╩",boxHu:"╧",boxhU:"╨",boxhu:"┴",boxminus:"⊟",boxplus:"⊞",boxtimes:"⊠",boxUL:"╝",boxUl:"╜",boxuL:"╛",boxul:"┘",boxUR:"╚",boxUr:"╙",boxuR:"╘",boxur:"└",boxV:"║",boxv:"│",boxVH:"╬",boxVh:"╫",boxvH:"╪",boxvh:"┼",boxVL:"╣",boxVl:"╢",boxvL:"╡",boxvl:"┤",boxVR:"╠",boxVr:"╟",boxvR:"╞",boxvr:"├",bprime:"‵",Breve:"˘",breve:"˘",brvbar:"¦",Bscr:"ℬ",bscr:"𝒷",bsemi:"⁏",bsim:"∽",bsime:"⋍",bsol:"\\",bsolb:"⧅",bsolhsub:"⟈",bull:"•",bullet:"•",bump:"≎",bumpE:"⪮",bumpe:"≏",Bumpeq:"≎",bumpeq:"≏",Cacute:"Ć",cacute:"ć",Cap:"⋒",cap:"∩",capand:"⩄",capbrcup:"⩉",capcap:"⩋",capcup:"⩇",capdot:"⩀",CapitalDifferentialD:"ⅅ",caps:"∩︀",caret:"⁁",caron:"ˇ",Cayleys:"ℭ",ccaps:"⩍",Ccaron:"Č",ccaron:"č",Ccedil:"Ç",ccedil:"ç",Ccirc:"Ĉ",ccirc:"ĉ",Cconint:"∰",ccups:"⩌",ccupssm:"⩐",Cdot:"Ċ",cdot:"ċ",cedil:"¸",Cedilla:"¸",cemptyv:"⦲",cent:"¢",CenterDot:"·",centerdot:"·",Cfr:"ℭ",cfr:"𝔠",CHcy:"Ч",chcy:"ч",check:"✓",checkmark:"✓",Chi:"Χ",chi:"χ",cir:"○",circ:"ˆ",circeq:"≗",circlearrowleft:"↺",circlearrowright:"↻",circledast:"⊛",circledcirc:"⊚",circleddash:"⊝",CircleDot:"⊙",circledR:"®",circledS:"Ⓢ",CircleMinus:"⊖",CirclePlus:"⊕",CircleTimes:"⊗",cirE:"⧃",cire:"≗",cirfnint:"⨐",cirmid:"⫯",cirscir:"⧂",ClockwiseContourIntegral:"∲",CloseCurlyDoubleQuote:"”",CloseCurlyQuote:"’",clubs:"♣",clubsuit:"♣",Colon:"∷",colon:":",Colone:"⩴",colone:"≔",coloneq:"≔",comma:",",commat:"@",comp:"∁",compfn:"∘",complement:"∁",complexes:"ℂ",cong:"≅",congdot:"⩭",Congruent:"≡",Conint:"∯",conint:"∮",ContourIntegral:"∮",Copf:"ℂ",copf:"𝕔",coprod:"∐",Coproduct:"∐",COPY:"©",copy:"©",copysr:"℗",CounterClockwiseContourIntegral:"∳",crarr:"↵",Cross:"⨯",cross:"✗",Cscr:"𝒞",cscr:"𝒸",csub:"⫏",csube:"⫑",csup:"⫐",csupe:"⫒",ctdot:"⋯",cudarrl:"⤸",cudarrr:"⤵",cuepr:"⋞",cuesc:"⋟",cularr:"↶",cularrp:"⤽",Cup:"⋓",cup:"∪",cupbrcap:"⩈",CupCap:"≍",cupcap:"⩆",cupcup:"⩊",cupdot:"⊍",cupor:"⩅",cups:"∪︀",curarr:"↷",curarrm:"⤼",curlyeqprec:"⋞",curlyeqsucc:"⋟",curlyvee:"⋎",curlywedge:"⋏",curren:"¤",curvearrowleft:"↶",curvearrowright:"↷",cuvee:"⋎",cuwed:"⋏",cwconint:"∲",cwint:"∱",cylcty:"⌭",Dagger:"‡",dagger:"†",daleth:"ℸ",Darr:"↡",dArr:"⇓",darr:"↓",dash:"‐",Dashv:"⫤",dashv:"⊣",dbkarow:"⤏",dblac:"˝",Dcaron:"Ď",dcaron:"ď",Dcy:"Д",dcy:"д",DD:"ⅅ",dd:"ⅆ",ddagger:"‡",ddarr:"⇊",DDotrahd:"⤑",ddotseq:"⩷",deg:"°",Del:"∇",Delta:"Δ",delta:"δ",demptyv:"⦱",dfisht:"⥿",Dfr:"𝔇",dfr:"𝔡",dHar:"⥥",dharl:"⇃",dharr:"⇂",DiacriticalAcute:"´",DiacriticalDot:"˙",DiacriticalDoubleAcute:"˝",DiacriticalGrave:"`",DiacriticalTilde:"˜",diam:"⋄",Diamond:"⋄",diamond:"⋄",diamondsuit:"♦",diams:"♦",die:"¨",DifferentialD:"ⅆ",digamma:"ϝ",disin:"⋲",div:"÷",divide:"÷",divideontimes:"⋇",divonx:"⋇",DJcy:"Ђ",djcy:"ђ",dlcorn:"⌞",dlcrop:"⌍",dollar:"$",Dopf:"𝔻",dopf:"𝕕",Dot:"¨",dot:"˙",DotDot:"⃜",doteq:"≐",doteqdot:"≑",DotEqual:"≐",dotminus:"∸",dotplus:"∔",dotsquare:"⊡",doublebarwedge:"⌆",DoubleContourIntegral:"∯",DoubleDot:"¨",DoubleDownArrow:"⇓",DoubleLeftArrow:"⇐",DoubleLeftRightArrow:"⇔",DoubleLeftTee:"⫤",DoubleLongLeftArrow:"⟸",DoubleLongLeftRightArrow:"⟺",DoubleLongRightArrow:"⟹",DoubleRightArrow:"⇒",DoubleRightTee:"⊨",DoubleUpArrow:"⇑",DoubleUpDownArrow:"⇕",DoubleVerticalBar:"∥",DownArrow:"↓",Downarrow:"⇓",downarrow:"↓",DownArrowBar:"⤓",DownArrowUpArrow:"⇵",DownBreve:"̑",downdownarrows:"⇊",downharpoonleft:"⇃",downharpoonright:"⇂",DownLeftRightVector:"⥐",DownLeftTeeVector:"⥞",DownLeftVector:"↽",DownLeftVectorBar:"⥖",DownRightTeeVector:"⥟",DownRightVector:"⇁",DownRightVectorBar:"⥗",DownTee:"⊤",DownTeeArrow:"↧",drbkarow:"⤐",drcorn:"⌟",drcrop:"⌌",Dscr:"𝒟",dscr:"𝒹",DScy:"Ѕ",dscy:"ѕ",dsol:"⧶",Dstrok:"Đ",dstrok:"đ",dtdot:"⋱",dtri:"▿",dtrif:"▾",duarr:"⇵",duhar:"⥯",dwangle:"⦦",DZcy:"Џ",dzcy:"џ",dzigrarr:"⟿",Eacute:"É",eacute:"é",easter:"⩮",Ecaron:"Ě",ecaron:"ě",ecir:"≖",Ecirc:"Ê",ecirc:"ê",ecolon:"≕",Ecy:"Э",ecy:"э",eDDot:"⩷",Edot:"Ė",eDot:"≑",edot:"ė",ee:"ⅇ",efDot:"≒",Efr:"𝔈",efr:"𝔢",eg:"⪚",Egrave:"È",egrave:"è",egs:"⪖",egsdot:"⪘",el:"⪙",Element:"∈",elinters:"⏧",ell:"ℓ",els:"⪕",elsdot:"⪗",Emacr:"Ē",emacr:"ē",empty:"∅",emptyset:"∅",EmptySmallSquare:"◻",emptyv:"∅",EmptyVerySmallSquare:"▫",emsp:" ",emsp13:" ",emsp14:" ",ENG:"Ŋ",eng:"ŋ",ensp:" ",Eogon:"Ę",eogon:"ę",Eopf:"𝔼",eopf:"𝕖",epar:"⋕",eparsl:"⧣",eplus:"⩱",epsi:"ε",Epsilon:"Ε",epsilon:"ε",epsiv:"ϵ",eqcirc:"≖",eqcolon:"≕",eqsim:"≂",eqslantgtr:"⪖",eqslantless:"⪕",Equal:"⩵",equals:"=",EqualTilde:"≂",equest:"≟",Equilibrium:"⇌",equiv:"≡",equivDD:"⩸",eqvparsl:"⧥",erarr:"⥱",erDot:"≓",Escr:"ℰ",escr:"ℯ",esdot:"≐",Esim:"⩳",esim:"≂",Eta:"Η",eta:"η",ETH:"Ð",eth:"ð",Euml:"Ë",euml:"ë",euro:"€",excl:"!",exist:"∃",Exists:"∃",expectation:"ℰ",ExponentialE:"ⅇ",exponentiale:"ⅇ",fallingdotseq:"≒",Fcy:"Ф",fcy:"ф",female:"♀",ffilig:"ﬃ",fflig:"ﬀ",ffllig:"ﬄ",Ffr:"𝔉",ffr:"𝔣",filig:"ﬁ",FilledSmallSquare:"◼",FilledVerySmallSquare:"▪",fjlig:"fj",flat:"♭",fllig:"ﬂ",fltns:"▱",fnof:"ƒ",Fopf:"𝔽",fopf:"𝕗",ForAll:"∀",forall:"∀",fork:"⋔",forkv:"⫙",Fouriertrf:"ℱ",fpartint:"⨍",frac12:"½",frac13:"⅓",frac14:"¼",frac15:"⅕",frac16:"⅙",frac18:"⅛",frac23:"⅔",frac25:"⅖",frac34:"¾",frac35:"⅗",frac38:"⅜",frac45:"⅘",frac56:"⅚",frac58:"⅝",frac78:"⅞",frasl:"⁄",frown:"⌢",Fscr:"ℱ",fscr:"𝒻",gacute:"ǵ",Gamma:"Γ",gamma:"γ",Gammad:"Ϝ",gammad:"ϝ",gap:"⪆",Gbreve:"Ğ",gbreve:"ğ",Gcedil:"Ģ",Gcirc:"Ĝ",gcirc:"ĝ",Gcy:"Г",gcy:"г",Gdot:"Ġ",gdot:"ġ",gE:"≧",ge:"≥",gEl:"⪌",gel:"⋛",geq:"≥",geqq:"≧",geqslant:"⩾",ges:"⩾",gescc:"⪩",gesdot:"⪀",gesdoto:"⪂",gesdotol:"⪄",gesl:"⋛︀",gesles:"⪔",Gfr:"𝔊",gfr:"𝔤",Gg:"⋙",gg:"≫",ggg:"⋙",gimel:"ℷ",GJcy:"Ѓ",gjcy:"ѓ",gl:"≷",gla:"⪥",glE:"⪒",glj:"⪤",gnap:"⪊",gnapprox:"⪊",gnE:"≩",gne:"⪈",gneq:"⪈",gneqq:"≩",gnsim:"⋧",Gopf:"𝔾",gopf:"𝕘",grave:"`",GreaterEqual:"≥",GreaterEqualLess:"⋛",GreaterFullEqual:"≧",GreaterGreater:"⪢",GreaterLess:"≷",GreaterSlantEqual:"⩾",GreaterTilde:"≳",Gscr:"𝒢",gscr:"ℊ",gsim:"≳",gsime:"⪎",gsiml:"⪐",Gt:"≫",GT:">",gt:">",gtcc:"⪧",gtcir:"⩺",gtdot:"⋗",gtlPar:"⦕",gtquest:"⩼",gtrapprox:"⪆",gtrarr:"⥸",gtrdot:"⋗",gtreqless:"⋛",gtreqqless:"⪌",gtrless:"≷",gtrsim:"≳",gvertneqq:"≩︀",gvnE:"≩︀",Hacek:"ˇ",hairsp:" ",half:"½",hamilt:"ℋ",HARDcy:"Ъ",hardcy:"ъ",hArr:"⇔",harr:"↔",harrcir:"⥈",harrw:"↭",Hat:"^",hbar:"ℏ",Hcirc:"Ĥ",hcirc:"ĥ",hearts:"♥",heartsuit:"♥",hellip:"…",hercon:"⊹",Hfr:"ℌ",hfr:"𝔥",HilbertSpace:"ℋ",hksearow:"⤥",hkswarow:"⤦",hoarr:"⇿",homtht:"∻",hookleftarrow:"↩",hookrightarrow:"↪",Hopf:"ℍ",hopf:"𝕙",horbar:"―",HorizontalLine:"─",Hscr:"ℋ",hscr:"𝒽",hslash:"ℏ",Hstrok:"Ħ",hstrok:"ħ",HumpDownHump:"≎",HumpEqual:"≏",hybull:"⁃",hyphen:"‐",Iacute:"Í",iacute:"í",ic:"⁣",Icirc:"Î",icirc:"î",Icy:"И",icy:"и",Idot:"İ",IEcy:"Е",iecy:"е",iexcl:"¡",iff:"⇔",Ifr:"ℑ",ifr:"𝔦",Igrave:"Ì",igrave:"ì",ii:"ⅈ",iiiint:"⨌",iiint:"∭",iinfin:"⧜",iiota:"℩",IJlig:"Ĳ",ijlig:"ĳ",Im:"ℑ",Imacr:"Ī",imacr:"ī",image:"ℑ",ImaginaryI:"ⅈ",imagline:"ℐ",imagpart:"ℑ",imath:"ı",imof:"⊷",imped:"Ƶ",Implies:"⇒",in:"∈",incare:"℅",infin:"∞",infintie:"⧝",inodot:"ı",Int:"∬",int:"∫",intcal:"⊺",integers:"ℤ",Integral:"∫",intercal:"⊺",Intersection:"⋂",intlarhk:"⨗",intprod:"⨼",InvisibleComma:"⁣",InvisibleTimes:"⁢",IOcy:"Ё",iocy:"ё",Iogon:"Į",iogon:"į",Iopf:"𝕀",iopf:"𝕚",Iota:"Ι",iota:"ι",iprod:"⨼",iquest:"¿",Iscr:"ℐ",iscr:"𝒾",isin:"∈",isindot:"⋵",isinE:"⋹",isins:"⋴",isinsv:"⋳",isinv:"∈",it:"⁢",Itilde:"Ĩ",itilde:"ĩ",Iukcy:"І",iukcy:"і",Iuml:"Ï",iuml:"ï",Jcirc:"Ĵ",jcirc:"ĵ",Jcy:"Й",jcy:"й",Jfr:"𝔍",jfr:"𝔧",jmath:"ȷ",Jopf:"𝕁",jopf:"𝕛",Jscr:"𝒥",jscr:"𝒿",Jsercy:"Ј",jsercy:"ј",Jukcy:"Є",jukcy:"є",Kappa:"Κ",kappa:"κ",kappav:"ϰ",Kcedil:"Ķ",kcedil:"ķ",Kcy:"К",kcy:"к",Kfr:"𝔎",kfr:"𝔨",kgreen:"ĸ",KHcy:"Х",khcy:"х",KJcy:"Ќ",kjcy:"ќ",Kopf:"𝕂",kopf:"𝕜",Kscr:"𝒦",kscr:"𝓀",lAarr:"⇚",Lacute:"Ĺ",lacute:"ĺ",laemptyv:"⦴",lagran:"ℒ",Lambda:"Λ",lambda:"λ",Lang:"⟪",lang:"⟨",langd:"⦑",langle:"⟨",lap:"⪅",Laplacetrf:"ℒ",laquo:"«",Larr:"↞",lArr:"⇐",larr:"←",larrb:"⇤",larrbfs:"⤟",larrfs:"⤝",larrhk:"↩",larrlp:"↫",larrpl:"⤹",larrsim:"⥳",larrtl:"↢",lat:"⪫",lAtail:"⤛",latail:"⤙",late:"⪭",lates:"⪭︀",lBarr:"⤎",lbarr:"⤌",lbbrk:"❲",lbrace:"{",lbrack:"[",lbrke:"⦋",lbrksld:"⦏",lbrkslu:"⦍",Lcaron:"Ľ",lcaron:"ľ",Lcedil:"Ļ",lcedil:"ļ",lceil:"⌈",lcub:"{",Lcy:"Л",lcy:"л",ldca:"⤶",ldquo:"“",ldquor:"„",ldrdhar:"⥧",ldrushar:"⥋",ldsh:"↲",lE:"≦",le:"≤",LeftAngleBracket:"⟨",LeftArrow:"←",Leftarrow:"⇐",leftarrow:"←",LeftArrowBar:"⇤",LeftArrowRightArrow:"⇆",leftarrowtail:"↢",LeftCeiling:"⌈",LeftDoubleBracket:"⟦",LeftDownTeeVector:"⥡",LeftDownVector:"⇃",LeftDownVectorBar:"⥙",LeftFloor:"⌊",leftharpoondown:"↽",leftharpoonup:"↼",leftleftarrows:"⇇",LeftRightArrow:"↔",Leftrightarrow:"⇔",leftrightarrow:"↔",leftrightarrows:"⇆",leftrightharpoons:"⇋",leftrightsquigarrow:"↭",LeftRightVector:"⥎",LeftTee:"⊣",LeftTeeArrow:"↤",LeftTeeVector:"⥚",leftthreetimes:"⋋",LeftTriangle:"⊲",LeftTriangleBar:"⧏",LeftTriangleEqual:"⊴",LeftUpDownVector:"⥑",LeftUpTeeVector:"⥠",LeftUpVector:"↿",LeftUpVectorBar:"⥘",LeftVector:"↼",LeftVectorBar:"⥒",lEg:"⪋",leg:"⋚",leq:"≤",leqq:"≦",leqslant:"⩽",les:"⩽",lescc:"⪨",lesdot:"⩿",lesdoto:"⪁",lesdotor:"⪃",lesg:"⋚︀",lesges:"⪓",lessapprox:"⪅",lessdot:"⋖",lesseqgtr:"⋚",lesseqqgtr:"⪋",LessEqualGreater:"⋚",LessFullEqual:"≦",LessGreater:"≶",lessgtr:"≶",LessLess:"⪡",lesssim:"≲",LessSlantEqual:"⩽",LessTilde:"≲",lfisht:"⥼",lfloor:"⌊",Lfr:"𝔏",lfr:"𝔩",lg:"≶",lgE:"⪑",lHar:"⥢",lhard:"↽",lharu:"↼",lharul:"⥪",lhblk:"▄",LJcy:"Љ",ljcy:"љ",Ll:"⋘",ll:"≪",llarr:"⇇",llcorner:"⌞",Lleftarrow:"⇚",llhard:"⥫",lltri:"◺",Lmidot:"Ŀ",lmidot:"ŀ",lmoust:"⎰",lmoustache:"⎰",lnap:"⪉",lnapprox:"⪉",lnE:"≨",lne:"⪇",lneq:"⪇",lneqq:"≨",lnsim:"⋦",loang:"⟬",loarr:"⇽",lobrk:"⟦",LongLeftArrow:"⟵",Longleftarrow:"⟸",longleftarrow:"⟵",LongLeftRightArrow:"⟷",Longleftrightarrow:"⟺",longleftrightarrow:"⟷",longmapsto:"⟼",LongRightArrow:"⟶",Longrightarrow:"⟹",longrightarrow:"⟶",looparrowleft:"↫",looparrowright:"↬",lopar:"⦅",Lopf:"𝕃",lopf:"𝕝",loplus:"⨭",lotimes:"⨴",lowast:"∗",lowbar:"_",LowerLeftArrow:"↙",LowerRightArrow:"↘",loz:"◊",lozenge:"◊",lozf:"⧫",lpar:"(",lparlt:"⦓",lrarr:"⇆",lrcorner:"⌟",lrhar:"⇋",lrhard:"⥭",lrm:"‎",lrtri:"⊿",lsaquo:"‹",Lscr:"ℒ",lscr:"𝓁",Lsh:"↰",lsh:"↰",lsim:"≲",lsime:"⪍",lsimg:"⪏",lsqb:"[",lsquo:"‘",lsquor:"‚",Lstrok:"Ł",lstrok:"ł",Lt:"≪",LT:"<",lt:"<",ltcc:"⪦",ltcir:"⩹",ltdot:"⋖",lthree:"⋋",ltimes:"⋉",ltlarr:"⥶",ltquest:"⩻",ltri:"◃",ltrie:"⊴",ltrif:"◂",ltrPar:"⦖",lurdshar:"⥊",luruhar:"⥦",lvertneqq:"≨︀",lvnE:"≨︀",macr:"¯",male:"♂",malt:"✠",maltese:"✠",Map:"⤅",map:"↦",mapsto:"↦",mapstodown:"↧",mapstoleft:"↤",mapstoup:"↥",marker:"▮",mcomma:"⨩",Mcy:"М",mcy:"м",mdash:"—",mDDot:"∺",measuredangle:"∡",MediumSpace:" ",Mellintrf:"ℳ",Mfr:"𝔐",mfr:"𝔪",mho:"℧",micro:"µ",mid:"∣",midast:"*",midcir:"⫰",middot:"·",minus:"−",minusb:"⊟",minusd:"∸",minusdu:"⨪",MinusPlus:"∓",mlcp:"⫛",mldr:"…",mnplus:"∓",models:"⊧",Mopf:"𝕄",mopf:"𝕞",mp:"∓",Mscr:"ℳ",mscr:"𝓂",mstpos:"∾",Mu:"Μ",mu:"μ",multimap:"⊸",mumap:"⊸",nabla:"∇",Nacute:"Ń",nacute:"ń",nang:"∠⃒",nap:"≉",napE:"⩰̸",napid:"≋̸",napos:"ŉ",napprox:"≉",natur:"♮",natural:"♮",naturals:"ℕ",nbsp:" ",nbump:"≎̸",nbumpe:"≏̸",ncap:"⩃",Ncaron:"Ň",ncaron:"ň",Ncedil:"Ņ",ncedil:"ņ",ncong:"≇",ncongdot:"⩭̸",ncup:"⩂",Ncy:"Н",ncy:"н",ndash:"–",ne:"≠",nearhk:"⤤",neArr:"⇗",nearr:"↗",nearrow:"↗",nedot:"≐̸",NegativeMediumSpace:"​",NegativeThickSpace:"​",NegativeThinSpace:"​",NegativeVeryThinSpace:"​",nequiv:"≢",nesear:"⤨",nesim:"≂̸",NestedGreaterGreater:"≫",NestedLessLess:"≪",NewLine:"\n",nexist:"∄",nexists:"∄",Nfr:"𝔑",nfr:"𝔫",ngE:"≧̸",nge:"≱",ngeq:"≱",ngeqq:"≧̸",ngeqslant:"⩾̸",nges:"⩾̸",nGg:"⋙̸",ngsim:"≵",nGt:"≫⃒",ngt:"≯",ngtr:"≯",nGtv:"≫̸",nhArr:"⇎",nharr:"↮",nhpar:"⫲",ni:"∋",nis:"⋼",nisd:"⋺",niv:"∋",NJcy:"Њ",njcy:"њ",nlArr:"⇍",nlarr:"↚",nldr:"‥",nlE:"≦̸",nle:"≰",nLeftarrow:"⇍",nleftarrow:"↚",nLeftrightarrow:"⇎",nleftrightarrow:"↮",nleq:"≰",nleqq:"≦̸",nleqslant:"⩽̸",nles:"⩽̸",nless:"≮",nLl:"⋘̸",nlsim:"≴",nLt:"≪⃒",nlt:"≮",nltri:"⋪",nltrie:"⋬",nLtv:"≪̸",nmid:"∤",NoBreak:"⁠",NonBreakingSpace:" ",Nopf:"ℕ",nopf:"𝕟",Not:"⫬",not:"¬",NotCongruent:"≢",NotCupCap:"≭",NotDoubleVerticalBar:"∦",NotElement:"∉",NotEqual:"≠",NotEqualTilde:"≂̸",NotExists:"∄",NotGreater:"≯",NotGreaterEqual:"≱",NotGreaterFullEqual:"≧̸",NotGreaterGreater:"≫̸",NotGreaterLess:"≹",NotGreaterSlantEqual:"⩾̸",NotGreaterTilde:"≵",NotHumpDownHump:"≎̸",NotHumpEqual:"≏̸",notin:"∉",notindot:"⋵̸",notinE:"⋹̸",notinva:"∉",notinvb:"⋷",notinvc:"⋶",NotLeftTriangle:"⋪",NotLeftTriangleBar:"⧏̸",NotLeftTriangleEqual:"⋬",NotLess:"≮",NotLessEqual:"≰",NotLessGreater:"≸",NotLessLess:"≪̸",NotLessSlantEqual:"⩽̸",NotLessTilde:"≴",NotNestedGreaterGreater:"⪢̸",NotNestedLessLess:"⪡̸",notni:"∌",notniva:"∌",notnivb:"⋾",notnivc:"⋽",NotPrecedes:"⊀",NotPrecedesEqual:"⪯̸",NotPrecedesSlantEqual:"⋠",NotReverseElement:"∌",NotRightTriangle:"⋫",NotRightTriangleBar:"⧐̸",NotRightTriangleEqual:"⋭",NotSquareSubset:"⊏̸",NotSquareSubsetEqual:"⋢",NotSquareSuperset:"⊐̸",NotSquareSupersetEqual:"⋣",NotSubset:"⊂⃒",NotSubsetEqual:"⊈",NotSucceeds:"⊁",NotSucceedsEqual:"⪰̸",NotSucceedsSlantEqual:"⋡",NotSucceedsTilde:"≿̸",NotSuperset:"⊃⃒",NotSupersetEqual:"⊉",NotTilde:"≁",NotTildeEqual:"≄",NotTildeFullEqual:"≇",NotTildeTilde:"≉",NotVerticalBar:"∤",npar:"∦",nparallel:"∦",nparsl:"⫽⃥",npart:"∂̸",npolint:"⨔",npr:"⊀",nprcue:"⋠",npre:"⪯̸",nprec:"⊀",npreceq:"⪯̸",nrArr:"⇏",nrarr:"↛",nrarrc:"⤳̸",nrarrw:"↝̸",nRightarrow:"⇏",nrightarrow:"↛",nrtri:"⋫",nrtrie:"⋭",nsc:"⊁",nsccue:"⋡",nsce:"⪰̸",Nscr:"𝒩",nscr:"𝓃",nshortmid:"∤",nshortparallel:"∦",nsim:"≁",nsime:"≄",nsimeq:"≄",nsmid:"∤",nspar:"∦",nsqsube:"⋢",nsqsupe:"⋣",nsub:"⊄",nsubE:"⫅̸",nsube:"⊈",nsubset:"⊂⃒",nsubseteq:"⊈",nsubseteqq:"⫅̸",nsucc:"⊁",nsucceq:"⪰̸",nsup:"⊅",nsupE:"⫆̸",nsupe:"⊉",nsupset:"⊃⃒",nsupseteq:"⊉",nsupseteqq:"⫆̸",ntgl:"≹",Ntilde:"Ñ",ntilde:"ñ",ntlg:"≸",ntriangleleft:"⋪",ntrianglelefteq:"⋬",ntriangleright:"⋫",ntrianglerighteq:"⋭",Nu:"Ν",nu:"ν",num:"#",numero:"№",numsp:" ",nvap:"≍⃒",nVDash:"⊯",nVdash:"⊮",nvDash:"⊭",nvdash:"⊬",nvge:"≥⃒",nvgt:">⃒",nvHarr:"⤄",nvinfin:"⧞",nvlArr:"⤂",nvle:"≤⃒",nvlt:"<⃒",nvltrie:"⊴⃒",nvrArr:"⤃",nvrtrie:"⊵⃒",nvsim:"∼⃒",nwarhk:"⤣",nwArr:"⇖",nwarr:"↖",nwarrow:"↖",nwnear:"⤧",Oacute:"Ó",oacute:"ó",oast:"⊛",ocir:"⊚",Ocirc:"Ô",ocirc:"ô",Ocy:"О",ocy:"о",odash:"⊝",Odblac:"Ő",odblac:"ő",odiv:"⨸",odot:"⊙",odsold:"⦼",OElig:"Œ",oelig:"œ",ofcir:"⦿",Ofr:"𝔒",ofr:"𝔬",ogon:"˛",Ograve:"Ò",ograve:"ò",ogt:"⧁",ohbar:"⦵",ohm:"Ω",oint:"∮",olarr:"↺",olcir:"⦾",olcross:"⦻",oline:"‾",olt:"⧀",Omacr:"Ō",omacr:"ō",Omega:"Ω",omega:"ω",Omicron:"Ο",omicron:"ο",omid:"⦶",ominus:"⊖",Oopf:"𝕆",oopf:"𝕠",opar:"⦷",OpenCurlyDoubleQuote:"“",OpenCurlyQuote:"‘",operp:"⦹",oplus:"⊕",Or:"⩔",or:"∨",orarr:"↻",ord:"⩝",order:"ℴ",orderof:"ℴ",ordf:"ª",ordm:"º",origof:"⊶",oror:"⩖",orslope:"⩗",orv:"⩛",oS:"Ⓢ",Oscr:"𝒪",oscr:"ℴ",Oslash:"Ø",oslash:"ø",osol:"⊘",Otilde:"Õ",otilde:"õ",Otimes:"⨷",otimes:"⊗",otimesas:"⨶",Ouml:"Ö",ouml:"ö",ovbar:"⌽",OverBar:"‾",OverBrace:"⏞",OverBracket:"⎴",OverParenthesis:"⏜",par:"∥",para:"¶",parallel:"∥",parsim:"⫳",parsl:"⫽",part:"∂",PartialD:"∂",Pcy:"П",pcy:"п",percnt:"%",period:".",permil:"‰",perp:"⊥",pertenk:"‱",Pfr:"𝔓",pfr:"𝔭",Phi:"Φ",phi:"φ",phiv:"ϕ",phmmat:"ℳ",phone:"☎",Pi:"Π",pi:"π",pitchfork:"⋔",piv:"ϖ",planck:"ℏ",planckh:"ℎ",plankv:"ℏ",plus:"+",plusacir:"⨣",plusb:"⊞",pluscir:"⨢",plusdo:"∔",plusdu:"⨥",pluse:"⩲",PlusMinus:"±",plusmn:"±",plussim:"⨦",plustwo:"⨧",pm:"±",Poincareplane:"ℌ",pointint:"⨕",Popf:"ℙ",popf:"𝕡",pound:"£",Pr:"⪻",pr:"≺",prap:"⪷",prcue:"≼",prE:"⪳",pre:"⪯",prec:"≺",precapprox:"⪷",preccurlyeq:"≼",Precedes:"≺",PrecedesEqual:"⪯",PrecedesSlantEqual:"≼",PrecedesTilde:"≾",preceq:"⪯",precnapprox:"⪹",precneqq:"⪵",precnsim:"⋨",precsim:"≾",Prime:"″",prime:"′",primes:"ℙ",prnap:"⪹",prnE:"⪵",prnsim:"⋨",prod:"∏",Product:"∏",profalar:"⌮",profline:"⌒",profsurf:"⌓",prop:"∝",Proportion:"∷",Proportional:"∝",propto:"∝",prsim:"≾",prurel:"⊰",Pscr:"𝒫",pscr:"𝓅",Psi:"Ψ",psi:"ψ",puncsp:" ",Qfr:"𝔔",qfr:"𝔮",qint:"⨌",Qopf:"ℚ",qopf:"𝕢",qprime:"⁗",Qscr:"𝒬",qscr:"𝓆",quaternions:"ℍ",quatint:"⨖",quest:"?",questeq:"≟",QUOT:'"',quot:'"',rAarr:"⇛",race:"∽̱",Racute:"Ŕ",racute:"ŕ",radic:"√",raemptyv:"⦳",Rang:"⟫",rang:"⟩",rangd:"⦒",range:"⦥",rangle:"⟩",raquo:"»",Rarr:"↠",rArr:"⇒",rarr:"→",rarrap:"⥵",rarrb:"⇥",rarrbfs:"⤠",rarrc:"⤳",rarrfs:"⤞",rarrhk:"↪",rarrlp:"↬",rarrpl:"⥅",rarrsim:"⥴",Rarrtl:"⤖",rarrtl:"↣",rarrw:"↝",rAtail:"⤜",ratail:"⤚",ratio:"∶",rationals:"ℚ",RBarr:"⤐",rBarr:"⤏",rbarr:"⤍",rbbrk:"❳",rbrace:"}",rbrack:"]",rbrke:"⦌",rbrksld:"⦎",rbrkslu:"⦐",Rcaron:"Ř",rcaron:"ř",Rcedil:"Ŗ",rcedil:"ŗ",rceil:"⌉",rcub:"}",Rcy:"Р",rcy:"р",rdca:"⤷",rdldhar:"⥩",rdquo:"”",rdquor:"”",rdsh:"↳",Re:"ℜ",real:"ℜ",realine:"ℛ",realpart:"ℜ",reals:"ℝ",rect:"▭",REG:"®",reg:"®",ReverseElement:"∋",ReverseEquilibrium:"⇋",ReverseUpEquilibrium:"⥯",rfisht:"⥽",rfloor:"⌋",Rfr:"ℜ",rfr:"𝔯",rHar:"⥤",rhard:"⇁",rharu:"⇀",rharul:"⥬",Rho:"Ρ",rho:"ρ",rhov:"ϱ",RightAngleBracket:"⟩",RightArrow:"→",Rightarrow:"⇒",rightarrow:"→",RightArrowBar:"⇥",RightArrowLeftArrow:"⇄",rightarrowtail:"↣",RightCeiling:"⌉",RightDoubleBracket:"⟧",RightDownTeeVector:"⥝",RightDownVector:"⇂",RightDownVectorBar:"⥕",RightFloor:"⌋",rightharpoondown:"⇁",rightharpoonup:"⇀",rightleftarrows:"⇄",rightleftharpoons:"⇌",rightrightarrows:"⇉",rightsquigarrow:"↝",RightTee:"⊢",RightTeeArrow:"↦",RightTeeVector:"⥛",rightthreetimes:"⋌",RightTriangle:"⊳",RightTriangleBar:"⧐",RightTriangleEqual:"⊵",RightUpDownVector:"⥏",RightUpTeeVector:"⥜",RightUpVector:"↾",RightUpVectorBar:"⥔",RightVector:"⇀",RightVectorBar:"⥓",ring:"˚",risingdotseq:"≓",rlarr:"⇄",rlhar:"⇌",rlm:"‏",rmoust:"⎱",rmoustache:"⎱",rnmid:"⫮",roang:"⟭",roarr:"⇾",robrk:"⟧",ropar:"⦆",Ropf:"ℝ",ropf:"𝕣",roplus:"⨮",rotimes:"⨵",RoundImplies:"⥰",rpar:")",rpargt:"⦔",rppolint:"⨒",rrarr:"⇉",Rrightarrow:"⇛",rsaquo:"›",Rscr:"ℛ",rscr:"𝓇",Rsh:"↱",rsh:"↱",rsqb:"]",rsquo:"’",rsquor:"’",rthree:"⋌",rtimes:"⋊",rtri:"▹",rtrie:"⊵",rtrif:"▸",rtriltri:"⧎",RuleDelayed:"⧴",ruluhar:"⥨",rx:"℞",Sacute:"Ś",sacute:"ś",sbquo:"‚",Sc:"⪼",sc:"≻",scap:"⪸",Scaron:"Š",scaron:"š",sccue:"≽",scE:"⪴",sce:"⪰",Scedil:"Ş",scedil:"ş",Scirc:"Ŝ",scirc:"ŝ",scnap:"⪺",scnE:"⪶",scnsim:"⋩",scpolint:"⨓",scsim:"≿",Scy:"С",scy:"с",sdot:"⋅",sdotb:"⊡",sdote:"⩦",searhk:"⤥",seArr:"⇘",searr:"↘",searrow:"↘",sect:"§",semi:";",seswar:"⤩",setminus:"∖",setmn:"∖",sext:"✶",Sfr:"𝔖",sfr:"𝔰",sfrown:"⌢",sharp:"♯",SHCHcy:"Щ",shchcy:"щ",SHcy:"Ш",shcy:"ш",ShortDownArrow:"↓",ShortLeftArrow:"←",shortmid:"∣",shortparallel:"∥",ShortRightArrow:"→",ShortUpArrow:"↑",shy:"­",Sigma:"Σ",sigma:"σ",sigmaf:"ς",sigmav:"ς",sim:"∼",simdot:"⩪",sime:"≃",simeq:"≃",simg:"⪞",simgE:"⪠",siml:"⪝",simlE:"⪟",simne:"≆",simplus:"⨤",simrarr:"⥲",slarr:"←",SmallCircle:"∘",smallsetminus:"∖",smashp:"⨳",smeparsl:"⧤",smid:"∣",smile:"⌣",smt:"⪪",smte:"⪬",smtes:"⪬︀",SOFTcy:"Ь",softcy:"ь",sol:"/",solb:"⧄",solbar:"⌿",Sopf:"𝕊",sopf:"𝕤",spades:"♠",spadesuit:"♠",spar:"∥",sqcap:"⊓",sqcaps:"⊓︀",sqcup:"⊔",sqcups:"⊔︀",Sqrt:"√",sqsub:"⊏",sqsube:"⊑",sqsubset:"⊏",sqsubseteq:"⊑",sqsup:"⊐",sqsupe:"⊒",sqsupset:"⊐",sqsupseteq:"⊒",squ:"□",Square:"□",square:"□",SquareIntersection:"⊓",SquareSubset:"⊏",SquareSubsetEqual:"⊑",SquareSuperset:"⊐",SquareSupersetEqual:"⊒",SquareUnion:"⊔",squarf:"▪",squf:"▪",srarr:"→",Sscr:"𝒮",sscr:"𝓈",ssetmn:"∖",ssmile:"⌣",sstarf:"⋆",Star:"⋆",star:"☆",starf:"★",straightepsilon:"ϵ",straightphi:"ϕ",strns:"¯",Sub:"⋐",sub:"⊂",subdot:"⪽",subE:"⫅",sube:"⊆",subedot:"⫃",submult:"⫁",subnE:"⫋",subne:"⊊",subplus:"⪿",subrarr:"⥹",Subset:"⋐",subset:"⊂",subseteq:"⊆",subseteqq:"⫅",SubsetEqual:"⊆",subsetneq:"⊊",subsetneqq:"⫋",subsim:"⫇",subsub:"⫕",subsup:"⫓",succ:"≻",succapprox:"⪸",succcurlyeq:"≽",Succeeds:"≻",SucceedsEqual:"⪰",SucceedsSlantEqual:"≽",SucceedsTilde:"≿",succeq:"⪰",succnapprox:"⪺",succneqq:"⪶",succnsim:"⋩",succsim:"≿",SuchThat:"∋",Sum:"∑",sum:"∑",sung:"♪",Sup:"⋑",sup:"⊃",sup1:"¹",sup2:"²",sup3:"³",supdot:"⪾",supdsub:"⫘",supE:"⫆",supe:"⊇",supedot:"⫄",Superset:"⊃",SupersetEqual:"⊇",suphsol:"⟉",suphsub:"⫗",suplarr:"⥻",supmult:"⫂",supnE:"⫌",supne:"⊋",supplus:"⫀",Supset:"⋑",supset:"⊃",supseteq:"⊇",supseteqq:"⫆",supsetneq:"⊋",supsetneqq:"⫌",supsim:"⫈",supsub:"⫔",supsup:"⫖",swarhk:"⤦",swArr:"⇙",swarr:"↙",swarrow:"↙",swnwar:"⤪",szlig:"ß",Tab:"\t",target:"⌖",Tau:"Τ",tau:"τ",tbrk:"⎴",Tcaron:"Ť",tcaron:"ť",Tcedil:"Ţ",tcedil:"ţ",Tcy:"Т",tcy:"т",tdot:"⃛",telrec:"⌕",Tfr:"𝔗",tfr:"𝔱",there4:"∴",Therefore:"∴",therefore:"∴",Theta:"Θ",theta:"θ",thetasym:"ϑ",thetav:"ϑ",thickapprox:"≈",thicksim:"∼",ThickSpace:"  ",thinsp:" ",ThinSpace:" ",thkap:"≈",thksim:"∼",THORN:"Þ",thorn:"þ",Tilde:"∼",tilde:"˜",TildeEqual:"≃",TildeFullEqual:"≅",TildeTilde:"≈",times:"×",timesb:"⊠",timesbar:"⨱",timesd:"⨰",tint:"∭",toea:"⤨",top:"⊤",topbot:"⌶",topcir:"⫱",Topf:"𝕋",topf:"𝕥",topfork:"⫚",tosa:"⤩",tprime:"‴",TRADE:"™",trade:"™",triangle:"▵",triangledown:"▿",triangleleft:"◃",trianglelefteq:"⊴",triangleq:"≜",triangleright:"▹",trianglerighteq:"⊵",tridot:"◬",trie:"≜",triminus:"⨺",TripleDot:"⃛",triplus:"⨹",trisb:"⧍",tritime:"⨻",trpezium:"⏢",Tscr:"𝒯",tscr:"𝓉",TScy:"Ц",tscy:"ц",TSHcy:"Ћ",tshcy:"ћ",Tstrok:"Ŧ",tstrok:"ŧ",twixt:"≬",twoheadleftarrow:"↞",twoheadrightarrow:"↠",Uacute:"Ú",uacute:"ú",Uarr:"↟",uArr:"⇑",uarr:"↑",Uarrocir:"⥉",Ubrcy:"Ў",ubrcy:"ў",Ubreve:"Ŭ",ubreve:"ŭ",Ucirc:"Û",ucirc:"û",Ucy:"У",ucy:"у",udarr:"⇅",Udblac:"Ű",udblac:"ű",udhar:"⥮",ufisht:"⥾",Ufr:"𝔘",ufr:"𝔲",Ugrave:"Ù",ugrave:"ù",uHar:"⥣",uharl:"↿",uharr:"↾",uhblk:"▀",ulcorn:"⌜",ulcorner:"⌜",ulcrop:"⌏",ultri:"◸",Umacr:"Ū",umacr:"ū",uml:"¨",UnderBar:"_",UnderBrace:"⏟",UnderBracket:"⎵",UnderParenthesis:"⏝",Union:"⋃",UnionPlus:"⊎",Uogon:"Ų",uogon:"ų",Uopf:"𝕌",uopf:"𝕦",UpArrow:"↑",Uparrow:"⇑",uparrow:"↑",UpArrowBar:"⤒",UpArrowDownArrow:"⇅",UpDownArrow:"↕",Updownarrow:"⇕",updownarrow:"↕",UpEquilibrium:"⥮",upharpoonleft:"↿",upharpoonright:"↾",uplus:"⊎",UpperLeftArrow:"↖",UpperRightArrow:"↗",Upsi:"ϒ",upsi:"υ",upsih:"ϒ",Upsilon:"Υ",upsilon:"υ",UpTee:"⊥",UpTeeArrow:"↥",upuparrows:"⇈",urcorn:"⌝",urcorner:"⌝",urcrop:"⌎",Uring:"Ů",uring:"ů",urtri:"◹",Uscr:"𝒰",uscr:"𝓊",utdot:"⋰",Utilde:"Ũ",utilde:"ũ",utri:"▵",utrif:"▴",uuarr:"⇈",Uuml:"Ü",uuml:"ü",uwangle:"⦧",vangrt:"⦜",varepsilon:"ϵ",varkappa:"ϰ",varnothing:"∅",varphi:"ϕ",varpi:"ϖ",varpropto:"∝",vArr:"⇕",varr:"↕",varrho:"ϱ",varsigma:"ς",varsubsetneq:"⊊︀",varsubsetneqq:"⫋︀",varsupsetneq:"⊋︀",varsupsetneqq:"⫌︀",vartheta:"ϑ",vartriangleleft:"⊲",vartriangleright:"⊳",Vbar:"⫫",vBar:"⫨",vBarv:"⫩",Vcy:"В",vcy:"в",VDash:"⊫",Vdash:"⊩",vDash:"⊨",vdash:"⊢",Vdashl:"⫦",Vee:"⋁",vee:"∨",veebar:"⊻",veeeq:"≚",vellip:"⋮",Verbar:"‖",verbar:"|",Vert:"‖",vert:"|",VerticalBar:"∣",VerticalLine:"|",VerticalSeparator:"❘",VerticalTilde:"≀",VeryThinSpace:" ",Vfr:"𝔙",vfr:"𝔳",vltri:"⊲",vnsub:"⊂⃒",vnsup:"⊃⃒",Vopf:"𝕍",vopf:"𝕧",vprop:"∝",vrtri:"⊳",Vscr:"𝒱",vscr:"𝓋",vsubnE:"⫋︀",vsubne:"⊊︀",vsupnE:"⫌︀",vsupne:"⊋︀",Vvdash:"⊪",vzigzag:"⦚",Wcirc:"Ŵ",wcirc:"ŵ",wedbar:"⩟",Wedge:"⋀",wedge:"∧",wedgeq:"≙",weierp:"℘",Wfr:"𝔚",wfr:"𝔴",Wopf:"𝕎",wopf:"𝕨",wp:"℘",wr:"≀",wreath:"≀",Wscr:"𝒲",wscr:"𝓌",xcap:"⋂",xcirc:"◯",xcup:"⋃",xdtri:"▽",Xfr:"𝔛",xfr:"𝔵",xhArr:"⟺",xharr:"⟷",Xi:"Ξ",xi:"ξ",xlArr:"⟸",xlarr:"⟵",xmap:"⟼",xnis:"⋻",xodot:"⨀",Xopf:"𝕏",xopf:"𝕩",xoplus:"⨁",xotime:"⨂",xrArr:"⟹",xrarr:"⟶",Xscr:"𝒳",xscr:"𝓍",xsqcup:"⨆",xuplus:"⨄",xutri:"△",xvee:"⋁",xwedge:"⋀",Yacute:"Ý",yacute:"ý",YAcy:"Я",yacy:"я",Ycirc:"Ŷ",ycirc:"ŷ",Ycy:"Ы",ycy:"ы",yen:"¥",Yfr:"𝔜",yfr:"𝔶",YIcy:"Ї",yicy:"ї",Yopf:"𝕐",yopf:"𝕪",Yscr:"𝒴",yscr:"𝓎",YUcy:"Ю",yucy:"ю",Yuml:"Ÿ",yuml:"ÿ",Zacute:"Ź",zacute:"ź",Zcaron:"Ž",zcaron:"ž",Zcy:"З",zcy:"з",Zdot:"Ż",zdot:"ż",zeetrf:"ℨ",ZeroWidthSpace:"​",Zeta:"Ζ",zeta:"ζ",Zfr:"ℨ",zfr:"𝔷",ZHcy:"Ж",zhcy:"ж",zigrarr:"⇝",Zopf:"ℤ",zopf:"𝕫",Zscr:"𝒵",zscr:"𝓏",zwj:"‍",zwnj:"‌"}),t.entityMap=t.HTML_ENTITIES},function(e,t,n){var i=n(59).NAMESPACE,r=/[A-Z_a-z\xC0-\xD6\xD8-\xF6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/,o=new RegExp("[\\-\\.0-9"+r.source.slice(1,-1)+"\\u00B7\\u0300-\\u036F\\u203F-\\u2040]"),a=new RegExp("^"+r.source+o.source+"*(?::"+r.source+o.source+"*)?$");function c(e,t){this.message=e,this.locator=t,Error.captureStackTrace&&Error.captureStackTrace(this,c)}function s(){}function u(e,t){return t.lineNumber=e.lineNumber,t.columnNumber=e.columnNumber,t}function d(e,t,n,r,o,a){function c(e,t,i){n.attributeNames.hasOwnProperty(e)&&a.fatalError("Attribute "+e+" redefined"),n.addValue(e,t.replace(/[\t\n\r]/g," ").replace(/&#?\w+;/g,o),i)}for(var s,u=++t,d=0;;){var l=e.charAt(u);switch(l){case"=":if(1===d)s=e.slice(t,u),d=3;else{if(2!==d)throw new Error("attribute equal must after attrName");d=3}break;case"'":case'"':if(3===d||1===d){if(1===d&&(a.warning('attribute value must after "="'),s=e.slice(t,u)),t=u+1,!((u=e.indexOf(l,t))>0))throw new Error("attribute value no end '"+l+"' match");c(s,f=e.slice(t,u),t-1),d=5}else{if(4!=d)throw new Error('attribute value must after "="');c(s,f=e.slice(t,u),t),a.warning('attribute "'+s+'" missed start quot('+l+")!!"),t=u+1,d=5}break;case"/":switch(d){case 0:n.setTagName(e.slice(t,u));case 5:case 6:case 7:d=7,n.closed=!0;case 4:case 1:break;case 2:n.closed=!0;break;default:throw new Error("attribute invalid close char('/')")}break;case"":return a.error("unexpected end of input"),0==d&&n.setTagName(e.slice(t,u)),u;case">":switch(d){case 0:n.setTagName(e.slice(t,u));case 5:case 6:case 7:break;case 4:case 1:"/"===(f=e.slice(t,u)).slice(-1)&&(n.closed=!0,f=f.slice(0,-1));case 2:2===d&&(f=s),4==d?(a.warning('attribute "'+f+'" missed quot(")!'),c(s,f,t)):(i.isHTML(r[""])&&f.match(/^(?:disabled|checked|selected)$/i)||a.warning('attribute "'+f+'" missed value!! "'+f+'" instead!!'),c(f,f,t));break;case 3:throw new Error("attribute value missed!!")}return u;case"":l=" ";default:if(l<=" ")switch(d){case 0:n.setTagName(e.slice(t,u)),d=6;break;case 1:s=e.slice(t,u),d=2;break;case 4:var f=e.slice(t,u);a.warning('attribute "'+f+'" missed quot(")!!'),c(s,f,t);case 5:d=6}else switch(d){case 2:n.tagName;i.isHTML(r[""])&&s.match(/^(?:disabled|checked|selected)$/i)||a.warning('attribute "'+s+'" missed value!! "'+s+'" instead2!!'),c(s,s,t),t=u,d=1;break;case 5:a.warning('attribute space is required"'+s+'"!!');case 6:d=1,t=u;break;case 3:d=4,t=u;break;case 7:throw new Error("elements closed character '/' and '>' must be connected to")}}u++}}function l(e,t,n){for(var r=e.tagName,o=null,a=e.length;a--;){var c=e[a],s=c.qName,u=c.value;if((h=s.indexOf(":"))>0)var d=c.prefix=s.slice(0,h),l=s.slice(h+1),f="xmlns"===d&&l;else l=s,d=null,f="xmlns"===s&&"";c.localName=l,!1!==f&&(null==o&&(o={},p(n,n={})),n[f]=o[f]=u,c.uri=i.XMLNS,t.startPrefixMapping(f,u))}for(a=e.length;a--;){(d=(c=e[a]).prefix)&&("xml"===d&&(c.uri=i.XML),"xmlns"!==d&&(c.uri=n[d||""]))}var h;(h=r.indexOf(":"))>0?(d=e.prefix=r.slice(0,h),l=e.localName=r.slice(h+1)):(d=null,l=e.localName=r);var g=e.uri=n[d||""];if(t.startElement(g,l,r,e),!e.closed)return e.currentNSMap=n,e.localNSMap=o,!0;if(t.endElement(g,l,r),o)for(d in o)Object.prototype.hasOwnProperty.call(o,d)&&t.endPrefixMapping(d)}function f(e,t,n,i,r){if(/^(?:script|textarea)$/i.test(n)){var o=e.indexOf("</"+n+">",t),a=e.substring(t+1,o);if(/[&<]/.test(a))return/^script$/i.test(n)?(r.characters(a,0,a.length),o):(a=a.replace(/&#?\w+;/g,i),r.characters(a,0,a.length),o)}return t+1}function h(e,t,n,i){var r=i[n];return null==r&&((r=e.lastIndexOf("</"+n+">"))<t&&(r=e.lastIndexOf("</"+n)),i[n]=r),r<t}function p(e,t){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])}function g(e,t,n,i){switch(e.charAt(t+2)){case"-":return"-"===e.charAt(t+3)?(r=e.indexOf("--\x3e",t+4))>t?(n.comment(e,t+4,r-t-4),r+3):(i.error("Unclosed comment"),-1):-1;default:if("CDATA["==e.substr(t+3,6)){var r=e.indexOf("]]>",t+9);return n.startCDATA(),n.characters(e,t+9,r-t-9),n.endCDATA(),r+3}var o=function(e,t){var n,i=[],r=/'[^']+'|"[^"]+"|[^\s<>\/=]+=?|(\/?\s*>|<)/g;r.lastIndex=t,r.exec(e);for(;n=r.exec(e);)if(i.push(n),n[1])return i}(e,t),a=o.length;if(a>1&&/!doctype/i.test(o[0][0])){var c=o[1][0],s=!1,u=!1;a>3&&(/^public$/i.test(o[2][0])?(s=o[3][0],u=a>4&&o[4][0]):/^system$/i.test(o[2][0])&&(u=o[3][0]));var d=o[a-1];return n.startDTD(c,s,u),n.endDTD(),d.index+d[0].length}}return-1}function m(e,t,n){var i=e.indexOf("?>",t);if(i){var r=e.substring(t,i).match(/^<\?(\S*)\s*([\s\S]*?)\s*$/);if(r){r[0].length;return n.processingInstruction(r[1],r[2]),i+2}return-1}return-1}function y(){this.attributeNames={}}c.prototype=new Error,c.prototype.name=c.name,s.prototype={parse:function(e,t,n){var r=this.domBuilder;r.startDocument(),p(t,t={}),function(e,t,n,r,o){function a(e){var t=e.slice(1,-1);return Object.hasOwnProperty.call(n,t)?n[t]:"#"===t.charAt(0)?function(e){if(e>65535){var t=55296+((e-=65536)>>10),n=56320+(1023&e);return String.fromCharCode(t,n)}return String.fromCharCode(e)}(parseInt(t.substr(1).replace("x","0x"))):(o.error("entity not found:"+e),e)}function s(t){if(t>U){var n=e.substring(U,t).replace(/&#?\w+;/g,a);x&&p(U),r.characters(n,0,t-U),U=t}}function p(t,n){for(;t>=v&&(n=_.exec(e));)b=n.index,v=b+n[0].length,x.lineNumber++;x.columnNumber=t-b+1}var b=0,v=0,_=/.*(?:\r\n?|\n)|.*$/g,x=r.locator,D=[{currentNSMap:t}],w={},U=0;for(;;){try{var T=e.indexOf("<",U);if(T<0){if(!e.substr(U).match(/^\s*$/)){var E=r.doc,k=E.createTextNode(e.substr(U));E.appendChild(k),r.currentElement=k}return}switch(T>U&&s(T),e.charAt(T+1)){case"/":var C=e.indexOf(">",T+3),S=e.substring(T+2,C).replace(/[ \t\n\r]+$/g,""),F=D.pop();C<0?(S=e.substring(T+2).replace(/[\s<].*/,""),o.error("end tag name: "+S+" is not complete:"+F.tagName),C=T+1+S.length):S.match(/\s</)&&(S=S.replace(/[\s<].*/,""),o.error("end tag name: "+S+" maybe not complete"),C=T+1+S.length);var A=F.localNSMap,O=F.tagName==S;if(O||F.tagName&&F.tagName.toLowerCase()==S.toLowerCase()){if(r.endElement(F.uri,F.localName,S),A)for(var W in A)Object.prototype.hasOwnProperty.call(A,W)&&r.endPrefixMapping(W);O||o.fatalError("end tag name: "+S+" is not match the current start tagName:"+F.tagName)}else D.push(F);C++;break;case"?":x&&p(T),C=m(e,T,r);break;case"!":x&&p(T),C=g(e,T,r,o);break;default:x&&p(T);var B=new y,I=D[D.length-1].currentNSMap,N=(C=d(e,T,B,I,a,o),B.length);if(!B.closed&&h(e,C,B.tagName,w)&&(B.closed=!0,n.nbsp||o.warning("unclosed xml attribute")),x&&N){for(var L=u(x,{}),R=0;R<N;R++){var P=B[R];p(P.offset),P.locator=u(x,{})}r.locator=L,l(B,r,I)&&D.push(B),r.locator=x}else l(B,r,I)&&D.push(B);i.isHTML(B.uri)&&!B.closed?C=f(e,C,B.tagName,a,r):C++}}catch(e){if(e instanceof c)throw e;o.error("element parse error: "+e),C=-1}C>U?U=C:s(Math.max(T,U)+1)}}(e,t,n,r,this.errorHandler),r.endDocument()}},y.prototype={setTagName:function(e){if(!a.test(e))throw new Error("invalid tagName:"+e);this.tagName=e},addValue:function(e,t,n){if(!a.test(e))throw new Error("invalid attribute:"+e);this.attributeNames[e]=this.length,this[this.length++]={qName:e,value:t,offset:n}},length:0,getLocalName:function(e){return this[e].localName},getLocator:function(e){return this[e].locator},getQName:function(e){return this[e].qName},getURI:function(e){return this[e].uri},getValue:function(e){return this[e].value}},t.XMLReader=s,t.ParseError=c},function(e,t,n){var i=n(7),r=n(430);function o(e,t){e.text(t.value)}t.writeString=function(e,t){var n=i.invert(t),a={element:function(e,t){var n=e.element(s(t.name),t.attributes);t.children.forEach((function(e){c(n,e)}))},text:o};function c(e,t){return a[t.type](e,t)}function s(e){var t=/^\{(.*)\}(.*)$/.exec(e);if(t){var i=n[t[1]];return i+(""===i?"":":")+t[2]}return e}return function(e){var n=r.create(s(e.name),{version:"1.0",encoding:"UTF-8",standalone:!0});return i.forEach(t,(function(e,t){var i="xmlns"+(""===t?"":":"+t);n.attribute(i,e)})),e.children.forEach((function(e){c(n,e)})),n.end()}(e)}},function(e,t,n){(function(){var t,i,r,o,a,c,s;s=n(29),a=s.assign,c=s.isFunction,t=n(431),i=n(432),o=n(103),r=n(433),e.exports.create=function(e,n,i,r){var o,c;if(null==e)throw new Error("Root element needs a name.");return r=a({},n,i,r),c=(o=new t(r)).element(e),r.headless||(o.declaration(r),null==r.pubID&&null==r.sysID||o.doctype(r)),c},e.exports.begin=function(e,n,r){var o;return c(e)&&(n=(o=[e,n])[0],r=o[1],e={}),n?new i(e,n,r):new t(e)},e.exports.stringWriter=function(e){return new o(e)},e.exports.streamWriter=function(e,t){return new r(e,t)}}).call(this)},function(e,t,n){(function(){var t,i,r,o,a={}.hasOwnProperty;o=n(29).isPlainObject,t=n(15),r=n(280),i=n(103),e.exports=function(e){function t(e){t.__super__.constructor.call(this,null),this.name="?xml",e||(e={}),e.writer||(e.writer=new i),this.options=e,this.stringify=new r(e),this.isDocument=!0}return function(e,t){for(var n in t)a.call(t,n)&&(e[n]=t[n]);function i(){this.constructor=e}i.prototype=t.prototype,e.prototype=new i,e.__super__=t.prototype}(t,e),t.prototype.end=function(e){var t;return e?o(e)&&(t=e,e=this.options.writer.set(t)):e=this.options.writer,e.document(this)},t.prototype.toString=function(e){return this.options.writer.set(e).document(this)},t}(t)}).call(this)},function(e,t,n){(function(){var t,i,r,o,a,c,s,u,d,l,f,h,p,g,m,y,b,v,_,x,D={}.hasOwnProperty;x=n(29),v=x.isObject,b=x.isFunction,_=x.isPlainObject,y=x.getValue,l=n(60),i=n(61),r=n(62),h=n(69),m=n(70),f=n(71),u=n(63),d=n(64),o=n(65),c=n(66),a=n(67),s=n(68),t=n(279),g=n(280),p=n(103),e.exports=function(){function e(e,t,n){var i;this.name="?xml",e||(e={}),e.writer?_(e.writer)&&(i=e.writer,e.writer=new p(i)):e.writer=new p(e),this.options=e,this.writer=e.writer,this.stringify=new g(e),this.onDataCallback=t||function(){},this.onEndCallback=n||function(){},this.currentNode=null,this.currentLevel=-1,this.openTags={},this.documentStarted=!1,this.documentCompleted=!1,this.root=null}return e.prototype.node=function(e,t,n){var i,r;if(null==e)throw new Error("Missing node name.");if(this.root&&-1===this.currentLevel)throw new Error("Document can only have one root node. "+this.debugInfo(e));return this.openCurrent(),e=y(e),null===t&&null==n&&(t=(i=[{},null])[0],n=i[1]),null==t&&(t={}),t=y(t),v(t)||(n=(r=[t,n])[0],t=r[1]),this.currentNode=new l(this,e,t),this.currentNode.children=!1,this.currentLevel++,this.openTags[this.currentLevel]=this.currentNode,null!=n&&this.text(n),this},e.prototype.element=function(e,t,n){return this.currentNode&&this.currentNode instanceof d?this.dtdElement.apply(this,arguments):this.node(e,t,n)},e.prototype.attribute=function(e,n){var i,r;if(!this.currentNode||this.currentNode.children)throw new Error("att() can only be used immediately after an ele() call in callback mode. "+this.debugInfo(e));if(null!=e&&(e=y(e)),v(e))for(i in e)D.call(e,i)&&(r=e[i],this.attribute(i,r));else b(n)&&(n=n.apply()),this.options.skipNullAttributes&&null==n||(this.currentNode.attributes[e]=new t(this,e,n));return this},e.prototype.text=function(e){var t;return this.openCurrent(),t=new m(this,e),this.onData(this.writer.text(t,this.currentLevel+1),this.currentLevel+1),this},e.prototype.cdata=function(e){var t;return this.openCurrent(),t=new i(this,e),this.onData(this.writer.cdata(t,this.currentLevel+1),this.currentLevel+1),this},e.prototype.comment=function(e){var t;return this.openCurrent(),t=new r(this,e),this.onData(this.writer.comment(t,this.currentLevel+1),this.currentLevel+1),this},e.prototype.raw=function(e){var t;return this.openCurrent(),t=new h(this,e),this.onData(this.writer.raw(t,this.currentLevel+1),this.currentLevel+1),this},e.prototype.instruction=function(e,t){var n,i,r,o,a;if(this.openCurrent(),null!=e&&(e=y(e)),null!=t&&(t=y(t)),Array.isArray(e))for(n=0,o=e.length;n<o;n++)i=e[n],this.instruction(i);else if(v(e))for(i in e)D.call(e,i)&&(r=e[i],this.instruction(i,r));else b(t)&&(t=t.apply()),a=new f(this,e,t),this.onData(this.writer.processingInstruction(a,this.currentLevel+1),this.currentLevel+1);return this},e.prototype.declaration=function(e,t,n){var i;if(this.openCurrent(),this.documentStarted)throw new Error("declaration() must be the first node.");return i=new u(this,e,t,n),this.onData(this.writer.declaration(i,this.currentLevel+1),this.currentLevel+1),this},e.prototype.doctype=function(e,t,n){if(this.openCurrent(),null==e)throw new Error("Missing root node name.");if(this.root)throw new Error("dtd() must come before the root node.");return this.currentNode=new d(this,t,n),this.currentNode.rootNodeName=e,this.currentNode.children=!1,this.currentLevel++,this.openTags[this.currentLevel]=this.currentNode,this},e.prototype.dtdElement=function(e,t){var n;return this.openCurrent(),n=new a(this,e,t),this.onData(this.writer.dtdElement(n,this.currentLevel+1),this.currentLevel+1),this},e.prototype.attList=function(e,t,n,i,r){var a;return this.openCurrent(),a=new o(this,e,t,n,i,r),this.onData(this.writer.dtdAttList(a,this.currentLevel+1),this.currentLevel+1),this},e.prototype.entity=function(e,t){var n;return this.openCurrent(),n=new c(this,!1,e,t),this.onData(this.writer.dtdEntity(n,this.currentLevel+1),this.currentLevel+1),this},e.prototype.pEntity=function(e,t){var n;return this.openCurrent(),n=new c(this,!0,e,t),this.onData(this.writer.dtdEntity(n,this.currentLevel+1),this.currentLevel+1),this},e.prototype.notation=function(e,t){var n;return this.openCurrent(),n=new s(this,e,t),this.onData(this.writer.dtdNotation(n,this.currentLevel+1),this.currentLevel+1),this},e.prototype.up=function(){if(this.currentLevel<0)throw new Error("The document node has no parent.");return this.currentNode?(this.currentNode.children?this.closeNode(this.currentNode):this.openNode(this.currentNode),this.currentNode=null):this.closeNode(this.openTags[this.currentLevel]),delete this.openTags[this.currentLevel],this.currentLevel--,this},e.prototype.end=function(){for(;this.currentLevel>=0;)this.up();return this.onEnd()},e.prototype.openCurrent=function(){if(this.currentNode)return this.currentNode.children=!0,this.openNode(this.currentNode)},e.prototype.openNode=function(e){if(!e.isOpen)return!this.root&&0===this.currentLevel&&e instanceof l&&(this.root=e),this.onData(this.writer.openNode(e,this.currentLevel),this.currentLevel),e.isOpen=!0},e.prototype.closeNode=function(e){if(!e.isClosed)return this.onData(this.writer.closeNode(e,this.currentLevel),this.currentLevel),e.isClosed=!0},e.prototype.onData=function(e,t){return this.documentStarted=!0,this.onDataCallback(e,t+1)},e.prototype.onEnd=function(){return this.documentCompleted=!0,this.onEndCallback()},e.prototype.debugInfo=function(e){return null==e?"":"node: <"+e+">"},e.prototype.ele=function(){return this.element.apply(this,arguments)},e.prototype.nod=function(e,t,n){return this.node(e,t,n)},e.prototype.txt=function(e){return this.text(e)},e.prototype.dat=function(e){return this.cdata(e)},e.prototype.com=function(e){return this.comment(e)},e.prototype.ins=function(e,t){return this.instruction(e,t)},e.prototype.dec=function(e,t,n){return this.declaration(e,t,n)},e.prototype.dtd=function(e,t,n){return this.doctype(e,t,n)},e.prototype.e=function(e,t,n){return this.element(e,t,n)},e.prototype.n=function(e,t,n){return this.node(e,t,n)},e.prototype.t=function(e){return this.text(e)},e.prototype.d=function(e){return this.cdata(e)},e.prototype.c=function(e){return this.comment(e)},e.prototype.r=function(e){return this.raw(e)},e.prototype.i=function(e,t){return this.instruction(e,t)},e.prototype.att=function(){return this.currentNode&&this.currentNode instanceof d?this.attList.apply(this,arguments):this.attribute.apply(this,arguments)},e.prototype.a=function(){return this.currentNode&&this.currentNode instanceof d?this.attList.apply(this,arguments):this.attribute.apply(this,arguments)},e.prototype.ent=function(e,t){return this.entity(e,t)},e.prototype.pent=function(e,t){return this.pEntity(e,t)},e.prototype.not=function(e,t){return this.notation(e,t)},e}()}).call(this)},function(e,t,n){(function(){var t,i,r,o,a,c,s,u,d,l,f,h,p,g,m={}.hasOwnProperty;s=n(63),u=n(64),t=n(61),i=n(62),l=n(60),h=n(69),p=n(70),f=n(71),d=n(102),r=n(65),o=n(67),a=n(66),c=n(68),g=n(281),e.exports=function(e){function n(e,t){n.__super__.constructor.call(this,t),this.stream=e}return function(e,t){for(var n in t)m.call(t,n)&&(e[n]=t[n]);function i(){this.constructor=e}i.prototype=t.prototype,e.prototype=new i,e.__super__=t.prototype}(n,e),n.prototype.document=function(e){var t,n,r,o,a,c,l,h;for(n=0,o=(c=e.children).length;n<o;n++)(t=c[n]).isLastRootNode=!1;for(e.children[e.children.length-1].isLastRootNode=!0,h=[],r=0,a=(l=e.children).length;r<a;r++)if(!((t=l[r])instanceof d))switch(!1){case!(t instanceof s):h.push(this.declaration(t));break;case!(t instanceof u):h.push(this.docType(t));break;case!(t instanceof i):h.push(this.comment(t));break;case!(t instanceof f):h.push(this.processingInstruction(t));break;default:h.push(this.element(t))}return h},n.prototype.attribute=function(e){return this.stream.write(" "+e.name+'="'+e.value+'"')},n.prototype.cdata=function(e,t){return this.stream.write(this.space(t)+"<![CDATA["+e.text+"]]>"+this.endline(e))},n.prototype.comment=function(e,t){return this.stream.write(this.space(t)+"\x3c!-- "+e.text+" --\x3e"+this.endline(e))},n.prototype.declaration=function(e,t){return this.stream.write(this.space(t)),this.stream.write('<?xml version="'+e.version+'"'),null!=e.encoding&&this.stream.write(' encoding="'+e.encoding+'"'),null!=e.standalone&&this.stream.write(' standalone="'+e.standalone+'"'),this.stream.write(this.spacebeforeslash+"?>"),this.stream.write(this.endline(e))},n.prototype.docType=function(e,n){var s,u,d,l;if(n||(n=0),this.stream.write(this.space(n)),this.stream.write("<!DOCTYPE "+e.root().name),e.pubID&&e.sysID?this.stream.write(' PUBLIC "'+e.pubID+'" "'+e.sysID+'"'):e.sysID&&this.stream.write(' SYSTEM "'+e.sysID+'"'),e.children.length>0){for(this.stream.write(" ["),this.stream.write(this.endline(e)),u=0,d=(l=e.children).length;u<d;u++)switch(s=l[u],!1){case!(s instanceof r):this.dtdAttList(s,n+1);break;case!(s instanceof o):this.dtdElement(s,n+1);break;case!(s instanceof a):this.dtdEntity(s,n+1);break;case!(s instanceof c):this.dtdNotation(s,n+1);break;case!(s instanceof t):this.cdata(s,n+1);break;case!(s instanceof i):this.comment(s,n+1);break;case!(s instanceof f):this.processingInstruction(s,n+1);break;default:throw new Error("Unknown DTD node type: "+s.constructor.name)}this.stream.write("]")}return this.stream.write(this.spacebeforeslash+">"),this.stream.write(this.endline(e))},n.prototype.element=function(e,n){var r,o,a,c,s,u,g,y;for(s in n||(n=0),y=this.space(n),this.stream.write(y+"<"+e.name),u=e.attributes)m.call(u,s)&&(r=u[s],this.attribute(r));if(0===e.children.length||e.children.every((function(e){return""===e.value})))this.allowEmpty?this.stream.write("></"+e.name+">"):this.stream.write(this.spacebeforeslash+"/>");else if(this.pretty&&1===e.children.length&&null!=e.children[0].value)this.stream.write(">"),this.stream.write(e.children[0].value),this.stream.write("</"+e.name+">");else{for(this.stream.write(">"+this.newline),a=0,c=(g=e.children).length;a<c;a++)switch(o=g[a],!1){case!(o instanceof t):this.cdata(o,n+1);break;case!(o instanceof i):this.comment(o,n+1);break;case!(o instanceof l):this.element(o,n+1);break;case!(o instanceof h):this.raw(o,n+1);break;case!(o instanceof p):this.text(o,n+1);break;case!(o instanceof f):this.processingInstruction(o,n+1);break;case!(o instanceof d):break;default:throw new Error("Unknown XML node type: "+o.constructor.name)}this.stream.write(y+"</"+e.name+">")}return this.stream.write(this.endline(e))},n.prototype.processingInstruction=function(e,t){return this.stream.write(this.space(t)+"<?"+e.target),e.value&&this.stream.write(" "+e.value),this.stream.write(this.spacebeforeslash+"?>"+this.endline(e))},n.prototype.raw=function(e,t){return this.stream.write(this.space(t)+e.value+this.endline(e))},n.prototype.text=function(e,t){return this.stream.write(this.space(t)+e.value+this.endline(e))},n.prototype.dtdAttList=function(e,t){return this.stream.write(this.space(t)+"<!ATTLIST "+e.elementName+" "+e.attributeName+" "+e.attributeType),"#DEFAULT"!==e.defaultValueType&&this.stream.write(" "+e.defaultValueType),e.defaultValue&&this.stream.write(' "'+e.defaultValue+'"'),this.stream.write(this.spacebeforeslash+">"+this.endline(e))},n.prototype.dtdElement=function(e,t){return this.stream.write(this.space(t)+"<!ELEMENT "+e.name+" "+e.value),this.stream.write(this.spacebeforeslash+">"+this.endline(e))},n.prototype.dtdEntity=function(e,t){return this.stream.write(this.space(t)+"<!ENTITY"),e.pe&&this.stream.write(" %"),this.stream.write(" "+e.name),e.value?this.stream.write(' "'+e.value+'"'):(e.pubID&&e.sysID?this.stream.write(' PUBLIC "'+e.pubID+'" "'+e.sysID+'"'):e.sysID&&this.stream.write(' SYSTEM "'+e.sysID+'"'),e.nData&&this.stream.write(" NDATA "+e.nData)),this.stream.write(this.spacebeforeslash+">"+this.endline(e))},n.prototype.dtdNotation=function(e,t){return this.stream.write(this.space(t)+"<!NOTATION "+e.name),e.pubID&&e.sysID?this.stream.write(' PUBLIC "'+e.pubID+'" "'+e.sysID+'"'):e.pubID?this.stream.write(' PUBLIC "'+e.pubID+'"'):e.sysID&&this.stream.write(' SYSTEM "'+e.sysID+'"'),this.stream.write(this.spacebeforeslash+">"+this.endline(e))},n.prototype.endline=function(e){return e.isLastRootNode?"":this.newline},n}(g)}).call(this)},function(e,t,n){t.createBodyReader=function(e){return{readXmlElement:function(t){return new u(e).readXmlElement(t)},readXmlElements:function(t){return new u(e).readXmlElements(t)}}},t._readNumberingProperties=d;var i=n(435),r=n(7),o=n(35),a=n(23).Result,c=n(23).warning,s=n(437);function u(e){var t=[],n=[],a=[],u=e.relationships,v=e.contentTypes,_=e.docxFile,x=e.files,D=e.numbering,w=e.styles;function U(e){return b(e.map(T))}function T(e){if("element"===e.type){var t=I[e.name];if(t)return t(e);if(!Object.prototype.hasOwnProperty.call(f,e.name))return h([c("An unrecognised element was ignored: "+e.name)])}return p()}function E(e){return function(e){return A(e,"w:pStyle","Paragraph",w.findParagraphStyleById)}(e).map((function(t){return{type:"paragraphProperties",styleId:t.styleId,styleName:t.name,alignment:e.firstOrEmpty("w:jc").attributes["w:val"],numbering:d(t.styleId,e.firstOrEmpty("w:numPr"),D),indent:k(e.firstOrEmpty("w:ind"))}}))}function k(e){return{start:e.attributes["w:start"]||e.attributes["w:left"],end:e.attributes["w:end"]||e.attributes["w:right"],firstLine:e.attributes["w:firstLine"],hanging:e.attributes["w:hanging"]}}function C(e){return function(e){return A(e,"w:rStyle","Run",w.findCharacterStyleById)}(e).map((function(t){var n=e.firstOrEmpty("w:sz").attributes["w:val"],i=/^[0-9]+$/.test(n)?parseInt(n,10)/2:null;return{type:"runProperties",styleId:t.styleId,styleName:t.name,verticalAlignment:e.firstOrEmpty("w:vertAlign").attributes["w:val"],font:e.firstOrEmpty("w:rFonts").attributes["w:ascii"],fontSize:i,isBold:F(e.first("w:b")),isUnderline:S(e.first("w:u")),isItalic:F(e.first("w:i")),isStrikethrough:F(e.first("w:strike")),isAllCaps:F(e.first("w:caps")),isSmallCaps:F(e.first("w:smallCaps"))}}))}function S(e){if(e){var t=e.attributes["w:val"];return void 0!==t&&"false"!==t&&"0"!==t&&"none"!==t}return!1}function F(e){if(e){var t=e.attributes["w:val"];return"false"!==t&&"0"!==t}return!1}function A(e,t,n,i){var r=[],o=e.first(t),a=null,s=null;if(o&&(a=o.attributes["w:val"])){var u=i(a);u?s=u.name:r.push(function(e,t){return c(e+" style with ID "+t+" was referenced but not defined in the document")}(n,a))}return m({styleId:a,name:s},r)}var O={type:"unknown"};function W(e){return function(t){var n=t.attributes["w:id"];return g(new o.NoteReference({noteType:e,noteId:n}))}}function B(e){return U(e.children)}var I={"w:p":function(e){var t=e.firstOrEmpty("w:pPr");if(!!t.firstOrEmpty("w:rPr").first("w:del"))return e.children.forEach((function(e){a.push(e)})),p();var n=e.children;return a.length>0&&(n=a.concat(n),a=[]),y.map(E(t),U(n),(function(e,t){return new o.Paragraph(t,e)})).insertExtra()},"w:r":function(e){return y.map(C(e.firstOrEmpty("w:rPr")),U(e.children),(function(e,n){var i,a=(i=r.last(t.filter((function(e){return"hyperlink"===e.type}))))?i.options:null;return null!==a&&(n=[new o.Hyperlink(n,a)]),new o.Run(n,e)}))},"w:fldChar":function(e){var i=e.attributes["w:fldCharType"];if("begin"===i)t.push(O),n=[];else if("end"===i)t.pop();else if("separate"===i){var r=function(e){var t=/\s*HYPERLINK "(.*)"/.exec(e);if(t)return{href:t[1]};var n=/\s*HYPERLINK\s+\\l\s+"(.*)"/.exec(e);if(n)return{anchor:n[1]};return null}(n.join("")),o=null===r?O:{type:"hyperlink",options:r};t.pop(),t.push(o)}return p()},"w:instrText":function(e){return n.push(e.text()),p()},"w:t":function(e){return g(new o.Text(e.text()))},"w:tab":function(e){return g(new o.Tab)},"w:noBreakHyphen":function(){return g(new o.Text("‑"))},"w:softHyphen":function(e){return g(new o.Text("­"))},"w:sym":function(e){var t=e.attributes["w:font"],n=e.attributes["w:char"],r=i.hex(t,n);return null==r&&/^F0..$/.test(n)&&(r=i.hex(t,n.substring(2))),null==r?h([c("A w:sym element with an unsupported character was ignored: char "+n+" in font "+t)]):g(new o.Text(r.string))},"w:hyperlink":function(e){var t=e.attributes["r:id"],n=e.attributes["w:anchor"];return U(e.children).map((function(i){function a(t){var n=e.attributes["w:tgtFrame"]||null;return new o.Hyperlink(i,r.extend({targetFrame:n},t))}if(t){var c=u.findTargetByRelationshipId(t);return n&&(c=s.replaceFragment(c,n)),a({href:c})}return n?a({anchor:n}):i}))},"w:tbl":function(e){var t=function(e){return function(e){return A(e,"w:tblStyle","Table",w.findTableStyleById)}(e).map((function(e){return{styleId:e.styleId,styleName:e.name}}))}(e.firstOrEmpty("w:tblPr"));return U(e.children).flatMap(N).flatMap((function(e){return t.map((function(t){return o.Table(e,t)}))}))},"w:tr":function(e){var t=!!e.firstOrEmpty("w:trPr").first("w:tblHeader");return U(e.children).map((function(e){return o.TableRow(e,{isHeader:t})}))},"w:tc":function(e){return U(e.children).map((function(t){var n=e.firstOrEmpty("w:tcPr"),i=n.firstOrEmpty("w:gridSpan").attributes["w:val"],r=i?parseInt(i,10):1,a=o.TableCell(t,{colSpan:r});return a._vMerge=function(e){var t=e.first("w:vMerge");if(t){var n=t.attributes["w:val"];return"continue"===n||!n}return null}(n),a}))},"w:footnoteReference":W("footnote"),"w:endnoteReference":W("endnote"),"w:commentReference":function(e){return g(o.commentReference({commentId:e.attributes["w:id"]}))},"w:br":function(e){var t=e.attributes["w:type"];return null==t||"textWrapping"===t?g(o.lineBreak):"page"===t?g(o.pageBreak):"column"===t?g(o.columnBreak):h([c("Unsupported break type: "+t)])},"w:bookmarkStart":function(e){var t=e.attributes["w:name"];return"_GoBack"===t?p():g(new o.BookmarkStart({name:t}))},"mc:AlternateContent":function(e){return B(e.first("mc:Fallback"))},"w:sdt":function(e){return U(e.firstOrEmpty("w:sdtContent").children)},"w:ins":B,"w:object":B,"w:smartTag":B,"w:drawing":B,"w:pict":function(e){return B(e).toExtra()},"v:roundrect":B,"v:shape":B,"v:textbox":B,"w:txbxContent":B,"wp:inline":L,"wp:anchor":L,"v:imagedata":function(e){var t=e.attributes["r:id"];return t?j(P(t),e.attributes["o:title"]):h([c("A v:imagedata element without a relationship ID was ignored")])},"v:group":B,"v:rect":B};return{readXmlElement:T,readXmlElements:U};function N(e){if(r.any(e,(function(e){return e.type!==o.types.tableRow})))return m(e,[c("unexpected non-row element in table, cell merging may be incorrect")]);if(r.any(e,(function(e){return r.any(e.children,(function(e){return e.type!==o.types.tableCell}))})))return m(e,[c("unexpected non-cell element in table row, cell merging may be incorrect")]);var t={};return e.forEach((function(e){var n=0;e.children.forEach((function(e){e._vMerge&&t[n]?t[n].rowSpan++:(t[n]=e,e._vMerge=!1),n+=e.colSpan}))})),e.forEach((function(e){e.children=e.children.filter((function(e){return!e._vMerge})),e.children.forEach((function(e){delete e._vMerge}))})),g(e)}function L(e){return b(e.getElementsByTagName("a:graphic").getElementsByTagName("a:graphicData").getElementsByTagName("pic:pic").getElementsByTagName("pic:blipFill").getElementsByTagName("a:blip").map(R.bind(null,e)))}function R(e,t){var n,i=e.first("wp:docPr").attributes,r=null==(n=i.descr)||/^\s*$/.test(n)?i.title:i.descr,o=function(e){var t=e.attributes["r:embed"],n=e.attributes["r:link"];if(t)return P(t);if(n){var i=u.findTargetByRelationshipId(n);return{path:i,read:x.read.bind(x,i)}}return null}(t);return null===o?h([c("Could not find image file for a:blip element")]):j(o,r)}function P(e){var t=s.uriToZipEntryName("word",u.findTargetByRelationshipId(e));return{path:t,read:_.read.bind(_,t)}}function j(e,t){var n=v.findContentType(e.path);return m(o.Image({readImage:e.read,altText:t,contentType:n}),l[n]?[]:c("Image of type "+n+" is unlikely to display in web browsers"))}}function d(e,t,n){var i=t.firstOrEmpty("w:ilvl").attributes["w:val"],r=t.firstOrEmpty("w:numId").attributes["w:val"];if(void 0!==i&&void 0!==r)return n.findLevel(r,i);if(null!=e){var o=n.findLevelByParagraphStyleId(e);if(null!=o)return o}return null}var l={"image/png":!0,"image/gif":!0,"image/jpeg":!0,"image/svg+xml":!0,"image/tiff":!0},f={"office-word:wrap":!0,"v:shadow":!0,"v:shapetype":!0,"w:annotationRef":!0,"w:bookmarkEnd":!0,"w:sectPr":!0,"w:proofErr":!0,"w:lastRenderedPageBreak":!0,"w:commentRangeStart":!0,"w:commentRangeEnd":!0,"w:del":!0,"w:footnoteRef":!0,"w:endnoteRef":!0,"w:pPr":!0,"w:rPr":!0,"w:tblPr":!0,"w:tblGrid":!0,"w:trPr":!0,"w:tcPr":!0};function h(e){return new y(null,null,e)}function p(){return new y(null)}function g(e){return new y(e)}function m(e,t){return new y(e,null,t)}function y(e,t,n){this.value=e||[],this.extra=t||[],this._result=new a({element:this.value,extra:t},n),this.messages=this._result.messages}function b(e){var t=a.combine(r.pluck(e,"_result"));return new y(r.flatten(r.pluck(t.value,"element")),r.filter(r.flatten(r.pluck(t.value,"extra")),_),t.messages)}function v(e,t){return r.flatten([e,t])}function _(e){return e}y.prototype.toExtra=function(){return new y(null,v(this.extra,this.value),this.messages)},y.prototype.insertExtra=function(){var e=this.extra;return e&&e.length?new y(v(this.value,e),null,this.messages):this},y.prototype.map=function(e){var t=this._result.map((function(t){return e(t.element)}));return new y(t.value,this.extra,t.messages)},y.prototype.flatMap=function(e){var t=this._result.flatMap((function(t){return e(t.element)._result}));return new y(t.value.element,v(this.extra,t.value.extra),t.messages)},y.map=function(e,t,n){return new y(n(e.value,t.value),v(e.extra,t.extra),e.messages.concat(t.messages))}},function(e,t,n){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.hex=t.dec=t.codePoint=void 0;for(var r=i(n(436)),o={},a=String.fromCodePoint?String.fromCodePoint:function(e){if(e<=65535)return String.fromCharCode(e);var t=Math.floor((e-65536)/1024)+55296,n=(e-65536)%1024+56320;return String.fromCharCode(t,n)},c=0,s=r.default;c<s.length;c++){var u=s[c],d=parseInt(u["Unicode dec"],10),l={codePoint:d,string:a(d)};o[u["Typeface name"].toUpperCase()+"_"+u["Dingbat dec"]]=l}function f(e,t){return o[e.toUpperCase()+"_"+t]}t.codePoint=f,t.dec=function(e,t){return f(e,parseInt(t,10))},t.hex=function(e,t){return f(e,parseInt(t,16))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=[{"Typeface name":"Symbol","Dingbat dec":"32","Dingbat hex":"20","Unicode dec":"32","Unicode hex":"20"},{"Typeface name":"Symbol","Dingbat dec":"33","Dingbat hex":"21","Unicode dec":"33","Unicode hex":"21"},{"Typeface name":"Symbol","Dingbat dec":"34","Dingbat hex":"22","Unicode dec":"8704","Unicode hex":"2200"},{"Typeface name":"Symbol","Dingbat dec":"35","Dingbat hex":"23","Unicode dec":"35","Unicode hex":"23"},{"Typeface name":"Symbol","Dingbat dec":"36","Dingbat hex":"24","Unicode dec":"8707","Unicode hex":"2203"},{"Typeface name":"Symbol","Dingbat dec":"37","Dingbat hex":"25","Unicode dec":"37","Unicode hex":"25"},{"Typeface name":"Symbol","Dingbat dec":"38","Dingbat hex":"26","Unicode dec":"38","Unicode hex":"26"},{"Typeface name":"Symbol","Dingbat dec":"39","Dingbat hex":"27","Unicode dec":"8717","Unicode hex":"220D"},{"Typeface name":"Symbol","Dingbat dec":"40","Dingbat hex":"28","Unicode dec":"40","Unicode hex":"28"},{"Typeface name":"Symbol","Dingbat dec":"41","Dingbat hex":"29","Unicode dec":"41","Unicode hex":"29"},{"Typeface name":"Symbol","Dingbat dec":"42","Dingbat hex":"2A","Unicode dec":"42","Unicode hex":"2A"},{"Typeface name":"Symbol","Dingbat dec":"43","Dingbat hex":"2B","Unicode dec":"43","Unicode hex":"2B"},{"Typeface name":"Symbol","Dingbat dec":"44","Dingbat hex":"2C","Unicode dec":"44","Unicode hex":"2C"},{"Typeface name":"Symbol","Dingbat dec":"45","Dingbat hex":"2D","Unicode dec":"8722","Unicode hex":"2212"},{"Typeface name":"Symbol","Dingbat dec":"46","Dingbat hex":"2E","Unicode dec":"46","Unicode hex":"2E"},{"Typeface name":"Symbol","Dingbat dec":"47","Dingbat hex":"2F","Unicode dec":"47","Unicode hex":"2F"},{"Typeface name":"Symbol","Dingbat dec":"48","Dingbat hex":"30","Unicode dec":"48","Unicode hex":"30"},{"Typeface name":"Symbol","Dingbat dec":"49","Dingbat hex":"31","Unicode dec":"49","Unicode hex":"31"},{"Typeface name":"Symbol","Dingbat dec":"50","Dingbat hex":"32","Unicode dec":"50","Unicode hex":"32"},{"Typeface name":"Symbol","Dingbat dec":"51","Dingbat hex":"33","Unicode dec":"51","Unicode hex":"33"},{"Typeface name":"Symbol","Dingbat dec":"52","Dingbat hex":"34","Unicode dec":"52","Unicode hex":"34"},{"Typeface name":"Symbol","Dingbat dec":"53","Dingbat hex":"35","Unicode dec":"53","Unicode hex":"35"},{"Typeface name":"Symbol","Dingbat dec":"54","Dingbat hex":"36","Unicode dec":"54","Unicode hex":"36"},{"Typeface name":"Symbol","Dingbat dec":"55","Dingbat hex":"37","Unicode dec":"55","Unicode hex":"37"},{"Typeface name":"Symbol","Dingbat dec":"56","Dingbat hex":"38","Unicode dec":"56","Unicode hex":"38"},{"Typeface name":"Symbol","Dingbat dec":"57","Dingbat hex":"39","Unicode dec":"57","Unicode hex":"39"},{"Typeface name":"Symbol","Dingbat dec":"58","Dingbat hex":"3A","Unicode dec":"58","Unicode hex":"3A"},{"Typeface name":"Symbol","Dingbat dec":"59","Dingbat hex":"3B","Unicode dec":"59","Unicode hex":"3B"},{"Typeface name":"Symbol","Dingbat dec":"60","Dingbat hex":"3C","Unicode dec":"60","Unicode hex":"3C"},{"Typeface name":"Symbol","Dingbat dec":"61","Dingbat hex":"3D","Unicode dec":"61","Unicode hex":"3D"},{"Typeface name":"Symbol","Dingbat dec":"62","Dingbat hex":"3E","Unicode dec":"62","Unicode hex":"3E"},{"Typeface name":"Symbol","Dingbat dec":"63","Dingbat hex":"3F","Unicode dec":"63","Unicode hex":"3F"},{"Typeface name":"Symbol","Dingbat dec":"64","Dingbat hex":"40","Unicode dec":"8773","Unicode hex":"2245"},{"Typeface name":"Symbol","Dingbat dec":"65","Dingbat hex":"41","Unicode dec":"913","Unicode hex":"391"},{"Typeface name":"Symbol","Dingbat dec":"66","Dingbat hex":"42","Unicode dec":"914","Unicode hex":"392"},{"Typeface name":"Symbol","Dingbat dec":"67","Dingbat hex":"43","Unicode dec":"935","Unicode hex":"3A7"},{"Typeface name":"Symbol","Dingbat dec":"68","Dingbat hex":"44","Unicode dec":"916","Unicode hex":"394"},{"Typeface name":"Symbol","Dingbat dec":"69","Dingbat hex":"45","Unicode dec":"917","Unicode hex":"395"},{"Typeface name":"Symbol","Dingbat dec":"70","Dingbat hex":"46","Unicode dec":"934","Unicode hex":"3A6"},{"Typeface name":"Symbol","Dingbat dec":"71","Dingbat hex":"47","Unicode dec":"915","Unicode hex":"393"},{"Typeface name":"Symbol","Dingbat dec":"72","Dingbat hex":"48","Unicode dec":"919","Unicode hex":"397"},{"Typeface name":"Symbol","Dingbat dec":"73","Dingbat hex":"49","Unicode dec":"921","Unicode hex":"399"},{"Typeface name":"Symbol","Dingbat dec":"74","Dingbat hex":"4A","Unicode dec":"977","Unicode hex":"3D1"},{"Typeface name":"Symbol","Dingbat dec":"75","Dingbat hex":"4B","Unicode dec":"922","Unicode hex":"39A"},{"Typeface name":"Symbol","Dingbat dec":"76","Dingbat hex":"4C","Unicode dec":"923","Unicode hex":"39B"},{"Typeface name":"Symbol","Dingbat dec":"77","Dingbat hex":"4D","Unicode dec":"924","Unicode hex":"39C"},{"Typeface name":"Symbol","Dingbat dec":"78","Dingbat hex":"4E","Unicode dec":"925","Unicode hex":"39D"},{"Typeface name":"Symbol","Dingbat dec":"79","Dingbat hex":"4F","Unicode dec":"927","Unicode hex":"39F"},{"Typeface name":"Symbol","Dingbat dec":"80","Dingbat hex":"50","Unicode dec":"928","Unicode hex":"3A0"},{"Typeface name":"Symbol","Dingbat dec":"81","Dingbat hex":"51","Unicode dec":"920","Unicode hex":"398"},{"Typeface name":"Symbol","Dingbat dec":"82","Dingbat hex":"52","Unicode dec":"929","Unicode hex":"3A1"},{"Typeface name":"Symbol","Dingbat dec":"83","Dingbat hex":"53","Unicode dec":"931","Unicode hex":"3A3"},{"Typeface name":"Symbol","Dingbat dec":"84","Dingbat hex":"54","Unicode dec":"932","Unicode hex":"3A4"},{"Typeface name":"Symbol","Dingbat dec":"85","Dingbat hex":"55","Unicode dec":"933","Unicode hex":"3A5"},{"Typeface name":"Symbol","Dingbat dec":"86","Dingbat hex":"56","Unicode dec":"962","Unicode hex":"3C2"},{"Typeface name":"Symbol","Dingbat dec":"87","Dingbat hex":"57","Unicode dec":"937","Unicode hex":"3A9"},{"Typeface name":"Symbol","Dingbat dec":"88","Dingbat hex":"58","Unicode dec":"926","Unicode hex":"39E"},{"Typeface name":"Symbol","Dingbat dec":"89","Dingbat hex":"59","Unicode dec":"936","Unicode hex":"3A8"},{"Typeface name":"Symbol","Dingbat dec":"90","Dingbat hex":"5A","Unicode dec":"918","Unicode hex":"396"},{"Typeface name":"Symbol","Dingbat dec":"91","Dingbat hex":"5B","Unicode dec":"91","Unicode hex":"5B"},{"Typeface name":"Symbol","Dingbat dec":"92","Dingbat hex":"5C","Unicode dec":"8756","Unicode hex":"2234"},{"Typeface name":"Symbol","Dingbat dec":"93","Dingbat hex":"5D","Unicode dec":"93","Unicode hex":"5D"},{"Typeface name":"Symbol","Dingbat dec":"94","Dingbat hex":"5E","Unicode dec":"8869","Unicode hex":"22A5"},{"Typeface name":"Symbol","Dingbat dec":"95","Dingbat hex":"5F","Unicode dec":"95","Unicode hex":"5F"},{"Typeface name":"Symbol","Dingbat dec":"96","Dingbat hex":"60","Unicode dec":"8254","Unicode hex":"203E"},{"Typeface name":"Symbol","Dingbat dec":"97","Dingbat hex":"61","Unicode dec":"945","Unicode hex":"3B1"},{"Typeface name":"Symbol","Dingbat dec":"98","Dingbat hex":"62","Unicode dec":"946","Unicode hex":"3B2"},{"Typeface name":"Symbol","Dingbat dec":"99","Dingbat hex":"63","Unicode dec":"967","Unicode hex":"3C7"},{"Typeface name":"Symbol","Dingbat dec":"100","Dingbat hex":"64","Unicode dec":"948","Unicode hex":"3B4"},{"Typeface name":"Symbol","Dingbat dec":"101","Dingbat hex":"65","Unicode dec":"949","Unicode hex":"3B5"},{"Typeface name":"Symbol","Dingbat dec":"102","Dingbat hex":"66","Unicode dec":"966","Unicode hex":"3C6"},{"Typeface name":"Symbol","Dingbat dec":"103","Dingbat hex":"67","Unicode dec":"947","Unicode hex":"3B3"},{"Typeface name":"Symbol","Dingbat dec":"104","Dingbat hex":"68","Unicode dec":"951","Unicode hex":"3B7"},{"Typeface name":"Symbol","Dingbat dec":"105","Dingbat hex":"69","Unicode dec":"953","Unicode hex":"3B9"},{"Typeface name":"Symbol","Dingbat dec":"106","Dingbat hex":"6A","Unicode dec":"981","Unicode hex":"3D5"},{"Typeface name":"Symbol","Dingbat dec":"107","Dingbat hex":"6B","Unicode dec":"954","Unicode hex":"3BA"},{"Typeface name":"Symbol","Dingbat dec":"108","Dingbat hex":"6C","Unicode dec":"955","Unicode hex":"3BB"},{"Typeface name":"Symbol","Dingbat dec":"109","Dingbat hex":"6D","Unicode dec":"956","Unicode hex":"3BC"},{"Typeface name":"Symbol","Dingbat dec":"110","Dingbat hex":"6E","Unicode dec":"957","Unicode hex":"3BD"},{"Typeface name":"Symbol","Dingbat dec":"111","Dingbat hex":"6F","Unicode dec":"959","Unicode hex":"3BF"},{"Typeface name":"Symbol","Dingbat dec":"112","Dingbat hex":"70","Unicode dec":"960","Unicode hex":"3C0"},{"Typeface name":"Symbol","Dingbat dec":"113","Dingbat hex":"71","Unicode dec":"952","Unicode hex":"3B8"},{"Typeface name":"Symbol","Dingbat dec":"114","Dingbat hex":"72","Unicode dec":"961","Unicode hex":"3C1"},{"Typeface name":"Symbol","Dingbat dec":"115","Dingbat hex":"73","Unicode dec":"963","Unicode hex":"3C3"},{"Typeface name":"Symbol","Dingbat dec":"116","Dingbat hex":"74","Unicode dec":"964","Unicode hex":"3C4"},{"Typeface name":"Symbol","Dingbat dec":"117","Dingbat hex":"75","Unicode dec":"965","Unicode hex":"3C5"},{"Typeface name":"Symbol","Dingbat dec":"118","Dingbat hex":"76","Unicode dec":"982","Unicode hex":"3D6"},{"Typeface name":"Symbol","Dingbat dec":"119","Dingbat hex":"77","Unicode dec":"969","Unicode hex":"3C9"},{"Typeface name":"Symbol","Dingbat dec":"120","Dingbat hex":"78","Unicode dec":"958","Unicode hex":"3BE"},{"Typeface name":"Symbol","Dingbat dec":"121","Dingbat hex":"79","Unicode dec":"968","Unicode hex":"3C8"},{"Typeface name":"Symbol","Dingbat dec":"122","Dingbat hex":"7A","Unicode dec":"950","Unicode hex":"3B6"},{"Typeface name":"Symbol","Dingbat dec":"123","Dingbat hex":"7B","Unicode dec":"123","Unicode hex":"7B"},{"Typeface name":"Symbol","Dingbat dec":"124","Dingbat hex":"7C","Unicode dec":"124","Unicode hex":"7C"},{"Typeface name":"Symbol","Dingbat dec":"125","Dingbat hex":"7D","Unicode dec":"125","Unicode hex":"7D"},{"Typeface name":"Symbol","Dingbat dec":"126","Dingbat hex":"7E","Unicode dec":"126","Unicode hex":"7E"},{"Typeface name":"Symbol","Dingbat dec":"160","Dingbat hex":"A0","Unicode dec":"8364","Unicode hex":"20AC"},{"Typeface name":"Symbol","Dingbat dec":"161","Dingbat hex":"A1","Unicode dec":"978","Unicode hex":"3D2"},{"Typeface name":"Symbol","Dingbat dec":"162","Dingbat hex":"A2","Unicode dec":"8242","Unicode hex":"2032"},{"Typeface name":"Symbol","Dingbat dec":"163","Dingbat hex":"A3","Unicode dec":"8804","Unicode hex":"2264"},{"Typeface name":"Symbol","Dingbat dec":"164","Dingbat hex":"A4","Unicode dec":"8260","Unicode hex":"2044"},{"Typeface name":"Symbol","Dingbat dec":"165","Dingbat hex":"A5","Unicode dec":"8734","Unicode hex":"221E"},{"Typeface name":"Symbol","Dingbat dec":"166","Dingbat hex":"A6","Unicode dec":"402","Unicode hex":"192"},{"Typeface name":"Symbol","Dingbat dec":"167","Dingbat hex":"A7","Unicode dec":"9827","Unicode hex":"2663"},{"Typeface name":"Symbol","Dingbat dec":"168","Dingbat hex":"A8","Unicode dec":"9830","Unicode hex":"2666"},{"Typeface name":"Symbol","Dingbat dec":"169","Dingbat hex":"A9","Unicode dec":"9829","Unicode hex":"2665"},{"Typeface name":"Symbol","Dingbat dec":"170","Dingbat hex":"AA","Unicode dec":"9824","Unicode hex":"2660"},{"Typeface name":"Symbol","Dingbat dec":"171","Dingbat hex":"AB","Unicode dec":"8596","Unicode hex":"2194"},{"Typeface name":"Symbol","Dingbat dec":"172","Dingbat hex":"AC","Unicode dec":"8592","Unicode hex":"2190"},{"Typeface name":"Symbol","Dingbat dec":"173","Dingbat hex":"AD","Unicode dec":"8593","Unicode hex":"2191"},{"Typeface name":"Symbol","Dingbat dec":"174","Dingbat hex":"AE","Unicode dec":"8594","Unicode hex":"2192"},{"Typeface name":"Symbol","Dingbat dec":"175","Dingbat hex":"AF","Unicode dec":"8595","Unicode hex":"2193"},{"Typeface name":"Symbol","Dingbat dec":"176","Dingbat hex":"B0","Unicode dec":"176","Unicode hex":"B0"},{"Typeface name":"Symbol","Dingbat dec":"177","Dingbat hex":"B1","Unicode dec":"177","Unicode hex":"B1"},{"Typeface name":"Symbol","Dingbat dec":"178","Dingbat hex":"B2","Unicode dec":"8243","Unicode hex":"2033"},{"Typeface name":"Symbol","Dingbat dec":"179","Dingbat hex":"B3","Unicode dec":"8805","Unicode hex":"2265"},{"Typeface name":"Symbol","Dingbat dec":"180","Dingbat hex":"B4","Unicode dec":"215","Unicode hex":"D7"},{"Typeface name":"Symbol","Dingbat dec":"181","Dingbat hex":"B5","Unicode dec":"8733","Unicode hex":"221D"},{"Typeface name":"Symbol","Dingbat dec":"182","Dingbat hex":"B6","Unicode dec":"8706","Unicode hex":"2202"},{"Typeface name":"Symbol","Dingbat dec":"183","Dingbat hex":"B7","Unicode dec":"8226","Unicode hex":"2022"},{"Typeface name":"Symbol","Dingbat dec":"184","Dingbat hex":"B8","Unicode dec":"247","Unicode hex":"F7"},{"Typeface name":"Symbol","Dingbat dec":"185","Dingbat hex":"B9","Unicode dec":"8800","Unicode hex":"2260"},{"Typeface name":"Symbol","Dingbat dec":"186","Dingbat hex":"BA","Unicode dec":"8801","Unicode hex":"2261"},{"Typeface name":"Symbol","Dingbat dec":"187","Dingbat hex":"BB","Unicode dec":"8776","Unicode hex":"2248"},{"Typeface name":"Symbol","Dingbat dec":"188","Dingbat hex":"BC","Unicode dec":"8230","Unicode hex":"2026"},{"Typeface name":"Symbol","Dingbat dec":"189","Dingbat hex":"BD","Unicode dec":"9168","Unicode hex":"23D0"},{"Typeface name":"Symbol","Dingbat dec":"190","Dingbat hex":"BE","Unicode dec":"9135","Unicode hex":"23AF"},{"Typeface name":"Symbol","Dingbat dec":"191","Dingbat hex":"BF","Unicode dec":"8629","Unicode hex":"21B5"},{"Typeface name":"Symbol","Dingbat dec":"192","Dingbat hex":"C0","Unicode dec":"8501","Unicode hex":"2135"},{"Typeface name":"Symbol","Dingbat dec":"193","Dingbat hex":"C1","Unicode dec":"8465","Unicode hex":"2111"},{"Typeface name":"Symbol","Dingbat dec":"194","Dingbat hex":"C2","Unicode dec":"8476","Unicode hex":"211C"},{"Typeface name":"Symbol","Dingbat dec":"195","Dingbat hex":"C3","Unicode dec":"8472","Unicode hex":"2118"},{"Typeface name":"Symbol","Dingbat dec":"196","Dingbat hex":"C4","Unicode dec":"8855","Unicode hex":"2297"},{"Typeface name":"Symbol","Dingbat dec":"197","Dingbat hex":"C5","Unicode dec":"8853","Unicode hex":"2295"},{"Typeface name":"Symbol","Dingbat dec":"198","Dingbat hex":"C6","Unicode dec":"8709","Unicode hex":"2205"},{"Typeface name":"Symbol","Dingbat dec":"199","Dingbat hex":"C7","Unicode dec":"8745","Unicode hex":"2229"},{"Typeface name":"Symbol","Dingbat dec":"200","Dingbat hex":"C8","Unicode dec":"8746","Unicode hex":"222A"},{"Typeface name":"Symbol","Dingbat dec":"201","Dingbat hex":"C9","Unicode dec":"8835","Unicode hex":"2283"},{"Typeface name":"Symbol","Dingbat dec":"202","Dingbat hex":"CA","Unicode dec":"8839","Unicode hex":"2287"},{"Typeface name":"Symbol","Dingbat dec":"203","Dingbat hex":"CB","Unicode dec":"8836","Unicode hex":"2284"},{"Typeface name":"Symbol","Dingbat dec":"204","Dingbat hex":"CC","Unicode dec":"8834","Unicode hex":"2282"},{"Typeface name":"Symbol","Dingbat dec":"205","Dingbat hex":"CD","Unicode dec":"8838","Unicode hex":"2286"},{"Typeface name":"Symbol","Dingbat dec":"206","Dingbat hex":"CE","Unicode dec":"8712","Unicode hex":"2208"},{"Typeface name":"Symbol","Dingbat dec":"207","Dingbat hex":"CF","Unicode dec":"8713","Unicode hex":"2209"},{"Typeface name":"Symbol","Dingbat dec":"208","Dingbat hex":"D0","Unicode dec":"8736","Unicode hex":"2220"},{"Typeface name":"Symbol","Dingbat dec":"209","Dingbat hex":"D1","Unicode dec":"8711","Unicode hex":"2207"},{"Typeface name":"Symbol","Dingbat dec":"210","Dingbat hex":"D2","Unicode dec":"174","Unicode hex":"AE"},{"Typeface name":"Symbol","Dingbat dec":"211","Dingbat hex":"D3","Unicode dec":"169","Unicode hex":"A9"},{"Typeface name":"Symbol","Dingbat dec":"212","Dingbat hex":"D4","Unicode dec":"8482","Unicode hex":"2122"},{"Typeface name":"Symbol","Dingbat dec":"213","Dingbat hex":"D5","Unicode dec":"8719","Unicode hex":"220F"},{"Typeface name":"Symbol","Dingbat dec":"214","Dingbat hex":"D6","Unicode dec":"8730","Unicode hex":"221A"},{"Typeface name":"Symbol","Dingbat dec":"215","Dingbat hex":"D7","Unicode dec":"8901","Unicode hex":"22C5"},{"Typeface name":"Symbol","Dingbat dec":"216","Dingbat hex":"D8","Unicode dec":"172","Unicode hex":"AC"},{"Typeface name":"Symbol","Dingbat dec":"217","Dingbat hex":"D9","Unicode dec":"8743","Unicode hex":"2227"},{"Typeface name":"Symbol","Dingbat dec":"218","Dingbat hex":"DA","Unicode dec":"8744","Unicode hex":"2228"},{"Typeface name":"Symbol","Dingbat dec":"219","Dingbat hex":"DB","Unicode dec":"8660","Unicode hex":"21D4"},{"Typeface name":"Symbol","Dingbat dec":"220","Dingbat hex":"DC","Unicode dec":"8656","Unicode hex":"21D0"},{"Typeface name":"Symbol","Dingbat dec":"221","Dingbat hex":"DD","Unicode dec":"8657","Unicode hex":"21D1"},{"Typeface name":"Symbol","Dingbat dec":"222","Dingbat hex":"DE","Unicode dec":"8658","Unicode hex":"21D2"},{"Typeface name":"Symbol","Dingbat dec":"223","Dingbat hex":"DF","Unicode dec":"8659","Unicode hex":"21D3"},{"Typeface name":"Symbol","Dingbat dec":"224","Dingbat hex":"E0","Unicode dec":"9674","Unicode hex":"25CA"},{"Typeface name":"Symbol","Dingbat dec":"225","Dingbat hex":"E1","Unicode dec":"12296","Unicode hex":"3008"},{"Typeface name":"Symbol","Dingbat dec":"226","Dingbat hex":"E2","Unicode dec":"174","Unicode hex":"AE"},{"Typeface name":"Symbol","Dingbat dec":"227","Dingbat hex":"E3","Unicode dec":"169","Unicode hex":"A9"},{"Typeface name":"Symbol","Dingbat dec":"228","Dingbat hex":"E4","Unicode dec":"8482","Unicode hex":"2122"},{"Typeface name":"Symbol","Dingbat dec":"229","Dingbat hex":"E5","Unicode dec":"8721","Unicode hex":"2211"},{"Typeface name":"Symbol","Dingbat dec":"230","Dingbat hex":"E6","Unicode dec":"9115","Unicode hex":"239B"},{"Typeface name":"Symbol","Dingbat dec":"231","Dingbat hex":"E7","Unicode dec":"9116","Unicode hex":"239C"},{"Typeface name":"Symbol","Dingbat dec":"232","Dingbat hex":"E8","Unicode dec":"9117","Unicode hex":"239D"},{"Typeface name":"Symbol","Dingbat dec":"233","Dingbat hex":"E9","Unicode dec":"9121","Unicode hex":"23A1"},{"Typeface name":"Symbol","Dingbat dec":"234","Dingbat hex":"EA","Unicode dec":"9122","Unicode hex":"23A2"},{"Typeface name":"Symbol","Dingbat dec":"235","Dingbat hex":"EB","Unicode dec":"9123","Unicode hex":"23A3"},{"Typeface name":"Symbol","Dingbat dec":"236","Dingbat hex":"EC","Unicode dec":"9127","Unicode hex":"23A7"},{"Typeface name":"Symbol","Dingbat dec":"237","Dingbat hex":"ED","Unicode dec":"9128","Unicode hex":"23A8"},{"Typeface name":"Symbol","Dingbat dec":"238","Dingbat hex":"EE","Unicode dec":"9129","Unicode hex":"23A9"},{"Typeface name":"Symbol","Dingbat dec":"239","Dingbat hex":"EF","Unicode dec":"9130","Unicode hex":"23AA"},{"Typeface name":"Symbol","Dingbat dec":"240","Dingbat hex":"F0","Unicode dec":"63743","Unicode hex":"F8FF"},{"Typeface name":"Symbol","Dingbat dec":"241","Dingbat hex":"F1","Unicode dec":"12297","Unicode hex":"3009"},{"Typeface name":"Symbol","Dingbat dec":"242","Dingbat hex":"F2","Unicode dec":"8747","Unicode hex":"222B"},{"Typeface name":"Symbol","Dingbat dec":"243","Dingbat hex":"F3","Unicode dec":"8992","Unicode hex":"2320"},{"Typeface name":"Symbol","Dingbat dec":"244","Dingbat hex":"F4","Unicode dec":"9134","Unicode hex":"23AE"},{"Typeface name":"Symbol","Dingbat dec":"245","Dingbat hex":"F5","Unicode dec":"8993","Unicode hex":"2321"},{"Typeface name":"Symbol","Dingbat dec":"246","Dingbat hex":"F6","Unicode dec":"9118","Unicode hex":"239E"},{"Typeface name":"Symbol","Dingbat dec":"247","Dingbat hex":"F7","Unicode dec":"9119","Unicode hex":"239F"},{"Typeface name":"Symbol","Dingbat dec":"248","Dingbat hex":"F8","Unicode dec":"9120","Unicode hex":"23A0"},{"Typeface name":"Symbol","Dingbat dec":"249","Dingbat hex":"F9","Unicode dec":"9124","Unicode hex":"23A4"},{"Typeface name":"Symbol","Dingbat dec":"250","Dingbat hex":"FA","Unicode dec":"9125","Unicode hex":"23A5"},{"Typeface name":"Symbol","Dingbat dec":"251","Dingbat hex":"FB","Unicode dec":"9126","Unicode hex":"23A6"},{"Typeface name":"Symbol","Dingbat dec":"252","Dingbat hex":"FC","Unicode dec":"9131","Unicode hex":"23AB"},{"Typeface name":"Symbol","Dingbat dec":"253","Dingbat hex":"FD","Unicode dec":"9132","Unicode hex":"23AC"},{"Typeface name":"Symbol","Dingbat dec":"254","Dingbat hex":"FE","Unicode dec":"9133","Unicode hex":"23AD"},{"Typeface name":"Webdings","Dingbat dec":"32","Dingbat hex":"20","Unicode dec":"32","Unicode hex":"20"},{"Typeface name":"Webdings","Dingbat dec":"33","Dingbat hex":"21","Unicode dec":"128375","Unicode hex":"1F577"},{"Typeface name":"Webdings","Dingbat dec":"34","Dingbat hex":"22","Unicode dec":"128376","Unicode hex":"1F578"},{"Typeface name":"Webdings","Dingbat dec":"35","Dingbat hex":"23","Unicode dec":"128370","Unicode hex":"1F572"},{"Typeface name":"Webdings","Dingbat dec":"36","Dingbat hex":"24","Unicode dec":"128374","Unicode hex":"1F576"},{"Typeface name":"Webdings","Dingbat dec":"37","Dingbat hex":"25","Unicode dec":"127942","Unicode hex":"1F3C6"},{"Typeface name":"Webdings","Dingbat dec":"38","Dingbat hex":"26","Unicode dec":"127894","Unicode hex":"1F396"},{"Typeface name":"Webdings","Dingbat dec":"39","Dingbat hex":"27","Unicode dec":"128391","Unicode hex":"1F587"},{"Typeface name":"Webdings","Dingbat dec":"40","Dingbat hex":"28","Unicode dec":"128488","Unicode hex":"1F5E8"},{"Typeface name":"Webdings","Dingbat dec":"41","Dingbat hex":"29","Unicode dec":"128489","Unicode hex":"1F5E9"},{"Typeface name":"Webdings","Dingbat dec":"42","Dingbat hex":"2A","Unicode dec":"128496","Unicode hex":"1F5F0"},{"Typeface name":"Webdings","Dingbat dec":"43","Dingbat hex":"2B","Unicode dec":"128497","Unicode hex":"1F5F1"},{"Typeface name":"Webdings","Dingbat dec":"44","Dingbat hex":"2C","Unicode dec":"127798","Unicode hex":"1F336"},{"Typeface name":"Webdings","Dingbat dec":"45","Dingbat hex":"2D","Unicode dec":"127895","Unicode hex":"1F397"},{"Typeface name":"Webdings","Dingbat dec":"46","Dingbat hex":"2E","Unicode dec":"128638","Unicode hex":"1F67E"},{"Typeface name":"Webdings","Dingbat dec":"47","Dingbat hex":"2F","Unicode dec":"128636","Unicode hex":"1F67C"},{"Typeface name":"Webdings","Dingbat dec":"48","Dingbat hex":"30","Unicode dec":"128469","Unicode hex":"1F5D5"},{"Typeface name":"Webdings","Dingbat dec":"49","Dingbat hex":"31","Unicode dec":"128470","Unicode hex":"1F5D6"},{"Typeface name":"Webdings","Dingbat dec":"50","Dingbat hex":"32","Unicode dec":"128471","Unicode hex":"1F5D7"},{"Typeface name":"Webdings","Dingbat dec":"51","Dingbat hex":"33","Unicode dec":"9204","Unicode hex":"23F4"},{"Typeface name":"Webdings","Dingbat dec":"52","Dingbat hex":"34","Unicode dec":"9205","Unicode hex":"23F5"},{"Typeface name":"Webdings","Dingbat dec":"53","Dingbat hex":"35","Unicode dec":"9206","Unicode hex":"23F6"},{"Typeface name":"Webdings","Dingbat dec":"54","Dingbat hex":"36","Unicode dec":"9207","Unicode hex":"23F7"},{"Typeface name":"Webdings","Dingbat dec":"55","Dingbat hex":"37","Unicode dec":"9194","Unicode hex":"23EA"},{"Typeface name":"Webdings","Dingbat dec":"56","Dingbat hex":"38","Unicode dec":"9193","Unicode hex":"23E9"},{"Typeface name":"Webdings","Dingbat dec":"57","Dingbat hex":"39","Unicode dec":"9198","Unicode hex":"23EE"},{"Typeface name":"Webdings","Dingbat dec":"58","Dingbat hex":"3A","Unicode dec":"9197","Unicode hex":"23ED"},{"Typeface name":"Webdings","Dingbat dec":"59","Dingbat hex":"3B","Unicode dec":"9208","Unicode hex":"23F8"},{"Typeface name":"Webdings","Dingbat dec":"60","Dingbat hex":"3C","Unicode dec":"9209","Unicode hex":"23F9"},{"Typeface name":"Webdings","Dingbat dec":"61","Dingbat hex":"3D","Unicode dec":"9210","Unicode hex":"23FA"},{"Typeface name":"Webdings","Dingbat dec":"62","Dingbat hex":"3E","Unicode dec":"128474","Unicode hex":"1F5DA"},{"Typeface name":"Webdings","Dingbat dec":"63","Dingbat hex":"3F","Unicode dec":"128499","Unicode hex":"1F5F3"},{"Typeface name":"Webdings","Dingbat dec":"64","Dingbat hex":"40","Unicode dec":"128736","Unicode hex":"1F6E0"},{"Typeface name":"Webdings","Dingbat dec":"65","Dingbat hex":"41","Unicode dec":"127959","Unicode hex":"1F3D7"},{"Typeface name":"Webdings","Dingbat dec":"66","Dingbat hex":"42","Unicode dec":"127960","Unicode hex":"1F3D8"},{"Typeface name":"Webdings","Dingbat dec":"67","Dingbat hex":"43","Unicode dec":"127961","Unicode hex":"1F3D9"},{"Typeface name":"Webdings","Dingbat dec":"68","Dingbat hex":"44","Unicode dec":"127962","Unicode hex":"1F3DA"},{"Typeface name":"Webdings","Dingbat dec":"69","Dingbat hex":"45","Unicode dec":"127964","Unicode hex":"1F3DC"},{"Typeface name":"Webdings","Dingbat dec":"70","Dingbat hex":"46","Unicode dec":"127981","Unicode hex":"1F3ED"},{"Typeface name":"Webdings","Dingbat dec":"71","Dingbat hex":"47","Unicode dec":"127963","Unicode hex":"1F3DB"},{"Typeface name":"Webdings","Dingbat dec":"72","Dingbat hex":"48","Unicode dec":"127968","Unicode hex":"1F3E0"},{"Typeface name":"Webdings","Dingbat dec":"73","Dingbat hex":"49","Unicode dec":"127958","Unicode hex":"1F3D6"},{"Typeface name":"Webdings","Dingbat dec":"74","Dingbat hex":"4A","Unicode dec":"127965","Unicode hex":"1F3DD"},{"Typeface name":"Webdings","Dingbat dec":"75","Dingbat hex":"4B","Unicode dec":"128739","Unicode hex":"1F6E3"},{"Typeface name":"Webdings","Dingbat dec":"76","Dingbat hex":"4C","Unicode dec":"128269","Unicode hex":"1F50D"},{"Typeface name":"Webdings","Dingbat dec":"77","Dingbat hex":"4D","Unicode dec":"127956","Unicode hex":"1F3D4"},{"Typeface name":"Webdings","Dingbat dec":"78","Dingbat hex":"4E","Unicode dec":"128065","Unicode hex":"1F441"},{"Typeface name":"Webdings","Dingbat dec":"79","Dingbat hex":"4F","Unicode dec":"128066","Unicode hex":"1F442"},{"Typeface name":"Webdings","Dingbat dec":"80","Dingbat hex":"50","Unicode dec":"127966","Unicode hex":"1F3DE"},{"Typeface name":"Webdings","Dingbat dec":"81","Dingbat hex":"51","Unicode dec":"127957","Unicode hex":"1F3D5"},{"Typeface name":"Webdings","Dingbat dec":"82","Dingbat hex":"52","Unicode dec":"128740","Unicode hex":"1F6E4"},{"Typeface name":"Webdings","Dingbat dec":"83","Dingbat hex":"53","Unicode dec":"127967","Unicode hex":"1F3DF"},{"Typeface name":"Webdings","Dingbat dec":"84","Dingbat hex":"54","Unicode dec":"128755","Unicode hex":"1F6F3"},{"Typeface name":"Webdings","Dingbat dec":"85","Dingbat hex":"55","Unicode dec":"128364","Unicode hex":"1F56C"},{"Typeface name":"Webdings","Dingbat dec":"86","Dingbat hex":"56","Unicode dec":"128363","Unicode hex":"1F56B"},{"Typeface name":"Webdings","Dingbat dec":"87","Dingbat hex":"57","Unicode dec":"128360","Unicode hex":"1F568"},{"Typeface name":"Webdings","Dingbat dec":"88","Dingbat hex":"58","Unicode dec":"128264","Unicode hex":"1F508"},{"Typeface name":"Webdings","Dingbat dec":"89","Dingbat hex":"59","Unicode dec":"127892","Unicode hex":"1F394"},{"Typeface name":"Webdings","Dingbat dec":"90","Dingbat hex":"5A","Unicode dec":"127893","Unicode hex":"1F395"},{"Typeface name":"Webdings","Dingbat dec":"91","Dingbat hex":"5B","Unicode dec":"128492","Unicode hex":"1F5EC"},{"Typeface name":"Webdings","Dingbat dec":"92","Dingbat hex":"5C","Unicode dec":"128637","Unicode hex":"1F67D"},{"Typeface name":"Webdings","Dingbat dec":"93","Dingbat hex":"5D","Unicode dec":"128493","Unicode hex":"1F5ED"},{"Typeface name":"Webdings","Dingbat dec":"94","Dingbat hex":"5E","Unicode dec":"128490","Unicode hex":"1F5EA"},{"Typeface name":"Webdings","Dingbat dec":"95","Dingbat hex":"5F","Unicode dec":"128491","Unicode hex":"1F5EB"},{"Typeface name":"Webdings","Dingbat dec":"96","Dingbat hex":"60","Unicode dec":"11156","Unicode hex":"2B94"},{"Typeface name":"Webdings","Dingbat dec":"97","Dingbat hex":"61","Unicode dec":"10004","Unicode hex":"2714"},{"Typeface name":"Webdings","Dingbat dec":"98","Dingbat hex":"62","Unicode dec":"128690","Unicode hex":"1F6B2"},{"Typeface name":"Webdings","Dingbat dec":"99","Dingbat hex":"63","Unicode dec":"11036","Unicode hex":"2B1C"},{"Typeface name":"Webdings","Dingbat dec":"100","Dingbat hex":"64","Unicode dec":"128737","Unicode hex":"1F6E1"},{"Typeface name":"Webdings","Dingbat dec":"101","Dingbat hex":"65","Unicode dec":"128230","Unicode hex":"1F4E6"},{"Typeface name":"Webdings","Dingbat dec":"102","Dingbat hex":"66","Unicode dec":"128753","Unicode hex":"1F6F1"},{"Typeface name":"Webdings","Dingbat dec":"103","Dingbat hex":"67","Unicode dec":"11035","Unicode hex":"2B1B"},{"Typeface name":"Webdings","Dingbat dec":"104","Dingbat hex":"68","Unicode dec":"128657","Unicode hex":"1F691"},{"Typeface name":"Webdings","Dingbat dec":"105","Dingbat hex":"69","Unicode dec":"128712","Unicode hex":"1F6C8"},{"Typeface name":"Webdings","Dingbat dec":"106","Dingbat hex":"6A","Unicode dec":"128745","Unicode hex":"1F6E9"},{"Typeface name":"Webdings","Dingbat dec":"107","Dingbat hex":"6B","Unicode dec":"128752","Unicode hex":"1F6F0"},{"Typeface name":"Webdings","Dingbat dec":"108","Dingbat hex":"6C","Unicode dec":"128968","Unicode hex":"1F7C8"},{"Typeface name":"Webdings","Dingbat dec":"109","Dingbat hex":"6D","Unicode dec":"128372","Unicode hex":"1F574"},{"Typeface name":"Webdings","Dingbat dec":"110","Dingbat hex":"6E","Unicode dec":"11044","Unicode hex":"2B24"},{"Typeface name":"Webdings","Dingbat dec":"111","Dingbat hex":"6F","Unicode dec":"128741","Unicode hex":"1F6E5"},{"Typeface name":"Webdings","Dingbat dec":"112","Dingbat hex":"70","Unicode dec":"128660","Unicode hex":"1F694"},{"Typeface name":"Webdings","Dingbat dec":"113","Dingbat hex":"71","Unicode dec":"128472","Unicode hex":"1F5D8"},{"Typeface name":"Webdings","Dingbat dec":"114","Dingbat hex":"72","Unicode dec":"128473","Unicode hex":"1F5D9"},{"Typeface name":"Webdings","Dingbat dec":"115","Dingbat hex":"73","Unicode dec":"10067","Unicode hex":"2753"},{"Typeface name":"Webdings","Dingbat dec":"116","Dingbat hex":"74","Unicode dec":"128754","Unicode hex":"1F6F2"},{"Typeface name":"Webdings","Dingbat dec":"117","Dingbat hex":"75","Unicode dec":"128647","Unicode hex":"1F687"},{"Typeface name":"Webdings","Dingbat dec":"118","Dingbat hex":"76","Unicode dec":"128653","Unicode hex":"1F68D"},{"Typeface name":"Webdings","Dingbat dec":"119","Dingbat hex":"77","Unicode dec":"9971","Unicode hex":"26F3"},{"Typeface name":"Webdings","Dingbat dec":"120","Dingbat hex":"78","Unicode dec":"10680","Unicode hex":"29B8"},{"Typeface name":"Webdings","Dingbat dec":"121","Dingbat hex":"79","Unicode dec":"8854","Unicode hex":"2296"},{"Typeface name":"Webdings","Dingbat dec":"122","Dingbat hex":"7A","Unicode dec":"128685","Unicode hex":"1F6AD"},{"Typeface name":"Webdings","Dingbat dec":"123","Dingbat hex":"7B","Unicode dec":"128494","Unicode hex":"1F5EE"},{"Typeface name":"Webdings","Dingbat dec":"124","Dingbat hex":"7C","Unicode dec":"9168","Unicode hex":"23D0"},{"Typeface name":"Webdings","Dingbat dec":"125","Dingbat hex":"7D","Unicode dec":"128495","Unicode hex":"1F5EF"},{"Typeface name":"Webdings","Dingbat dec":"126","Dingbat hex":"7E","Unicode dec":"128498","Unicode hex":"1F5F2"},{"Typeface name":"Webdings","Dingbat dec":"128","Dingbat hex":"80","Unicode dec":"128697","Unicode hex":"1F6B9"},{"Typeface name":"Webdings","Dingbat dec":"129","Dingbat hex":"81","Unicode dec":"128698","Unicode hex":"1F6BA"},{"Typeface name":"Webdings","Dingbat dec":"130","Dingbat hex":"82","Unicode dec":"128713","Unicode hex":"1F6C9"},{"Typeface name":"Webdings","Dingbat dec":"131","Dingbat hex":"83","Unicode dec":"128714","Unicode hex":"1F6CA"},{"Typeface name":"Webdings","Dingbat dec":"132","Dingbat hex":"84","Unicode dec":"128700","Unicode hex":"1F6BC"},{"Typeface name":"Webdings","Dingbat dec":"133","Dingbat hex":"85","Unicode dec":"128125","Unicode hex":"1F47D"},{"Typeface name":"Webdings","Dingbat dec":"134","Dingbat hex":"86","Unicode dec":"127947","Unicode hex":"1F3CB"},{"Typeface name":"Webdings","Dingbat dec":"135","Dingbat hex":"87","Unicode dec":"9975","Unicode hex":"26F7"},{"Typeface name":"Webdings","Dingbat dec":"136","Dingbat hex":"88","Unicode dec":"127938","Unicode hex":"1F3C2"},{"Typeface name":"Webdings","Dingbat dec":"137","Dingbat hex":"89","Unicode dec":"127948","Unicode hex":"1F3CC"},{"Typeface name":"Webdings","Dingbat dec":"138","Dingbat hex":"8A","Unicode dec":"127946","Unicode hex":"1F3CA"},{"Typeface name":"Webdings","Dingbat dec":"139","Dingbat hex":"8B","Unicode dec":"127940","Unicode hex":"1F3C4"},{"Typeface name":"Webdings","Dingbat dec":"140","Dingbat hex":"8C","Unicode dec":"127949","Unicode hex":"1F3CD"},{"Typeface name":"Webdings","Dingbat dec":"141","Dingbat hex":"8D","Unicode dec":"127950","Unicode hex":"1F3CE"},{"Typeface name":"Webdings","Dingbat dec":"142","Dingbat hex":"8E","Unicode dec":"128664","Unicode hex":"1F698"},{"Typeface name":"Webdings","Dingbat dec":"143","Dingbat hex":"8F","Unicode dec":"128480","Unicode hex":"1F5E0"},{"Typeface name":"Webdings","Dingbat dec":"144","Dingbat hex":"90","Unicode dec":"128738","Unicode hex":"1F6E2"},{"Typeface name":"Webdings","Dingbat dec":"145","Dingbat hex":"91","Unicode dec":"128176","Unicode hex":"1F4B0"},{"Typeface name":"Webdings","Dingbat dec":"146","Dingbat hex":"92","Unicode dec":"127991","Unicode hex":"1F3F7"},{"Typeface name":"Webdings","Dingbat dec":"147","Dingbat hex":"93","Unicode dec":"128179","Unicode hex":"1F4B3"},{"Typeface name":"Webdings","Dingbat dec":"148","Dingbat hex":"94","Unicode dec":"128106","Unicode hex":"1F46A"},{"Typeface name":"Webdings","Dingbat dec":"149","Dingbat hex":"95","Unicode dec":"128481","Unicode hex":"1F5E1"},{"Typeface name":"Webdings","Dingbat dec":"150","Dingbat hex":"96","Unicode dec":"128482","Unicode hex":"1F5E2"},{"Typeface name":"Webdings","Dingbat dec":"151","Dingbat hex":"97","Unicode dec":"128483","Unicode hex":"1F5E3"},{"Typeface name":"Webdings","Dingbat dec":"152","Dingbat hex":"98","Unicode dec":"10031","Unicode hex":"272F"},{"Typeface name":"Webdings","Dingbat dec":"153","Dingbat hex":"99","Unicode dec":"128388","Unicode hex":"1F584"},{"Typeface name":"Webdings","Dingbat dec":"154","Dingbat hex":"9A","Unicode dec":"128389","Unicode hex":"1F585"},{"Typeface name":"Webdings","Dingbat dec":"155","Dingbat hex":"9B","Unicode dec":"128387","Unicode hex":"1F583"},{"Typeface name":"Webdings","Dingbat dec":"156","Dingbat hex":"9C","Unicode dec":"128390","Unicode hex":"1F586"},{"Typeface name":"Webdings","Dingbat dec":"157","Dingbat hex":"9D","Unicode dec":"128441","Unicode hex":"1F5B9"},{"Typeface name":"Webdings","Dingbat dec":"158","Dingbat hex":"9E","Unicode dec":"128442","Unicode hex":"1F5BA"},{"Typeface name":"Webdings","Dingbat dec":"159","Dingbat hex":"9F","Unicode dec":"128443","Unicode hex":"1F5BB"},{"Typeface name":"Webdings","Dingbat dec":"160","Dingbat hex":"A0","Unicode dec":"128373","Unicode hex":"1F575"},{"Typeface name":"Webdings","Dingbat dec":"161","Dingbat hex":"A1","Unicode dec":"128368","Unicode hex":"1F570"},{"Typeface name":"Webdings","Dingbat dec":"162","Dingbat hex":"A2","Unicode dec":"128445","Unicode hex":"1F5BD"},{"Typeface name":"Webdings","Dingbat dec":"163","Dingbat hex":"A3","Unicode dec":"128446","Unicode hex":"1F5BE"},{"Typeface name":"Webdings","Dingbat dec":"164","Dingbat hex":"A4","Unicode dec":"128203","Unicode hex":"1F4CB"},{"Typeface name":"Webdings","Dingbat dec":"165","Dingbat hex":"A5","Unicode dec":"128466","Unicode hex":"1F5D2"},{"Typeface name":"Webdings","Dingbat dec":"166","Dingbat hex":"A6","Unicode dec":"128467","Unicode hex":"1F5D3"},{"Typeface name":"Webdings","Dingbat dec":"167","Dingbat hex":"A7","Unicode dec":"128366","Unicode hex":"1F56E"},{"Typeface name":"Webdings","Dingbat dec":"168","Dingbat hex":"A8","Unicode dec":"128218","Unicode hex":"1F4DA"},{"Typeface name":"Webdings","Dingbat dec":"169","Dingbat hex":"A9","Unicode dec":"128478","Unicode hex":"1F5DE"},{"Typeface name":"Webdings","Dingbat dec":"170","Dingbat hex":"AA","Unicode dec":"128479","Unicode hex":"1F5DF"},{"Typeface name":"Webdings","Dingbat dec":"171","Dingbat hex":"AB","Unicode dec":"128451","Unicode hex":"1F5C3"},{"Typeface name":"Webdings","Dingbat dec":"172","Dingbat hex":"AC","Unicode dec":"128450","Unicode hex":"1F5C2"},{"Typeface name":"Webdings","Dingbat dec":"173","Dingbat hex":"AD","Unicode dec":"128444","Unicode hex":"1F5BC"},{"Typeface name":"Webdings","Dingbat dec":"174","Dingbat hex":"AE","Unicode dec":"127917","Unicode hex":"1F3AD"},{"Typeface name":"Webdings","Dingbat dec":"175","Dingbat hex":"AF","Unicode dec":"127900","Unicode hex":"1F39C"},{"Typeface name":"Webdings","Dingbat dec":"176","Dingbat hex":"B0","Unicode dec":"127896","Unicode hex":"1F398"},{"Typeface name":"Webdings","Dingbat dec":"177","Dingbat hex":"B1","Unicode dec":"127897","Unicode hex":"1F399"},{"Typeface name":"Webdings","Dingbat dec":"178","Dingbat hex":"B2","Unicode dec":"127911","Unicode hex":"1F3A7"},{"Typeface name":"Webdings","Dingbat dec":"179","Dingbat hex":"B3","Unicode dec":"128191","Unicode hex":"1F4BF"},{"Typeface name":"Webdings","Dingbat dec":"180","Dingbat hex":"B4","Unicode dec":"127902","Unicode hex":"1F39E"},{"Typeface name":"Webdings","Dingbat dec":"181","Dingbat hex":"B5","Unicode dec":"128247","Unicode hex":"1F4F7"},{"Typeface name":"Webdings","Dingbat dec":"182","Dingbat hex":"B6","Unicode dec":"127903","Unicode hex":"1F39F"},{"Typeface name":"Webdings","Dingbat dec":"183","Dingbat hex":"B7","Unicode dec":"127916","Unicode hex":"1F3AC"},{"Typeface name":"Webdings","Dingbat dec":"184","Dingbat hex":"B8","Unicode dec":"128253","Unicode hex":"1F4FD"},{"Typeface name":"Webdings","Dingbat dec":"185","Dingbat hex":"B9","Unicode dec":"128249","Unicode hex":"1F4F9"},{"Typeface name":"Webdings","Dingbat dec":"186","Dingbat hex":"BA","Unicode dec":"128254","Unicode hex":"1F4FE"},{"Typeface name":"Webdings","Dingbat dec":"187","Dingbat hex":"BB","Unicode dec":"128251","Unicode hex":"1F4FB"},{"Typeface name":"Webdings","Dingbat dec":"188","Dingbat hex":"BC","Unicode dec":"127898","Unicode hex":"1F39A"},{"Typeface name":"Webdings","Dingbat dec":"189","Dingbat hex":"BD","Unicode dec":"127899","Unicode hex":"1F39B"},{"Typeface name":"Webdings","Dingbat dec":"190","Dingbat hex":"BE","Unicode dec":"128250","Unicode hex":"1F4FA"},{"Typeface name":"Webdings","Dingbat dec":"191","Dingbat hex":"BF","Unicode dec":"128187","Unicode hex":"1F4BB"},{"Typeface name":"Webdings","Dingbat dec":"192","Dingbat hex":"C0","Unicode dec":"128421","Unicode hex":"1F5A5"},{"Typeface name":"Webdings","Dingbat dec":"193","Dingbat hex":"C1","Unicode dec":"128422","Unicode hex":"1F5A6"},{"Typeface name":"Webdings","Dingbat dec":"194","Dingbat hex":"C2","Unicode dec":"128423","Unicode hex":"1F5A7"},{"Typeface name":"Webdings","Dingbat dec":"195","Dingbat hex":"C3","Unicode dec":"128377","Unicode hex":"1F579"},{"Typeface name":"Webdings","Dingbat dec":"196","Dingbat hex":"C4","Unicode dec":"127918","Unicode hex":"1F3AE"},{"Typeface name":"Webdings","Dingbat dec":"197","Dingbat hex":"C5","Unicode dec":"128379","Unicode hex":"1F57B"},{"Typeface name":"Webdings","Dingbat dec":"198","Dingbat hex":"C6","Unicode dec":"128380","Unicode hex":"1F57C"},{"Typeface name":"Webdings","Dingbat dec":"199","Dingbat hex":"C7","Unicode dec":"128223","Unicode hex":"1F4DF"},{"Typeface name":"Webdings","Dingbat dec":"200","Dingbat hex":"C8","Unicode dec":"128385","Unicode hex":"1F581"},{"Typeface name":"Webdings","Dingbat dec":"201","Dingbat hex":"C9","Unicode dec":"128384","Unicode hex":"1F580"},{"Typeface name":"Webdings","Dingbat dec":"202","Dingbat hex":"CA","Unicode dec":"128424","Unicode hex":"1F5A8"},{"Typeface name":"Webdings","Dingbat dec":"203","Dingbat hex":"CB","Unicode dec":"128425","Unicode hex":"1F5A9"},{"Typeface name":"Webdings","Dingbat dec":"204","Dingbat hex":"CC","Unicode dec":"128447","Unicode hex":"1F5BF"},{"Typeface name":"Webdings","Dingbat dec":"205","Dingbat hex":"CD","Unicode dec":"128426","Unicode hex":"1F5AA"},{"Typeface name":"Webdings","Dingbat dec":"206","Dingbat hex":"CE","Unicode dec":"128476","Unicode hex":"1F5DC"},{"Typeface name":"Webdings","Dingbat dec":"207","Dingbat hex":"CF","Unicode dec":"128274","Unicode hex":"1F512"},{"Typeface name":"Webdings","Dingbat dec":"208","Dingbat hex":"D0","Unicode dec":"128275","Unicode hex":"1F513"},{"Typeface name":"Webdings","Dingbat dec":"209","Dingbat hex":"D1","Unicode dec":"128477","Unicode hex":"1F5DD"},{"Typeface name":"Webdings","Dingbat dec":"210","Dingbat hex":"D2","Unicode dec":"128229","Unicode hex":"1F4E5"},{"Typeface name":"Webdings","Dingbat dec":"211","Dingbat hex":"D3","Unicode dec":"128228","Unicode hex":"1F4E4"},{"Typeface name":"Webdings","Dingbat dec":"212","Dingbat hex":"D4","Unicode dec":"128371","Unicode hex":"1F573"},{"Typeface name":"Webdings","Dingbat dec":"213","Dingbat hex":"D5","Unicode dec":"127779","Unicode hex":"1F323"},{"Typeface name":"Webdings","Dingbat dec":"214","Dingbat hex":"D6","Unicode dec":"127780","Unicode hex":"1F324"},{"Typeface name":"Webdings","Dingbat dec":"215","Dingbat hex":"D7","Unicode dec":"127781","Unicode hex":"1F325"},{"Typeface name":"Webdings","Dingbat dec":"216","Dingbat hex":"D8","Unicode dec":"127782","Unicode hex":"1F326"},{"Typeface name":"Webdings","Dingbat dec":"217","Dingbat hex":"D9","Unicode dec":"9729","Unicode hex":"2601"},{"Typeface name":"Webdings","Dingbat dec":"218","Dingbat hex":"DA","Unicode dec":"127784","Unicode hex":"1F328"},{"Typeface name":"Webdings","Dingbat dec":"219","Dingbat hex":"DB","Unicode dec":"127783","Unicode hex":"1F327"},{"Typeface name":"Webdings","Dingbat dec":"220","Dingbat hex":"DC","Unicode dec":"127785","Unicode hex":"1F329"},{"Typeface name":"Webdings","Dingbat dec":"221","Dingbat hex":"DD","Unicode dec":"127786","Unicode hex":"1F32A"},{"Typeface name":"Webdings","Dingbat dec":"222","Dingbat hex":"DE","Unicode dec":"127788","Unicode hex":"1F32C"},{"Typeface name":"Webdings","Dingbat dec":"223","Dingbat hex":"DF","Unicode dec":"127787","Unicode hex":"1F32B"},{"Typeface name":"Webdings","Dingbat dec":"224","Dingbat hex":"E0","Unicode dec":"127772","Unicode hex":"1F31C"},{"Typeface name":"Webdings","Dingbat dec":"225","Dingbat hex":"E1","Unicode dec":"127777","Unicode hex":"1F321"},{"Typeface name":"Webdings","Dingbat dec":"226","Dingbat hex":"E2","Unicode dec":"128715","Unicode hex":"1F6CB"},{"Typeface name":"Webdings","Dingbat dec":"227","Dingbat hex":"E3","Unicode dec":"128719","Unicode hex":"1F6CF"},{"Typeface name":"Webdings","Dingbat dec":"228","Dingbat hex":"E4","Unicode dec":"127869","Unicode hex":"1F37D"},{"Typeface name":"Webdings","Dingbat dec":"229","Dingbat hex":"E5","Unicode dec":"127864","Unicode hex":"1F378"},{"Typeface name":"Webdings","Dingbat dec":"230","Dingbat hex":"E6","Unicode dec":"128718","Unicode hex":"1F6CE"},{"Typeface name":"Webdings","Dingbat dec":"231","Dingbat hex":"E7","Unicode dec":"128717","Unicode hex":"1F6CD"},{"Typeface name":"Webdings","Dingbat dec":"232","Dingbat hex":"E8","Unicode dec":"9413","Unicode hex":"24C5"},{"Typeface name":"Webdings","Dingbat dec":"233","Dingbat hex":"E9","Unicode dec":"9855","Unicode hex":"267F"},{"Typeface name":"Webdings","Dingbat dec":"234","Dingbat hex":"EA","Unicode dec":"128710","Unicode hex":"1F6C6"},{"Typeface name":"Webdings","Dingbat dec":"235","Dingbat hex":"EB","Unicode dec":"128392","Unicode hex":"1F588"},{"Typeface name":"Webdings","Dingbat dec":"236","Dingbat hex":"EC","Unicode dec":"127891","Unicode hex":"1F393"},{"Typeface name":"Webdings","Dingbat dec":"237","Dingbat hex":"ED","Unicode dec":"128484","Unicode hex":"1F5E4"},{"Typeface name":"Webdings","Dingbat dec":"238","Dingbat hex":"EE","Unicode dec":"128485","Unicode hex":"1F5E5"},{"Typeface name":"Webdings","Dingbat dec":"239","Dingbat hex":"EF","Unicode dec":"128486","Unicode hex":"1F5E6"},{"Typeface name":"Webdings","Dingbat dec":"240","Dingbat hex":"F0","Unicode dec":"128487","Unicode hex":"1F5E7"},{"Typeface name":"Webdings","Dingbat dec":"241","Dingbat hex":"F1","Unicode dec":"128746","Unicode hex":"1F6EA"},{"Typeface name":"Webdings","Dingbat dec":"242","Dingbat hex":"F2","Unicode dec":"128063","Unicode hex":"1F43F"},{"Typeface name":"Webdings","Dingbat dec":"243","Dingbat hex":"F3","Unicode dec":"128038","Unicode hex":"1F426"},{"Typeface name":"Webdings","Dingbat dec":"244","Dingbat hex":"F4","Unicode dec":"128031","Unicode hex":"1F41F"},{"Typeface name":"Webdings","Dingbat dec":"245","Dingbat hex":"F5","Unicode dec":"128021","Unicode hex":"1F415"},{"Typeface name":"Webdings","Dingbat dec":"246","Dingbat hex":"F6","Unicode dec":"128008","Unicode hex":"1F408"},{"Typeface name":"Webdings","Dingbat dec":"247","Dingbat hex":"F7","Unicode dec":"128620","Unicode hex":"1F66C"},{"Typeface name":"Webdings","Dingbat dec":"248","Dingbat hex":"F8","Unicode dec":"128622","Unicode hex":"1F66E"},{"Typeface name":"Webdings","Dingbat dec":"249","Dingbat hex":"F9","Unicode dec":"128621","Unicode hex":"1F66D"},{"Typeface name":"Webdings","Dingbat dec":"250","Dingbat hex":"FA","Unicode dec":"128623","Unicode hex":"1F66F"},{"Typeface name":"Webdings","Dingbat dec":"251","Dingbat hex":"FB","Unicode dec":"128506","Unicode hex":"1F5FA"},{"Typeface name":"Webdings","Dingbat dec":"252","Dingbat hex":"FC","Unicode dec":"127757","Unicode hex":"1F30D"},{"Typeface name":"Webdings","Dingbat dec":"253","Dingbat hex":"FD","Unicode dec":"127759","Unicode hex":"1F30F"},{"Typeface name":"Webdings","Dingbat dec":"254","Dingbat hex":"FE","Unicode dec":"127758","Unicode hex":"1F30E"},{"Typeface name":"Webdings","Dingbat dec":"255","Dingbat hex":"FF","Unicode dec":"128330","Unicode hex":"1F54A"},{"Typeface name":"Wingdings","Dingbat dec":"32","Dingbat hex":"20","Unicode dec":"32","Unicode hex":"20"},{"Typeface name":"Wingdings","Dingbat dec":"33","Dingbat hex":"21","Unicode dec":"128393","Unicode hex":"1F589"},{"Typeface name":"Wingdings","Dingbat dec":"34","Dingbat hex":"22","Unicode dec":"9986","Unicode hex":"2702"},{"Typeface name":"Wingdings","Dingbat dec":"35","Dingbat hex":"23","Unicode dec":"9985","Unicode hex":"2701"},{"Typeface name":"Wingdings","Dingbat dec":"36","Dingbat hex":"24","Unicode dec":"128083","Unicode hex":"1F453"},{"Typeface name":"Wingdings","Dingbat dec":"37","Dingbat hex":"25","Unicode dec":"128365","Unicode hex":"1F56D"},{"Typeface name":"Wingdings","Dingbat dec":"38","Dingbat hex":"26","Unicode dec":"128366","Unicode hex":"1F56E"},{"Typeface name":"Wingdings","Dingbat dec":"39","Dingbat hex":"27","Unicode dec":"128367","Unicode hex":"1F56F"},{"Typeface name":"Wingdings","Dingbat dec":"40","Dingbat hex":"28","Unicode dec":"128383","Unicode hex":"1F57F"},{"Typeface name":"Wingdings","Dingbat dec":"41","Dingbat hex":"29","Unicode dec":"9990","Unicode hex":"2706"},{"Typeface name":"Wingdings","Dingbat dec":"42","Dingbat hex":"2A","Unicode dec":"128386","Unicode hex":"1F582"},{"Typeface name":"Wingdings","Dingbat dec":"43","Dingbat hex":"2B","Unicode dec":"128387","Unicode hex":"1F583"},{"Typeface name":"Wingdings","Dingbat dec":"44","Dingbat hex":"2C","Unicode dec":"128234","Unicode hex":"1F4EA"},{"Typeface name":"Wingdings","Dingbat dec":"45","Dingbat hex":"2D","Unicode dec":"128235","Unicode hex":"1F4EB"},{"Typeface name":"Wingdings","Dingbat dec":"46","Dingbat hex":"2E","Unicode dec":"128236","Unicode hex":"1F4EC"},{"Typeface name":"Wingdings","Dingbat dec":"47","Dingbat hex":"2F","Unicode dec":"128237","Unicode hex":"1F4ED"},{"Typeface name":"Wingdings","Dingbat dec":"48","Dingbat hex":"30","Unicode dec":"128448","Unicode hex":"1F5C0"},{"Typeface name":"Wingdings","Dingbat dec":"49","Dingbat hex":"31","Unicode dec":"128449","Unicode hex":"1F5C1"},{"Typeface name":"Wingdings","Dingbat dec":"50","Dingbat hex":"32","Unicode dec":"128462","Unicode hex":"1F5CE"},{"Typeface name":"Wingdings","Dingbat dec":"51","Dingbat hex":"33","Unicode dec":"128463","Unicode hex":"1F5CF"},{"Typeface name":"Wingdings","Dingbat dec":"52","Dingbat hex":"34","Unicode dec":"128464","Unicode hex":"1F5D0"},{"Typeface name":"Wingdings","Dingbat dec":"53","Dingbat hex":"35","Unicode dec":"128452","Unicode hex":"1F5C4"},{"Typeface name":"Wingdings","Dingbat dec":"54","Dingbat hex":"36","Unicode dec":"8987","Unicode hex":"231B"},{"Typeface name":"Wingdings","Dingbat dec":"55","Dingbat hex":"37","Unicode dec":"128430","Unicode hex":"1F5AE"},{"Typeface name":"Wingdings","Dingbat dec":"56","Dingbat hex":"38","Unicode dec":"128432","Unicode hex":"1F5B0"},{"Typeface name":"Wingdings","Dingbat dec":"57","Dingbat hex":"39","Unicode dec":"128434","Unicode hex":"1F5B2"},{"Typeface name":"Wingdings","Dingbat dec":"58","Dingbat hex":"3A","Unicode dec":"128435","Unicode hex":"1F5B3"},{"Typeface name":"Wingdings","Dingbat dec":"59","Dingbat hex":"3B","Unicode dec":"128436","Unicode hex":"1F5B4"},{"Typeface name":"Wingdings","Dingbat dec":"60","Dingbat hex":"3C","Unicode dec":"128427","Unicode hex":"1F5AB"},{"Typeface name":"Wingdings","Dingbat dec":"61","Dingbat hex":"3D","Unicode dec":"128428","Unicode hex":"1F5AC"},{"Typeface name":"Wingdings","Dingbat dec":"62","Dingbat hex":"3E","Unicode dec":"9991","Unicode hex":"2707"},{"Typeface name":"Wingdings","Dingbat dec":"63","Dingbat hex":"3F","Unicode dec":"9997","Unicode hex":"270D"},{"Typeface name":"Wingdings","Dingbat dec":"64","Dingbat hex":"40","Unicode dec":"128398","Unicode hex":"1F58E"},{"Typeface name":"Wingdings","Dingbat dec":"65","Dingbat hex":"41","Unicode dec":"9996","Unicode hex":"270C"},{"Typeface name":"Wingdings","Dingbat dec":"66","Dingbat hex":"42","Unicode dec":"128399","Unicode hex":"1F58F"},{"Typeface name":"Wingdings","Dingbat dec":"67","Dingbat hex":"43","Unicode dec":"128077","Unicode hex":"1F44D"},{"Typeface name":"Wingdings","Dingbat dec":"68","Dingbat hex":"44","Unicode dec":"128078","Unicode hex":"1F44E"},{"Typeface name":"Wingdings","Dingbat dec":"69","Dingbat hex":"45","Unicode dec":"9756","Unicode hex":"261C"},{"Typeface name":"Wingdings","Dingbat dec":"70","Dingbat hex":"46","Unicode dec":"9758","Unicode hex":"261E"},{"Typeface name":"Wingdings","Dingbat dec":"71","Dingbat hex":"47","Unicode dec":"9757","Unicode hex":"261D"},{"Typeface name":"Wingdings","Dingbat dec":"72","Dingbat hex":"48","Unicode dec":"9759","Unicode hex":"261F"},{"Typeface name":"Wingdings","Dingbat dec":"73","Dingbat hex":"49","Unicode dec":"128400","Unicode hex":"1F590"},{"Typeface name":"Wingdings","Dingbat dec":"74","Dingbat hex":"4A","Unicode dec":"9786","Unicode hex":"263A"},{"Typeface name":"Wingdings","Dingbat dec":"75","Dingbat hex":"4B","Unicode dec":"128528","Unicode hex":"1F610"},{"Typeface name":"Wingdings","Dingbat dec":"76","Dingbat hex":"4C","Unicode dec":"9785","Unicode hex":"2639"},{"Typeface name":"Wingdings","Dingbat dec":"77","Dingbat hex":"4D","Unicode dec":"128163","Unicode hex":"1F4A3"},{"Typeface name":"Wingdings","Dingbat dec":"78","Dingbat hex":"4E","Unicode dec":"128369","Unicode hex":"1F571"},{"Typeface name":"Wingdings","Dingbat dec":"79","Dingbat hex":"4F","Unicode dec":"127987","Unicode hex":"1F3F3"},{"Typeface name":"Wingdings","Dingbat dec":"80","Dingbat hex":"50","Unicode dec":"127985","Unicode hex":"1F3F1"},{"Typeface name":"Wingdings","Dingbat dec":"81","Dingbat hex":"51","Unicode dec":"9992","Unicode hex":"2708"},{"Typeface name":"Wingdings","Dingbat dec":"82","Dingbat hex":"52","Unicode dec":"9788","Unicode hex":"263C"},{"Typeface name":"Wingdings","Dingbat dec":"83","Dingbat hex":"53","Unicode dec":"127778","Unicode hex":"1F322"},{"Typeface name":"Wingdings","Dingbat dec":"84","Dingbat hex":"54","Unicode dec":"10052","Unicode hex":"2744"},{"Typeface name":"Wingdings","Dingbat dec":"85","Dingbat hex":"55","Unicode dec":"128326","Unicode hex":"1F546"},{"Typeface name":"Wingdings","Dingbat dec":"86","Dingbat hex":"56","Unicode dec":"10014","Unicode hex":"271E"},{"Typeface name":"Wingdings","Dingbat dec":"87","Dingbat hex":"57","Unicode dec":"128328","Unicode hex":"1F548"},{"Typeface name":"Wingdings","Dingbat dec":"88","Dingbat hex":"58","Unicode dec":"10016","Unicode hex":"2720"},{"Typeface name":"Wingdings","Dingbat dec":"89","Dingbat hex":"59","Unicode dec":"10017","Unicode hex":"2721"},{"Typeface name":"Wingdings","Dingbat dec":"90","Dingbat hex":"5A","Unicode dec":"9770","Unicode hex":"262A"},{"Typeface name":"Wingdings","Dingbat dec":"91","Dingbat hex":"5B","Unicode dec":"9775","Unicode hex":"262F"},{"Typeface name":"Wingdings","Dingbat dec":"92","Dingbat hex":"5C","Unicode dec":"128329","Unicode hex":"1F549"},{"Typeface name":"Wingdings","Dingbat dec":"93","Dingbat hex":"5D","Unicode dec":"9784","Unicode hex":"2638"},{"Typeface name":"Wingdings","Dingbat dec":"94","Dingbat hex":"5E","Unicode dec":"9800","Unicode hex":"2648"},{"Typeface name":"Wingdings","Dingbat dec":"95","Dingbat hex":"5F","Unicode dec":"9801","Unicode hex":"2649"},{"Typeface name":"Wingdings","Dingbat dec":"96","Dingbat hex":"60","Unicode dec":"9802","Unicode hex":"264A"},{"Typeface name":"Wingdings","Dingbat dec":"97","Dingbat hex":"61","Unicode dec":"9803","Unicode hex":"264B"},{"Typeface name":"Wingdings","Dingbat dec":"98","Dingbat hex":"62","Unicode dec":"9804","Unicode hex":"264C"},{"Typeface name":"Wingdings","Dingbat dec":"99","Dingbat hex":"63","Unicode dec":"9805","Unicode hex":"264D"},{"Typeface name":"Wingdings","Dingbat dec":"100","Dingbat hex":"64","Unicode dec":"9806","Unicode hex":"264E"},{"Typeface name":"Wingdings","Dingbat dec":"101","Dingbat hex":"65","Unicode dec":"9807","Unicode hex":"264F"},{"Typeface name":"Wingdings","Dingbat dec":"102","Dingbat hex":"66","Unicode dec":"9808","Unicode hex":"2650"},{"Typeface name":"Wingdings","Dingbat dec":"103","Dingbat hex":"67","Unicode dec":"9809","Unicode hex":"2651"},{"Typeface name":"Wingdings","Dingbat dec":"104","Dingbat hex":"68","Unicode dec":"9810","Unicode hex":"2652"},{"Typeface name":"Wingdings","Dingbat dec":"105","Dingbat hex":"69","Unicode dec":"9811","Unicode hex":"2653"},{"Typeface name":"Wingdings","Dingbat dec":"106","Dingbat hex":"6A","Unicode dec":"128624","Unicode hex":"1F670"},{"Typeface name":"Wingdings","Dingbat dec":"107","Dingbat hex":"6B","Unicode dec":"128629","Unicode hex":"1F675"},{"Typeface name":"Wingdings","Dingbat dec":"108","Dingbat hex":"6C","Unicode dec":"9899","Unicode hex":"26AB"},{"Typeface name":"Wingdings","Dingbat dec":"109","Dingbat hex":"6D","Unicode dec":"128318","Unicode hex":"1F53E"},{"Typeface name":"Wingdings","Dingbat dec":"110","Dingbat hex":"6E","Unicode dec":"9724","Unicode hex":"25FC"},{"Typeface name":"Wingdings","Dingbat dec":"111","Dingbat hex":"6F","Unicode dec":"128911","Unicode hex":"1F78F"},{"Typeface name":"Wingdings","Dingbat dec":"112","Dingbat hex":"70","Unicode dec":"128912","Unicode hex":"1F790"},{"Typeface name":"Wingdings","Dingbat dec":"113","Dingbat hex":"71","Unicode dec":"10065","Unicode hex":"2751"},{"Typeface name":"Wingdings","Dingbat dec":"114","Dingbat hex":"72","Unicode dec":"10066","Unicode hex":"2752"},{"Typeface name":"Wingdings","Dingbat dec":"115","Dingbat hex":"73","Unicode dec":"128927","Unicode hex":"1F79F"},{"Typeface name":"Wingdings","Dingbat dec":"116","Dingbat hex":"74","Unicode dec":"10731","Unicode hex":"29EB"},{"Typeface name":"Wingdings","Dingbat dec":"117","Dingbat hex":"75","Unicode dec":"9670","Unicode hex":"25C6"},{"Typeface name":"Wingdings","Dingbat dec":"118","Dingbat hex":"76","Unicode dec":"10070","Unicode hex":"2756"},{"Typeface name":"Wingdings","Dingbat dec":"119","Dingbat hex":"77","Unicode dec":"11049","Unicode hex":"2B29"},{"Typeface name":"Wingdings","Dingbat dec":"120","Dingbat hex":"78","Unicode dec":"8999","Unicode hex":"2327"},{"Typeface name":"Wingdings","Dingbat dec":"121","Dingbat hex":"79","Unicode dec":"11193","Unicode hex":"2BB9"},{"Typeface name":"Wingdings","Dingbat dec":"122","Dingbat hex":"7A","Unicode dec":"8984","Unicode hex":"2318"},{"Typeface name":"Wingdings","Dingbat dec":"123","Dingbat hex":"7B","Unicode dec":"127989","Unicode hex":"1F3F5"},{"Typeface name":"Wingdings","Dingbat dec":"124","Dingbat hex":"7C","Unicode dec":"127990","Unicode hex":"1F3F6"},{"Typeface name":"Wingdings","Dingbat dec":"125","Dingbat hex":"7D","Unicode dec":"128630","Unicode hex":"1F676"},{"Typeface name":"Wingdings","Dingbat dec":"126","Dingbat hex":"7E","Unicode dec":"128631","Unicode hex":"1F677"},{"Typeface name":"Wingdings","Dingbat dec":"127","Dingbat hex":"7F","Unicode dec":"9647","Unicode hex":"25AF"},{"Typeface name":"Wingdings","Dingbat dec":"128","Dingbat hex":"80","Unicode dec":"127243","Unicode hex":"1F10B"},{"Typeface name":"Wingdings","Dingbat dec":"129","Dingbat hex":"81","Unicode dec":"10112","Unicode hex":"2780"},{"Typeface name":"Wingdings","Dingbat dec":"130","Dingbat hex":"82","Unicode dec":"10113","Unicode hex":"2781"},{"Typeface name":"Wingdings","Dingbat dec":"131","Dingbat hex":"83","Unicode dec":"10114","Unicode hex":"2782"},{"Typeface name":"Wingdings","Dingbat dec":"132","Dingbat hex":"84","Unicode dec":"10115","Unicode hex":"2783"},{"Typeface name":"Wingdings","Dingbat dec":"133","Dingbat hex":"85","Unicode dec":"10116","Unicode hex":"2784"},{"Typeface name":"Wingdings","Dingbat dec":"134","Dingbat hex":"86","Unicode dec":"10117","Unicode hex":"2785"},{"Typeface name":"Wingdings","Dingbat dec":"135","Dingbat hex":"87","Unicode dec":"10118","Unicode hex":"2786"},{"Typeface name":"Wingdings","Dingbat dec":"136","Dingbat hex":"88","Unicode dec":"10119","Unicode hex":"2787"},{"Typeface name":"Wingdings","Dingbat dec":"137","Dingbat hex":"89","Unicode dec":"10120","Unicode hex":"2788"},{"Typeface name":"Wingdings","Dingbat dec":"138","Dingbat hex":"8A","Unicode dec":"10121","Unicode hex":"2789"},{"Typeface name":"Wingdings","Dingbat dec":"139","Dingbat hex":"8B","Unicode dec":"127244","Unicode hex":"1F10C"},{"Typeface name":"Wingdings","Dingbat dec":"140","Dingbat hex":"8C","Unicode dec":"10122","Unicode hex":"278A"},{"Typeface name":"Wingdings","Dingbat dec":"141","Dingbat hex":"8D","Unicode dec":"10123","Unicode hex":"278B"},{"Typeface name":"Wingdings","Dingbat dec":"142","Dingbat hex":"8E","Unicode dec":"10124","Unicode hex":"278C"},{"Typeface name":"Wingdings","Dingbat dec":"143","Dingbat hex":"8F","Unicode dec":"10125","Unicode hex":"278D"},{"Typeface name":"Wingdings","Dingbat dec":"144","Dingbat hex":"90","Unicode dec":"10126","Unicode hex":"278E"},{"Typeface name":"Wingdings","Dingbat dec":"145","Dingbat hex":"91","Unicode dec":"10127","Unicode hex":"278F"},{"Typeface name":"Wingdings","Dingbat dec":"146","Dingbat hex":"92","Unicode dec":"10128","Unicode hex":"2790"},{"Typeface name":"Wingdings","Dingbat dec":"147","Dingbat hex":"93","Unicode dec":"10129","Unicode hex":"2791"},{"Typeface name":"Wingdings","Dingbat dec":"148","Dingbat hex":"94","Unicode dec":"10130","Unicode hex":"2792"},{"Typeface name":"Wingdings","Dingbat dec":"149","Dingbat hex":"95","Unicode dec":"10131","Unicode hex":"2793"},{"Typeface name":"Wingdings","Dingbat dec":"150","Dingbat hex":"96","Unicode dec":"128610","Unicode hex":"1F662"},{"Typeface name":"Wingdings","Dingbat dec":"151","Dingbat hex":"97","Unicode dec":"128608","Unicode hex":"1F660"},{"Typeface name":"Wingdings","Dingbat dec":"152","Dingbat hex":"98","Unicode dec":"128609","Unicode hex":"1F661"},{"Typeface name":"Wingdings","Dingbat dec":"153","Dingbat hex":"99","Unicode dec":"128611","Unicode hex":"1F663"},{"Typeface name":"Wingdings","Dingbat dec":"154","Dingbat hex":"9A","Unicode dec":"128606","Unicode hex":"1F65E"},{"Typeface name":"Wingdings","Dingbat dec":"155","Dingbat hex":"9B","Unicode dec":"128604","Unicode hex":"1F65C"},{"Typeface name":"Wingdings","Dingbat dec":"156","Dingbat hex":"9C","Unicode dec":"128605","Unicode hex":"1F65D"},{"Typeface name":"Wingdings","Dingbat dec":"157","Dingbat hex":"9D","Unicode dec":"128607","Unicode hex":"1F65F"},{"Typeface name":"Wingdings","Dingbat dec":"158","Dingbat hex":"9E","Unicode dec":"8729","Unicode hex":"2219"},{"Typeface name":"Wingdings","Dingbat dec":"159","Dingbat hex":"9F","Unicode dec":"8226","Unicode hex":"2022"},{"Typeface name":"Wingdings","Dingbat dec":"160","Dingbat hex":"A0","Unicode dec":"11037","Unicode hex":"2B1D"},{"Typeface name":"Wingdings","Dingbat dec":"161","Dingbat hex":"A1","Unicode dec":"11096","Unicode hex":"2B58"},{"Typeface name":"Wingdings","Dingbat dec":"162","Dingbat hex":"A2","Unicode dec":"128902","Unicode hex":"1F786"},{"Typeface name":"Wingdings","Dingbat dec":"163","Dingbat hex":"A3","Unicode dec":"128904","Unicode hex":"1F788"},{"Typeface name":"Wingdings","Dingbat dec":"164","Dingbat hex":"A4","Unicode dec":"128906","Unicode hex":"1F78A"},{"Typeface name":"Wingdings","Dingbat dec":"165","Dingbat hex":"A5","Unicode dec":"128907","Unicode hex":"1F78B"},{"Typeface name":"Wingdings","Dingbat dec":"166","Dingbat hex":"A6","Unicode dec":"128319","Unicode hex":"1F53F"},{"Typeface name":"Wingdings","Dingbat dec":"167","Dingbat hex":"A7","Unicode dec":"9642","Unicode hex":"25AA"},{"Typeface name":"Wingdings","Dingbat dec":"168","Dingbat hex":"A8","Unicode dec":"128910","Unicode hex":"1F78E"},{"Typeface name":"Wingdings","Dingbat dec":"169","Dingbat hex":"A9","Unicode dec":"128961","Unicode hex":"1F7C1"},{"Typeface name":"Wingdings","Dingbat dec":"170","Dingbat hex":"AA","Unicode dec":"128965","Unicode hex":"1F7C5"},{"Typeface name":"Wingdings","Dingbat dec":"171","Dingbat hex":"AB","Unicode dec":"9733","Unicode hex":"2605"},{"Typeface name":"Wingdings","Dingbat dec":"172","Dingbat hex":"AC","Unicode dec":"128971","Unicode hex":"1F7CB"},{"Typeface name":"Wingdings","Dingbat dec":"173","Dingbat hex":"AD","Unicode dec":"128975","Unicode hex":"1F7CF"},{"Typeface name":"Wingdings","Dingbat dec":"174","Dingbat hex":"AE","Unicode dec":"128979","Unicode hex":"1F7D3"},{"Typeface name":"Wingdings","Dingbat dec":"175","Dingbat hex":"AF","Unicode dec":"128977","Unicode hex":"1F7D1"},{"Typeface name":"Wingdings","Dingbat dec":"176","Dingbat hex":"B0","Unicode dec":"11216","Unicode hex":"2BD0"},{"Typeface name":"Wingdings","Dingbat dec":"177","Dingbat hex":"B1","Unicode dec":"8982","Unicode hex":"2316"},{"Typeface name":"Wingdings","Dingbat dec":"178","Dingbat hex":"B2","Unicode dec":"11214","Unicode hex":"2BCE"},{"Typeface name":"Wingdings","Dingbat dec":"179","Dingbat hex":"B3","Unicode dec":"11215","Unicode hex":"2BCF"},{"Typeface name":"Wingdings","Dingbat dec":"180","Dingbat hex":"B4","Unicode dec":"11217","Unicode hex":"2BD1"},{"Typeface name":"Wingdings","Dingbat dec":"181","Dingbat hex":"B5","Unicode dec":"10026","Unicode hex":"272A"},{"Typeface name":"Wingdings","Dingbat dec":"182","Dingbat hex":"B6","Unicode dec":"10032","Unicode hex":"2730"},{"Typeface name":"Wingdings","Dingbat dec":"183","Dingbat hex":"B7","Unicode dec":"128336","Unicode hex":"1F550"},{"Typeface name":"Wingdings","Dingbat dec":"184","Dingbat hex":"B8","Unicode dec":"128337","Unicode hex":"1F551"},{"Typeface name":"Wingdings","Dingbat dec":"185","Dingbat hex":"B9","Unicode dec":"128338","Unicode hex":"1F552"},{"Typeface name":"Wingdings","Dingbat dec":"186","Dingbat hex":"BA","Unicode dec":"128339","Unicode hex":"1F553"},{"Typeface name":"Wingdings","Dingbat dec":"187","Dingbat hex":"BB","Unicode dec":"128340","Unicode hex":"1F554"},{"Typeface name":"Wingdings","Dingbat dec":"188","Dingbat hex":"BC","Unicode dec":"128341","Unicode hex":"1F555"},{"Typeface name":"Wingdings","Dingbat dec":"189","Dingbat hex":"BD","Unicode dec":"128342","Unicode hex":"1F556"},{"Typeface name":"Wingdings","Dingbat dec":"190","Dingbat hex":"BE","Unicode dec":"128343","Unicode hex":"1F557"},{"Typeface name":"Wingdings","Dingbat dec":"191","Dingbat hex":"BF","Unicode dec":"128344","Unicode hex":"1F558"},{"Typeface name":"Wingdings","Dingbat dec":"192","Dingbat hex":"C0","Unicode dec":"128345","Unicode hex":"1F559"},{"Typeface name":"Wingdings","Dingbat dec":"193","Dingbat hex":"C1","Unicode dec":"128346","Unicode hex":"1F55A"},{"Typeface name":"Wingdings","Dingbat dec":"194","Dingbat hex":"C2","Unicode dec":"128347","Unicode hex":"1F55B"},{"Typeface name":"Wingdings","Dingbat dec":"195","Dingbat hex":"C3","Unicode dec":"11184","Unicode hex":"2BB0"},{"Typeface name":"Wingdings","Dingbat dec":"196","Dingbat hex":"C4","Unicode dec":"11185","Unicode hex":"2BB1"},{"Typeface name":"Wingdings","Dingbat dec":"197","Dingbat hex":"C5","Unicode dec":"11186","Unicode hex":"2BB2"},{"Typeface name":"Wingdings","Dingbat dec":"198","Dingbat hex":"C6","Unicode dec":"11187","Unicode hex":"2BB3"},{"Typeface name":"Wingdings","Dingbat dec":"199","Dingbat hex":"C7","Unicode dec":"11188","Unicode hex":"2BB4"},{"Typeface name":"Wingdings","Dingbat dec":"200","Dingbat hex":"C8","Unicode dec":"11189","Unicode hex":"2BB5"},{"Typeface name":"Wingdings","Dingbat dec":"201","Dingbat hex":"C9","Unicode dec":"11190","Unicode hex":"2BB6"},{"Typeface name":"Wingdings","Dingbat dec":"202","Dingbat hex":"CA","Unicode dec":"11191","Unicode hex":"2BB7"},{"Typeface name":"Wingdings","Dingbat dec":"203","Dingbat hex":"CB","Unicode dec":"128618","Unicode hex":"1F66A"},{"Typeface name":"Wingdings","Dingbat dec":"204","Dingbat hex":"CC","Unicode dec":"128619","Unicode hex":"1F66B"},{"Typeface name":"Wingdings","Dingbat dec":"205","Dingbat hex":"CD","Unicode dec":"128597","Unicode hex":"1F655"},{"Typeface name":"Wingdings","Dingbat dec":"206","Dingbat hex":"CE","Unicode dec":"128596","Unicode hex":"1F654"},{"Typeface name":"Wingdings","Dingbat dec":"207","Dingbat hex":"CF","Unicode dec":"128599","Unicode hex":"1F657"},{"Typeface name":"Wingdings","Dingbat dec":"208","Dingbat hex":"D0","Unicode dec":"128598","Unicode hex":"1F656"},{"Typeface name":"Wingdings","Dingbat dec":"209","Dingbat hex":"D1","Unicode dec":"128592","Unicode hex":"1F650"},{"Typeface name":"Wingdings","Dingbat dec":"210","Dingbat hex":"D2","Unicode dec":"128593","Unicode hex":"1F651"},{"Typeface name":"Wingdings","Dingbat dec":"211","Dingbat hex":"D3","Unicode dec":"128594","Unicode hex":"1F652"},{"Typeface name":"Wingdings","Dingbat dec":"212","Dingbat hex":"D4","Unicode dec":"128595","Unicode hex":"1F653"},{"Typeface name":"Wingdings","Dingbat dec":"213","Dingbat hex":"D5","Unicode dec":"9003","Unicode hex":"232B"},{"Typeface name":"Wingdings","Dingbat dec":"214","Dingbat hex":"D6","Unicode dec":"8998","Unicode hex":"2326"},{"Typeface name":"Wingdings","Dingbat dec":"215","Dingbat hex":"D7","Unicode dec":"11160","Unicode hex":"2B98"},{"Typeface name":"Wingdings","Dingbat dec":"216","Dingbat hex":"D8","Unicode dec":"11162","Unicode hex":"2B9A"},{"Typeface name":"Wingdings","Dingbat dec":"217","Dingbat hex":"D9","Unicode dec":"11161","Unicode hex":"2B99"},{"Typeface name":"Wingdings","Dingbat dec":"218","Dingbat hex":"DA","Unicode dec":"11163","Unicode hex":"2B9B"},{"Typeface name":"Wingdings","Dingbat dec":"219","Dingbat hex":"DB","Unicode dec":"11144","Unicode hex":"2B88"},{"Typeface name":"Wingdings","Dingbat dec":"220","Dingbat hex":"DC","Unicode dec":"11146","Unicode hex":"2B8A"},{"Typeface name":"Wingdings","Dingbat dec":"221","Dingbat hex":"DD","Unicode dec":"11145","Unicode hex":"2B89"},{"Typeface name":"Wingdings","Dingbat dec":"222","Dingbat hex":"DE","Unicode dec":"11147","Unicode hex":"2B8B"},{"Typeface name":"Wingdings","Dingbat dec":"223","Dingbat hex":"DF","Unicode dec":"129128","Unicode hex":"1F868"},{"Typeface name":"Wingdings","Dingbat dec":"224","Dingbat hex":"E0","Unicode dec":"129130","Unicode hex":"1F86A"},{"Typeface name":"Wingdings","Dingbat dec":"225","Dingbat hex":"E1","Unicode dec":"129129","Unicode hex":"1F869"},{"Typeface name":"Wingdings","Dingbat dec":"226","Dingbat hex":"E2","Unicode dec":"129131","Unicode hex":"1F86B"},{"Typeface name":"Wingdings","Dingbat dec":"227","Dingbat hex":"E3","Unicode dec":"129132","Unicode hex":"1F86C"},{"Typeface name":"Wingdings","Dingbat dec":"228","Dingbat hex":"E4","Unicode dec":"129133","Unicode hex":"1F86D"},{"Typeface name":"Wingdings","Dingbat dec":"229","Dingbat hex":"E5","Unicode dec":"129135","Unicode hex":"1F86F"},{"Typeface name":"Wingdings","Dingbat dec":"230","Dingbat hex":"E6","Unicode dec":"129134","Unicode hex":"1F86E"},{"Typeface name":"Wingdings","Dingbat dec":"231","Dingbat hex":"E7","Unicode dec":"129144","Unicode hex":"1F878"},{"Typeface name":"Wingdings","Dingbat dec":"232","Dingbat hex":"E8","Unicode dec":"129146","Unicode hex":"1F87A"},{"Typeface name":"Wingdings","Dingbat dec":"233","Dingbat hex":"E9","Unicode dec":"129145","Unicode hex":"1F879"},{"Typeface name":"Wingdings","Dingbat dec":"234","Dingbat hex":"EA","Unicode dec":"129147","Unicode hex":"1F87B"},{"Typeface name":"Wingdings","Dingbat dec":"235","Dingbat hex":"EB","Unicode dec":"129148","Unicode hex":"1F87C"},{"Typeface name":"Wingdings","Dingbat dec":"236","Dingbat hex":"EC","Unicode dec":"129149","Unicode hex":"1F87D"},{"Typeface name":"Wingdings","Dingbat dec":"237","Dingbat hex":"ED","Unicode dec":"129151","Unicode hex":"1F87F"},{"Typeface name":"Wingdings","Dingbat dec":"238","Dingbat hex":"EE","Unicode dec":"129150","Unicode hex":"1F87E"},{"Typeface name":"Wingdings","Dingbat dec":"239","Dingbat hex":"EF","Unicode dec":"8678","Unicode hex":"21E6"},{"Typeface name":"Wingdings","Dingbat dec":"240","Dingbat hex":"F0","Unicode dec":"8680","Unicode hex":"21E8"},{"Typeface name":"Wingdings","Dingbat dec":"241","Dingbat hex":"F1","Unicode dec":"8679","Unicode hex":"21E7"},{"Typeface name":"Wingdings","Dingbat dec":"242","Dingbat hex":"F2","Unicode dec":"8681","Unicode hex":"21E9"},{"Typeface name":"Wingdings","Dingbat dec":"243","Dingbat hex":"F3","Unicode dec":"11012","Unicode hex":"2B04"},{"Typeface name":"Wingdings","Dingbat dec":"244","Dingbat hex":"F4","Unicode dec":"8691","Unicode hex":"21F3"},{"Typeface name":"Wingdings","Dingbat dec":"245","Dingbat hex":"F5","Unicode dec":"11009","Unicode hex":"2B01"},{"Typeface name":"Wingdings","Dingbat dec":"246","Dingbat hex":"F6","Unicode dec":"11008","Unicode hex":"2B00"},{"Typeface name":"Wingdings","Dingbat dec":"247","Dingbat hex":"F7","Unicode dec":"11011","Unicode hex":"2B03"},{"Typeface name":"Wingdings","Dingbat dec":"248","Dingbat hex":"F8","Unicode dec":"11010","Unicode hex":"2B02"},{"Typeface name":"Wingdings","Dingbat dec":"249","Dingbat hex":"F9","Unicode dec":"129196","Unicode hex":"1F8AC"},{"Typeface name":"Wingdings","Dingbat dec":"250","Dingbat hex":"FA","Unicode dec":"129197","Unicode hex":"1F8AD"},{"Typeface name":"Wingdings","Dingbat dec":"251","Dingbat hex":"FB","Unicode dec":"128502","Unicode hex":"1F5F6"},{"Typeface name":"Wingdings","Dingbat dec":"252","Dingbat hex":"FC","Unicode dec":"10003","Unicode hex":"2713"},{"Typeface name":"Wingdings","Dingbat dec":"253","Dingbat hex":"FD","Unicode dec":"128503","Unicode hex":"1F5F7"},{"Typeface name":"Wingdings","Dingbat dec":"254","Dingbat hex":"FE","Unicode dec":"128505","Unicode hex":"1F5F9"},{"Typeface name":"Wingdings 2","Dingbat dec":"32","Dingbat hex":"20","Unicode dec":"32","Unicode hex":"20"},{"Typeface name":"Wingdings 2","Dingbat dec":"33","Dingbat hex":"21","Unicode dec":"128394","Unicode hex":"1F58A"},{"Typeface name":"Wingdings 2","Dingbat dec":"34","Dingbat hex":"22","Unicode dec":"128395","Unicode hex":"1F58B"},{"Typeface name":"Wingdings 2","Dingbat dec":"35","Dingbat hex":"23","Unicode dec":"128396","Unicode hex":"1F58C"},{"Typeface name":"Wingdings 2","Dingbat dec":"36","Dingbat hex":"24","Unicode dec":"128397","Unicode hex":"1F58D"},{"Typeface name":"Wingdings 2","Dingbat dec":"37","Dingbat hex":"25","Unicode dec":"9988","Unicode hex":"2704"},{"Typeface name":"Wingdings 2","Dingbat dec":"38","Dingbat hex":"26","Unicode dec":"9984","Unicode hex":"2700"},{"Typeface name":"Wingdings 2","Dingbat dec":"39","Dingbat hex":"27","Unicode dec":"128382","Unicode hex":"1F57E"},{"Typeface name":"Wingdings 2","Dingbat dec":"40","Dingbat hex":"28","Unicode dec":"128381","Unicode hex":"1F57D"},{"Typeface name":"Wingdings 2","Dingbat dec":"41","Dingbat hex":"29","Unicode dec":"128453","Unicode hex":"1F5C5"},{"Typeface name":"Wingdings 2","Dingbat dec":"42","Dingbat hex":"2A","Unicode dec":"128454","Unicode hex":"1F5C6"},{"Typeface name":"Wingdings 2","Dingbat dec":"43","Dingbat hex":"2B","Unicode dec":"128455","Unicode hex":"1F5C7"},{"Typeface name":"Wingdings 2","Dingbat dec":"44","Dingbat hex":"2C","Unicode dec":"128456","Unicode hex":"1F5C8"},{"Typeface name":"Wingdings 2","Dingbat dec":"45","Dingbat hex":"2D","Unicode dec":"128457","Unicode hex":"1F5C9"},{"Typeface name":"Wingdings 2","Dingbat dec":"46","Dingbat hex":"2E","Unicode dec":"128458","Unicode hex":"1F5CA"},{"Typeface name":"Wingdings 2","Dingbat dec":"47","Dingbat hex":"2F","Unicode dec":"128459","Unicode hex":"1F5CB"},{"Typeface name":"Wingdings 2","Dingbat dec":"48","Dingbat hex":"30","Unicode dec":"128460","Unicode hex":"1F5CC"},{"Typeface name":"Wingdings 2","Dingbat dec":"49","Dingbat hex":"31","Unicode dec":"128461","Unicode hex":"1F5CD"},{"Typeface name":"Wingdings 2","Dingbat dec":"50","Dingbat hex":"32","Unicode dec":"128203","Unicode hex":"1F4CB"},{"Typeface name":"Wingdings 2","Dingbat dec":"51","Dingbat hex":"33","Unicode dec":"128465","Unicode hex":"1F5D1"},{"Typeface name":"Wingdings 2","Dingbat dec":"52","Dingbat hex":"34","Unicode dec":"128468","Unicode hex":"1F5D4"},{"Typeface name":"Wingdings 2","Dingbat dec":"53","Dingbat hex":"35","Unicode dec":"128437","Unicode hex":"1F5B5"},{"Typeface name":"Wingdings 2","Dingbat dec":"54","Dingbat hex":"36","Unicode dec":"128438","Unicode hex":"1F5B6"},{"Typeface name":"Wingdings 2","Dingbat dec":"55","Dingbat hex":"37","Unicode dec":"128439","Unicode hex":"1F5B7"},{"Typeface name":"Wingdings 2","Dingbat dec":"56","Dingbat hex":"38","Unicode dec":"128440","Unicode hex":"1F5B8"},{"Typeface name":"Wingdings 2","Dingbat dec":"57","Dingbat hex":"39","Unicode dec":"128429","Unicode hex":"1F5AD"},{"Typeface name":"Wingdings 2","Dingbat dec":"58","Dingbat hex":"3A","Unicode dec":"128431","Unicode hex":"1F5AF"},{"Typeface name":"Wingdings 2","Dingbat dec":"59","Dingbat hex":"3B","Unicode dec":"128433","Unicode hex":"1F5B1"},{"Typeface name":"Wingdings 2","Dingbat dec":"60","Dingbat hex":"3C","Unicode dec":"128402","Unicode hex":"1F592"},{"Typeface name":"Wingdings 2","Dingbat dec":"61","Dingbat hex":"3D","Unicode dec":"128403","Unicode hex":"1F593"},{"Typeface name":"Wingdings 2","Dingbat dec":"62","Dingbat hex":"3E","Unicode dec":"128408","Unicode hex":"1F598"},{"Typeface name":"Wingdings 2","Dingbat dec":"63","Dingbat hex":"3F","Unicode dec":"128409","Unicode hex":"1F599"},{"Typeface name":"Wingdings 2","Dingbat dec":"64","Dingbat hex":"40","Unicode dec":"128410","Unicode hex":"1F59A"},{"Typeface name":"Wingdings 2","Dingbat dec":"65","Dingbat hex":"41","Unicode dec":"128411","Unicode hex":"1F59B"},{"Typeface name":"Wingdings 2","Dingbat dec":"66","Dingbat hex":"42","Unicode dec":"128072","Unicode hex":"1F448"},{"Typeface name":"Wingdings 2","Dingbat dec":"67","Dingbat hex":"43","Unicode dec":"128073","Unicode hex":"1F449"},{"Typeface name":"Wingdings 2","Dingbat dec":"68","Dingbat hex":"44","Unicode dec":"128412","Unicode hex":"1F59C"},{"Typeface name":"Wingdings 2","Dingbat dec":"69","Dingbat hex":"45","Unicode dec":"128413","Unicode hex":"1F59D"},{"Typeface name":"Wingdings 2","Dingbat dec":"70","Dingbat hex":"46","Unicode dec":"128414","Unicode hex":"1F59E"},{"Typeface name":"Wingdings 2","Dingbat dec":"71","Dingbat hex":"47","Unicode dec":"128415","Unicode hex":"1F59F"},{"Typeface name":"Wingdings 2","Dingbat dec":"72","Dingbat hex":"48","Unicode dec":"128416","Unicode hex":"1F5A0"},{"Typeface name":"Wingdings 2","Dingbat dec":"73","Dingbat hex":"49","Unicode dec":"128417","Unicode hex":"1F5A1"},{"Typeface name":"Wingdings 2","Dingbat dec":"74","Dingbat hex":"4A","Unicode dec":"128070","Unicode hex":"1F446"},{"Typeface name":"Wingdings 2","Dingbat dec":"75","Dingbat hex":"4B","Unicode dec":"128071","Unicode hex":"1F447"},{"Typeface name":"Wingdings 2","Dingbat dec":"76","Dingbat hex":"4C","Unicode dec":"128418","Unicode hex":"1F5A2"},{"Typeface name":"Wingdings 2","Dingbat dec":"77","Dingbat hex":"4D","Unicode dec":"128419","Unicode hex":"1F5A3"},{"Typeface name":"Wingdings 2","Dingbat dec":"78","Dingbat hex":"4E","Unicode dec":"128401","Unicode hex":"1F591"},{"Typeface name":"Wingdings 2","Dingbat dec":"79","Dingbat hex":"4F","Unicode dec":"128500","Unicode hex":"1F5F4"},{"Typeface name":"Wingdings 2","Dingbat dec":"80","Dingbat hex":"50","Unicode dec":"128504","Unicode hex":"1F5F8"},{"Typeface name":"Wingdings 2","Dingbat dec":"81","Dingbat hex":"51","Unicode dec":"128501","Unicode hex":"1F5F5"},{"Typeface name":"Wingdings 2","Dingbat dec":"82","Dingbat hex":"52","Unicode dec":"9745","Unicode hex":"2611"},{"Typeface name":"Wingdings 2","Dingbat dec":"83","Dingbat hex":"53","Unicode dec":"11197","Unicode hex":"2BBD"},{"Typeface name":"Wingdings 2","Dingbat dec":"84","Dingbat hex":"54","Unicode dec":"9746","Unicode hex":"2612"},{"Typeface name":"Wingdings 2","Dingbat dec":"85","Dingbat hex":"55","Unicode dec":"11198","Unicode hex":"2BBE"},{"Typeface name":"Wingdings 2","Dingbat dec":"86","Dingbat hex":"56","Unicode dec":"11199","Unicode hex":"2BBF"},{"Typeface name":"Wingdings 2","Dingbat dec":"87","Dingbat hex":"57","Unicode dec":"128711","Unicode hex":"1F6C7"},{"Typeface name":"Wingdings 2","Dingbat dec":"88","Dingbat hex":"58","Unicode dec":"10680","Unicode hex":"29B8"},{"Typeface name":"Wingdings 2","Dingbat dec":"89","Dingbat hex":"59","Unicode dec":"128625","Unicode hex":"1F671"},{"Typeface name":"Wingdings 2","Dingbat dec":"90","Dingbat hex":"5A","Unicode dec":"128628","Unicode hex":"1F674"},{"Typeface name":"Wingdings 2","Dingbat dec":"91","Dingbat hex":"5B","Unicode dec":"128626","Unicode hex":"1F672"},{"Typeface name":"Wingdings 2","Dingbat dec":"92","Dingbat hex":"5C","Unicode dec":"128627","Unicode hex":"1F673"},{"Typeface name":"Wingdings 2","Dingbat dec":"93","Dingbat hex":"5D","Unicode dec":"8253","Unicode hex":"203D"},{"Typeface name":"Wingdings 2","Dingbat dec":"94","Dingbat hex":"5E","Unicode dec":"128633","Unicode hex":"1F679"},{"Typeface name":"Wingdings 2","Dingbat dec":"95","Dingbat hex":"5F","Unicode dec":"128634","Unicode hex":"1F67A"},{"Typeface name":"Wingdings 2","Dingbat dec":"96","Dingbat hex":"60","Unicode dec":"128635","Unicode hex":"1F67B"},{"Typeface name":"Wingdings 2","Dingbat dec":"97","Dingbat hex":"61","Unicode dec":"128614","Unicode hex":"1F666"},{"Typeface name":"Wingdings 2","Dingbat dec":"98","Dingbat hex":"62","Unicode dec":"128612","Unicode hex":"1F664"},{"Typeface name":"Wingdings 2","Dingbat dec":"99","Dingbat hex":"63","Unicode dec":"128613","Unicode hex":"1F665"},{"Typeface name":"Wingdings 2","Dingbat dec":"100","Dingbat hex":"64","Unicode dec":"128615","Unicode hex":"1F667"},{"Typeface name":"Wingdings 2","Dingbat dec":"101","Dingbat hex":"65","Unicode dec":"128602","Unicode hex":"1F65A"},{"Typeface name":"Wingdings 2","Dingbat dec":"102","Dingbat hex":"66","Unicode dec":"128600","Unicode hex":"1F658"},{"Typeface name":"Wingdings 2","Dingbat dec":"103","Dingbat hex":"67","Unicode dec":"128601","Unicode hex":"1F659"},{"Typeface name":"Wingdings 2","Dingbat dec":"104","Dingbat hex":"68","Unicode dec":"128603","Unicode hex":"1F65B"},{"Typeface name":"Wingdings 2","Dingbat dec":"105","Dingbat hex":"69","Unicode dec":"9450","Unicode hex":"24EA"},{"Typeface name":"Wingdings 2","Dingbat dec":"106","Dingbat hex":"6A","Unicode dec":"9312","Unicode hex":"2460"},{"Typeface name":"Wingdings 2","Dingbat dec":"107","Dingbat hex":"6B","Unicode dec":"9313","Unicode hex":"2461"},{"Typeface name":"Wingdings 2","Dingbat dec":"108","Dingbat hex":"6C","Unicode dec":"9314","Unicode hex":"2462"},{"Typeface name":"Wingdings 2","Dingbat dec":"109","Dingbat hex":"6D","Unicode dec":"9315","Unicode hex":"2463"},{"Typeface name":"Wingdings 2","Dingbat dec":"110","Dingbat hex":"6E","Unicode dec":"9316","Unicode hex":"2464"},{"Typeface name":"Wingdings 2","Dingbat dec":"111","Dingbat hex":"6F","Unicode dec":"9317","Unicode hex":"2465"},{"Typeface name":"Wingdings 2","Dingbat dec":"112","Dingbat hex":"70","Unicode dec":"9318","Unicode hex":"2466"},{"Typeface name":"Wingdings 2","Dingbat dec":"113","Dingbat hex":"71","Unicode dec":"9319","Unicode hex":"2467"},{"Typeface name":"Wingdings 2","Dingbat dec":"114","Dingbat hex":"72","Unicode dec":"9320","Unicode hex":"2468"},{"Typeface name":"Wingdings 2","Dingbat dec":"115","Dingbat hex":"73","Unicode dec":"9321","Unicode hex":"2469"},{"Typeface name":"Wingdings 2","Dingbat dec":"116","Dingbat hex":"74","Unicode dec":"9471","Unicode hex":"24FF"},{"Typeface name":"Wingdings 2","Dingbat dec":"117","Dingbat hex":"75","Unicode dec":"10102","Unicode hex":"2776"},{"Typeface name":"Wingdings 2","Dingbat dec":"118","Dingbat hex":"76","Unicode dec":"10103","Unicode hex":"2777"},{"Typeface name":"Wingdings 2","Dingbat dec":"119","Dingbat hex":"77","Unicode dec":"10104","Unicode hex":"2778"},{"Typeface name":"Wingdings 2","Dingbat dec":"120","Dingbat hex":"78","Unicode dec":"10105","Unicode hex":"2779"},{"Typeface name":"Wingdings 2","Dingbat dec":"121","Dingbat hex":"79","Unicode dec":"10106","Unicode hex":"277A"},{"Typeface name":"Wingdings 2","Dingbat dec":"122","Dingbat hex":"7A","Unicode dec":"10107","Unicode hex":"277B"},{"Typeface name":"Wingdings 2","Dingbat dec":"123","Dingbat hex":"7B","Unicode dec":"10108","Unicode hex":"277C"},{"Typeface name":"Wingdings 2","Dingbat dec":"124","Dingbat hex":"7C","Unicode dec":"10109","Unicode hex":"277D"},{"Typeface name":"Wingdings 2","Dingbat dec":"125","Dingbat hex":"7D","Unicode dec":"10110","Unicode hex":"277E"},{"Typeface name":"Wingdings 2","Dingbat dec":"126","Dingbat hex":"7E","Unicode dec":"10111","Unicode hex":"277F"},{"Typeface name":"Wingdings 2","Dingbat dec":"128","Dingbat hex":"80","Unicode dec":"9737","Unicode hex":"2609"},{"Typeface name":"Wingdings 2","Dingbat dec":"129","Dingbat hex":"81","Unicode dec":"127765","Unicode hex":"1F315"},{"Typeface name":"Wingdings 2","Dingbat dec":"130","Dingbat hex":"82","Unicode dec":"9789","Unicode hex":"263D"},{"Typeface name":"Wingdings 2","Dingbat dec":"131","Dingbat hex":"83","Unicode dec":"9790","Unicode hex":"263E"},{"Typeface name":"Wingdings 2","Dingbat dec":"132","Dingbat hex":"84","Unicode dec":"11839","Unicode hex":"2E3F"},{"Typeface name":"Wingdings 2","Dingbat dec":"133","Dingbat hex":"85","Unicode dec":"10013","Unicode hex":"271D"},{"Typeface name":"Wingdings 2","Dingbat dec":"134","Dingbat hex":"86","Unicode dec":"128327","Unicode hex":"1F547"},{"Typeface name":"Wingdings 2","Dingbat dec":"135","Dingbat hex":"87","Unicode dec":"128348","Unicode hex":"1F55C"},{"Typeface name":"Wingdings 2","Dingbat dec":"136","Dingbat hex":"88","Unicode dec":"128349","Unicode hex":"1F55D"},{"Typeface name":"Wingdings 2","Dingbat dec":"137","Dingbat hex":"89","Unicode dec":"128350","Unicode hex":"1F55E"},{"Typeface name":"Wingdings 2","Dingbat dec":"138","Dingbat hex":"8A","Unicode dec":"128351","Unicode hex":"1F55F"},{"Typeface name":"Wingdings 2","Dingbat dec":"139","Dingbat hex":"8B","Unicode dec":"128352","Unicode hex":"1F560"},{"Typeface name":"Wingdings 2","Dingbat dec":"140","Dingbat hex":"8C","Unicode dec":"128353","Unicode hex":"1F561"},{"Typeface name":"Wingdings 2","Dingbat dec":"141","Dingbat hex":"8D","Unicode dec":"128354","Unicode hex":"1F562"},{"Typeface name":"Wingdings 2","Dingbat dec":"142","Dingbat hex":"8E","Unicode dec":"128355","Unicode hex":"1F563"},{"Typeface name":"Wingdings 2","Dingbat dec":"143","Dingbat hex":"8F","Unicode dec":"128356","Unicode hex":"1F564"},{"Typeface name":"Wingdings 2","Dingbat dec":"144","Dingbat hex":"90","Unicode dec":"128357","Unicode hex":"1F565"},{"Typeface name":"Wingdings 2","Dingbat dec":"145","Dingbat hex":"91","Unicode dec":"128358","Unicode hex":"1F566"},{"Typeface name":"Wingdings 2","Dingbat dec":"146","Dingbat hex":"92","Unicode dec":"128359","Unicode hex":"1F567"},{"Typeface name":"Wingdings 2","Dingbat dec":"147","Dingbat hex":"93","Unicode dec":"128616","Unicode hex":"1F668"},{"Typeface name":"Wingdings 2","Dingbat dec":"148","Dingbat hex":"94","Unicode dec":"128617","Unicode hex":"1F669"},{"Typeface name":"Wingdings 2","Dingbat dec":"149","Dingbat hex":"95","Unicode dec":"8901","Unicode hex":"22C5"},{"Typeface name":"Wingdings 2","Dingbat dec":"150","Dingbat hex":"96","Unicode dec":"128900","Unicode hex":"1F784"},{"Typeface name":"Wingdings 2","Dingbat dec":"151","Dingbat hex":"97","Unicode dec":"10625","Unicode hex":"2981"},{"Typeface name":"Wingdings 2","Dingbat dec":"152","Dingbat hex":"98","Unicode dec":"9679","Unicode hex":"25CF"},{"Typeface name":"Wingdings 2","Dingbat dec":"153","Dingbat hex":"99","Unicode dec":"9675","Unicode hex":"25CB"},{"Typeface name":"Wingdings 2","Dingbat dec":"154","Dingbat hex":"9A","Unicode dec":"128901","Unicode hex":"1F785"},{"Typeface name":"Wingdings 2","Dingbat dec":"155","Dingbat hex":"9B","Unicode dec":"128903","Unicode hex":"1F787"},{"Typeface name":"Wingdings 2","Dingbat dec":"156","Dingbat hex":"9C","Unicode dec":"128905","Unicode hex":"1F789"},{"Typeface name":"Wingdings 2","Dingbat dec":"157","Dingbat hex":"9D","Unicode dec":"8857","Unicode hex":"2299"},{"Typeface name":"Wingdings 2","Dingbat dec":"158","Dingbat hex":"9E","Unicode dec":"10687","Unicode hex":"29BF"},{"Typeface name":"Wingdings 2","Dingbat dec":"159","Dingbat hex":"9F","Unicode dec":"128908","Unicode hex":"1F78C"},{"Typeface name":"Wingdings 2","Dingbat dec":"160","Dingbat hex":"A0","Unicode dec":"128909","Unicode hex":"1F78D"},{"Typeface name":"Wingdings 2","Dingbat dec":"161","Dingbat hex":"A1","Unicode dec":"9726","Unicode hex":"25FE"},{"Typeface name":"Wingdings 2","Dingbat dec":"162","Dingbat hex":"A2","Unicode dec":"9632","Unicode hex":"25A0"},{"Typeface name":"Wingdings 2","Dingbat dec":"163","Dingbat hex":"A3","Unicode dec":"9633","Unicode hex":"25A1"},{"Typeface name":"Wingdings 2","Dingbat dec":"164","Dingbat hex":"A4","Unicode dec":"128913","Unicode hex":"1F791"},{"Typeface name":"Wingdings 2","Dingbat dec":"165","Dingbat hex":"A5","Unicode dec":"128914","Unicode hex":"1F792"},{"Typeface name":"Wingdings 2","Dingbat dec":"166","Dingbat hex":"A6","Unicode dec":"128915","Unicode hex":"1F793"},{"Typeface name":"Wingdings 2","Dingbat dec":"167","Dingbat hex":"A7","Unicode dec":"128916","Unicode hex":"1F794"},{"Typeface name":"Wingdings 2","Dingbat dec":"168","Dingbat hex":"A8","Unicode dec":"9635","Unicode hex":"25A3"},{"Typeface name":"Wingdings 2","Dingbat dec":"169","Dingbat hex":"A9","Unicode dec":"128917","Unicode hex":"1F795"},{"Typeface name":"Wingdings 2","Dingbat dec":"170","Dingbat hex":"AA","Unicode dec":"128918","Unicode hex":"1F796"},{"Typeface name":"Wingdings 2","Dingbat dec":"171","Dingbat hex":"AB","Unicode dec":"128919","Unicode hex":"1F797"},{"Typeface name":"Wingdings 2","Dingbat dec":"172","Dingbat hex":"AC","Unicode dec":"128920","Unicode hex":"1F798"},{"Typeface name":"Wingdings 2","Dingbat dec":"173","Dingbat hex":"AD","Unicode dec":"11049","Unicode hex":"2B29"},{"Typeface name":"Wingdings 2","Dingbat dec":"174","Dingbat hex":"AE","Unicode dec":"11045","Unicode hex":"2B25"},{"Typeface name":"Wingdings 2","Dingbat dec":"175","Dingbat hex":"AF","Unicode dec":"9671","Unicode hex":"25C7"},{"Typeface name":"Wingdings 2","Dingbat dec":"176","Dingbat hex":"B0","Unicode dec":"128922","Unicode hex":"1F79A"},{"Typeface name":"Wingdings 2","Dingbat dec":"177","Dingbat hex":"B1","Unicode dec":"9672","Unicode hex":"25C8"},{"Typeface name":"Wingdings 2","Dingbat dec":"178","Dingbat hex":"B2","Unicode dec":"128923","Unicode hex":"1F79B"},{"Typeface name":"Wingdings 2","Dingbat dec":"179","Dingbat hex":"B3","Unicode dec":"128924","Unicode hex":"1F79C"},{"Typeface name":"Wingdings 2","Dingbat dec":"180","Dingbat hex":"B4","Unicode dec":"128925","Unicode hex":"1F79D"},{"Typeface name":"Wingdings 2","Dingbat dec":"181","Dingbat hex":"B5","Unicode dec":"128926","Unicode hex":"1F79E"},{"Typeface name":"Wingdings 2","Dingbat dec":"182","Dingbat hex":"B6","Unicode dec":"11050","Unicode hex":"2B2A"},{"Typeface name":"Wingdings 2","Dingbat dec":"183","Dingbat hex":"B7","Unicode dec":"11047","Unicode hex":"2B27"},{"Typeface name":"Wingdings 2","Dingbat dec":"184","Dingbat hex":"B8","Unicode dec":"9674","Unicode hex":"25CA"},{"Typeface name":"Wingdings 2","Dingbat dec":"185","Dingbat hex":"B9","Unicode dec":"128928","Unicode hex":"1F7A0"},{"Typeface name":"Wingdings 2","Dingbat dec":"186","Dingbat hex":"BA","Unicode dec":"9686","Unicode hex":"25D6"},{"Typeface name":"Wingdings 2","Dingbat dec":"187","Dingbat hex":"BB","Unicode dec":"9687","Unicode hex":"25D7"},{"Typeface name":"Wingdings 2","Dingbat dec":"188","Dingbat hex":"BC","Unicode dec":"11210","Unicode hex":"2BCA"},{"Typeface name":"Wingdings 2","Dingbat dec":"189","Dingbat hex":"BD","Unicode dec":"11211","Unicode hex":"2BCB"},{"Typeface name":"Wingdings 2","Dingbat dec":"190","Dingbat hex":"BE","Unicode dec":"11200","Unicode hex":"2BC0"},{"Typeface name":"Wingdings 2","Dingbat dec":"191","Dingbat hex":"BF","Unicode dec":"11201","Unicode hex":"2BC1"},{"Typeface name":"Wingdings 2","Dingbat dec":"192","Dingbat hex":"C0","Unicode dec":"11039","Unicode hex":"2B1F"},{"Typeface name":"Wingdings 2","Dingbat dec":"193","Dingbat hex":"C1","Unicode dec":"11202","Unicode hex":"2BC2"},{"Typeface name":"Wingdings 2","Dingbat dec":"194","Dingbat hex":"C2","Unicode dec":"11043","Unicode hex":"2B23"},{"Typeface name":"Wingdings 2","Dingbat dec":"195","Dingbat hex":"C3","Unicode dec":"11042","Unicode hex":"2B22"},{"Typeface name":"Wingdings 2","Dingbat dec":"196","Dingbat hex":"C4","Unicode dec":"11203","Unicode hex":"2BC3"},{"Typeface name":"Wingdings 2","Dingbat dec":"197","Dingbat hex":"C5","Unicode dec":"11204","Unicode hex":"2BC4"},{"Typeface name":"Wingdings 2","Dingbat dec":"198","Dingbat hex":"C6","Unicode dec":"128929","Unicode hex":"1F7A1"},{"Typeface name":"Wingdings 2","Dingbat dec":"199","Dingbat hex":"C7","Unicode dec":"128930","Unicode hex":"1F7A2"},{"Typeface name":"Wingdings 2","Dingbat dec":"200","Dingbat hex":"C8","Unicode dec":"128931","Unicode hex":"1F7A3"},{"Typeface name":"Wingdings 2","Dingbat dec":"201","Dingbat hex":"C9","Unicode dec":"128932","Unicode hex":"1F7A4"},{"Typeface name":"Wingdings 2","Dingbat dec":"202","Dingbat hex":"CA","Unicode dec":"128933","Unicode hex":"1F7A5"},{"Typeface name":"Wingdings 2","Dingbat dec":"203","Dingbat hex":"CB","Unicode dec":"128934","Unicode hex":"1F7A6"},{"Typeface name":"Wingdings 2","Dingbat dec":"204","Dingbat hex":"CC","Unicode dec":"128935","Unicode hex":"1F7A7"},{"Typeface name":"Wingdings 2","Dingbat dec":"205","Dingbat hex":"CD","Unicode dec":"128936","Unicode hex":"1F7A8"},{"Typeface name":"Wingdings 2","Dingbat dec":"206","Dingbat hex":"CE","Unicode dec":"128937","Unicode hex":"1F7A9"},{"Typeface name":"Wingdings 2","Dingbat dec":"207","Dingbat hex":"CF","Unicode dec":"128938","Unicode hex":"1F7AA"},{"Typeface name":"Wingdings 2","Dingbat dec":"208","Dingbat hex":"D0","Unicode dec":"128939","Unicode hex":"1F7AB"},{"Typeface name":"Wingdings 2","Dingbat dec":"209","Dingbat hex":"D1","Unicode dec":"128940","Unicode hex":"1F7AC"},{"Typeface name":"Wingdings 2","Dingbat dec":"210","Dingbat hex":"D2","Unicode dec":"128941","Unicode hex":"1F7AD"},{"Typeface name":"Wingdings 2","Dingbat dec":"211","Dingbat hex":"D3","Unicode dec":"128942","Unicode hex":"1F7AE"},{"Typeface name":"Wingdings 2","Dingbat dec":"212","Dingbat hex":"D4","Unicode dec":"128943","Unicode hex":"1F7AF"},{"Typeface name":"Wingdings 2","Dingbat dec":"213","Dingbat hex":"D5","Unicode dec":"128944","Unicode hex":"1F7B0"},{"Typeface name":"Wingdings 2","Dingbat dec":"214","Dingbat hex":"D6","Unicode dec":"128945","Unicode hex":"1F7B1"},{"Typeface name":"Wingdings 2","Dingbat dec":"215","Dingbat hex":"D7","Unicode dec":"128946","Unicode hex":"1F7B2"},{"Typeface name":"Wingdings 2","Dingbat dec":"216","Dingbat hex":"D8","Unicode dec":"128947","Unicode hex":"1F7B3"},{"Typeface name":"Wingdings 2","Dingbat dec":"217","Dingbat hex":"D9","Unicode dec":"128948","Unicode hex":"1F7B4"},{"Typeface name":"Wingdings 2","Dingbat dec":"218","Dingbat hex":"DA","Unicode dec":"128949","Unicode hex":"1F7B5"},{"Typeface name":"Wingdings 2","Dingbat dec":"219","Dingbat hex":"DB","Unicode dec":"128950","Unicode hex":"1F7B6"},{"Typeface name":"Wingdings 2","Dingbat dec":"220","Dingbat hex":"DC","Unicode dec":"128951","Unicode hex":"1F7B7"},{"Typeface name":"Wingdings 2","Dingbat dec":"221","Dingbat hex":"DD","Unicode dec":"128952","Unicode hex":"1F7B8"},{"Typeface name":"Wingdings 2","Dingbat dec":"222","Dingbat hex":"DE","Unicode dec":"128953","Unicode hex":"1F7B9"},{"Typeface name":"Wingdings 2","Dingbat dec":"223","Dingbat hex":"DF","Unicode dec":"128954","Unicode hex":"1F7BA"},{"Typeface name":"Wingdings 2","Dingbat dec":"224","Dingbat hex":"E0","Unicode dec":"128955","Unicode hex":"1F7BB"},{"Typeface name":"Wingdings 2","Dingbat dec":"225","Dingbat hex":"E1","Unicode dec":"128956","Unicode hex":"1F7BC"},{"Typeface name":"Wingdings 2","Dingbat dec":"226","Dingbat hex":"E2","Unicode dec":"128957","Unicode hex":"1F7BD"},{"Typeface name":"Wingdings 2","Dingbat dec":"227","Dingbat hex":"E3","Unicode dec":"128958","Unicode hex":"1F7BE"},{"Typeface name":"Wingdings 2","Dingbat dec":"228","Dingbat hex":"E4","Unicode dec":"128959","Unicode hex":"1F7BF"},{"Typeface name":"Wingdings 2","Dingbat dec":"229","Dingbat hex":"E5","Unicode dec":"128960","Unicode hex":"1F7C0"},{"Typeface name":"Wingdings 2","Dingbat dec":"230","Dingbat hex":"E6","Unicode dec":"128962","Unicode hex":"1F7C2"},{"Typeface name":"Wingdings 2","Dingbat dec":"231","Dingbat hex":"E7","Unicode dec":"128964","Unicode hex":"1F7C4"},{"Typeface name":"Wingdings 2","Dingbat dec":"232","Dingbat hex":"E8","Unicode dec":"128966","Unicode hex":"1F7C6"},{"Typeface name":"Wingdings 2","Dingbat dec":"233","Dingbat hex":"E9","Unicode dec":"128969","Unicode hex":"1F7C9"},{"Typeface name":"Wingdings 2","Dingbat dec":"234","Dingbat hex":"EA","Unicode dec":"128970","Unicode hex":"1F7CA"},{"Typeface name":"Wingdings 2","Dingbat dec":"235","Dingbat hex":"EB","Unicode dec":"10038","Unicode hex":"2736"},{"Typeface name":"Wingdings 2","Dingbat dec":"236","Dingbat hex":"EC","Unicode dec":"128972","Unicode hex":"1F7CC"},{"Typeface name":"Wingdings 2","Dingbat dec":"237","Dingbat hex":"ED","Unicode dec":"128974","Unicode hex":"1F7CE"},{"Typeface name":"Wingdings 2","Dingbat dec":"238","Dingbat hex":"EE","Unicode dec":"128976","Unicode hex":"1F7D0"},{"Typeface name":"Wingdings 2","Dingbat dec":"239","Dingbat hex":"EF","Unicode dec":"128978","Unicode hex":"1F7D2"},{"Typeface name":"Wingdings 2","Dingbat dec":"240","Dingbat hex":"F0","Unicode dec":"10041","Unicode hex":"2739"},{"Typeface name":"Wingdings 2","Dingbat dec":"241","Dingbat hex":"F1","Unicode dec":"128963","Unicode hex":"1F7C3"},{"Typeface name":"Wingdings 2","Dingbat dec":"242","Dingbat hex":"F2","Unicode dec":"128967","Unicode hex":"1F7C7"},{"Typeface name":"Wingdings 2","Dingbat dec":"243","Dingbat hex":"F3","Unicode dec":"10031","Unicode hex":"272F"},{"Typeface name":"Wingdings 2","Dingbat dec":"244","Dingbat hex":"F4","Unicode dec":"128973","Unicode hex":"1F7CD"},{"Typeface name":"Wingdings 2","Dingbat dec":"245","Dingbat hex":"F5","Unicode dec":"128980","Unicode hex":"1F7D4"},{"Typeface name":"Wingdings 2","Dingbat dec":"246","Dingbat hex":"F6","Unicode dec":"11212","Unicode hex":"2BCC"},{"Typeface name":"Wingdings 2","Dingbat dec":"247","Dingbat hex":"F7","Unicode dec":"11213","Unicode hex":"2BCD"},{"Typeface name":"Wingdings 2","Dingbat dec":"248","Dingbat hex":"F8","Unicode dec":"8251","Unicode hex":"203B"},{"Typeface name":"Wingdings 2","Dingbat dec":"249","Dingbat hex":"F9","Unicode dec":"8258","Unicode hex":"2042"},{"Typeface name":"Wingdings 3","Dingbat dec":"32","Dingbat hex":"20","Unicode dec":"32","Unicode hex":"20"},{"Typeface name":"Wingdings 3","Dingbat dec":"33","Dingbat hex":"21","Unicode dec":"11104","Unicode hex":"2B60"},{"Typeface name":"Wingdings 3","Dingbat dec":"34","Dingbat hex":"22","Unicode dec":"11106","Unicode hex":"2B62"},{"Typeface name":"Wingdings 3","Dingbat dec":"35","Dingbat hex":"23","Unicode dec":"11105","Unicode hex":"2B61"},{"Typeface name":"Wingdings 3","Dingbat dec":"36","Dingbat hex":"24","Unicode dec":"11107","Unicode hex":"2B63"},{"Typeface name":"Wingdings 3","Dingbat dec":"37","Dingbat hex":"25","Unicode dec":"11110","Unicode hex":"2B66"},{"Typeface name":"Wingdings 3","Dingbat dec":"38","Dingbat hex":"26","Unicode dec":"11111","Unicode hex":"2B67"},{"Typeface name":"Wingdings 3","Dingbat dec":"39","Dingbat hex":"27","Unicode dec":"11113","Unicode hex":"2B69"},{"Typeface name":"Wingdings 3","Dingbat dec":"40","Dingbat hex":"28","Unicode dec":"11112","Unicode hex":"2B68"},{"Typeface name":"Wingdings 3","Dingbat dec":"41","Dingbat hex":"29","Unicode dec":"11120","Unicode hex":"2B70"},{"Typeface name":"Wingdings 3","Dingbat dec":"42","Dingbat hex":"2A","Unicode dec":"11122","Unicode hex":"2B72"},{"Typeface name":"Wingdings 3","Dingbat dec":"43","Dingbat hex":"2B","Unicode dec":"11121","Unicode hex":"2B71"},{"Typeface name":"Wingdings 3","Dingbat dec":"44","Dingbat hex":"2C","Unicode dec":"11123","Unicode hex":"2B73"},{"Typeface name":"Wingdings 3","Dingbat dec":"45","Dingbat hex":"2D","Unicode dec":"11126","Unicode hex":"2B76"},{"Typeface name":"Wingdings 3","Dingbat dec":"46","Dingbat hex":"2E","Unicode dec":"11128","Unicode hex":"2B78"},{"Typeface name":"Wingdings 3","Dingbat dec":"47","Dingbat hex":"2F","Unicode dec":"11131","Unicode hex":"2B7B"},{"Typeface name":"Wingdings 3","Dingbat dec":"48","Dingbat hex":"30","Unicode dec":"11133","Unicode hex":"2B7D"},{"Typeface name":"Wingdings 3","Dingbat dec":"49","Dingbat hex":"31","Unicode dec":"11108","Unicode hex":"2B64"},{"Typeface name":"Wingdings 3","Dingbat dec":"50","Dingbat hex":"32","Unicode dec":"11109","Unicode hex":"2B65"},{"Typeface name":"Wingdings 3","Dingbat dec":"51","Dingbat hex":"33","Unicode dec":"11114","Unicode hex":"2B6A"},{"Typeface name":"Wingdings 3","Dingbat dec":"52","Dingbat hex":"34","Unicode dec":"11116","Unicode hex":"2B6C"},{"Typeface name":"Wingdings 3","Dingbat dec":"53","Dingbat hex":"35","Unicode dec":"11115","Unicode hex":"2B6B"},{"Typeface name":"Wingdings 3","Dingbat dec":"54","Dingbat hex":"36","Unicode dec":"11117","Unicode hex":"2B6D"},{"Typeface name":"Wingdings 3","Dingbat dec":"55","Dingbat hex":"37","Unicode dec":"11085","Unicode hex":"2B4D"},{"Typeface name":"Wingdings 3","Dingbat dec":"56","Dingbat hex":"38","Unicode dec":"11168","Unicode hex":"2BA0"},{"Typeface name":"Wingdings 3","Dingbat dec":"57","Dingbat hex":"39","Unicode dec":"11169","Unicode hex":"2BA1"},{"Typeface name":"Wingdings 3","Dingbat dec":"58","Dingbat hex":"3A","Unicode dec":"11170","Unicode hex":"2BA2"},{"Typeface name":"Wingdings 3","Dingbat dec":"59","Dingbat hex":"3B","Unicode dec":"11171","Unicode hex":"2BA3"},{"Typeface name":"Wingdings 3","Dingbat dec":"60","Dingbat hex":"3C","Unicode dec":"11172","Unicode hex":"2BA4"},{"Typeface name":"Wingdings 3","Dingbat dec":"61","Dingbat hex":"3D","Unicode dec":"11173","Unicode hex":"2BA5"},{"Typeface name":"Wingdings 3","Dingbat dec":"62","Dingbat hex":"3E","Unicode dec":"11174","Unicode hex":"2BA6"},{"Typeface name":"Wingdings 3","Dingbat dec":"63","Dingbat hex":"3F","Unicode dec":"11175","Unicode hex":"2BA7"},{"Typeface name":"Wingdings 3","Dingbat dec":"64","Dingbat hex":"40","Unicode dec":"11152","Unicode hex":"2B90"},{"Typeface name":"Wingdings 3","Dingbat dec":"65","Dingbat hex":"41","Unicode dec":"11153","Unicode hex":"2B91"},{"Typeface name":"Wingdings 3","Dingbat dec":"66","Dingbat hex":"42","Unicode dec":"11154","Unicode hex":"2B92"},{"Typeface name":"Wingdings 3","Dingbat dec":"67","Dingbat hex":"43","Unicode dec":"11155","Unicode hex":"2B93"},{"Typeface name":"Wingdings 3","Dingbat dec":"68","Dingbat hex":"44","Unicode dec":"11136","Unicode hex":"2B80"},{"Typeface name":"Wingdings 3","Dingbat dec":"69","Dingbat hex":"45","Unicode dec":"11139","Unicode hex":"2B83"},{"Typeface name":"Wingdings 3","Dingbat dec":"70","Dingbat hex":"46","Unicode dec":"11134","Unicode hex":"2B7E"},{"Typeface name":"Wingdings 3","Dingbat dec":"71","Dingbat hex":"47","Unicode dec":"11135","Unicode hex":"2B7F"},{"Typeface name":"Wingdings 3","Dingbat dec":"72","Dingbat hex":"48","Unicode dec":"11140","Unicode hex":"2B84"},{"Typeface name":"Wingdings 3","Dingbat dec":"73","Dingbat hex":"49","Unicode dec":"11142","Unicode hex":"2B86"},{"Typeface name":"Wingdings 3","Dingbat dec":"74","Dingbat hex":"4A","Unicode dec":"11141","Unicode hex":"2B85"},{"Typeface name":"Wingdings 3","Dingbat dec":"75","Dingbat hex":"4B","Unicode dec":"11143","Unicode hex":"2B87"},{"Typeface name":"Wingdings 3","Dingbat dec":"76","Dingbat hex":"4C","Unicode dec":"11151","Unicode hex":"2B8F"},{"Typeface name":"Wingdings 3","Dingbat dec":"77","Dingbat hex":"4D","Unicode dec":"11149","Unicode hex":"2B8D"},{"Typeface name":"Wingdings 3","Dingbat dec":"78","Dingbat hex":"4E","Unicode dec":"11150","Unicode hex":"2B8E"},{"Typeface name":"Wingdings 3","Dingbat dec":"79","Dingbat hex":"4F","Unicode dec":"11148","Unicode hex":"2B8C"},{"Typeface name":"Wingdings 3","Dingbat dec":"80","Dingbat hex":"50","Unicode dec":"11118","Unicode hex":"2B6E"},{"Typeface name":"Wingdings 3","Dingbat dec":"81","Dingbat hex":"51","Unicode dec":"11119","Unicode hex":"2B6F"},{"Typeface name":"Wingdings 3","Dingbat dec":"82","Dingbat hex":"52","Unicode dec":"9099","Unicode hex":"238B"},{"Typeface name":"Wingdings 3","Dingbat dec":"83","Dingbat hex":"53","Unicode dec":"8996","Unicode hex":"2324"},{"Typeface name":"Wingdings 3","Dingbat dec":"84","Dingbat hex":"54","Unicode dec":"8963","Unicode hex":"2303"},{"Typeface name":"Wingdings 3","Dingbat dec":"85","Dingbat hex":"55","Unicode dec":"8997","Unicode hex":"2325"},{"Typeface name":"Wingdings 3","Dingbat dec":"86","Dingbat hex":"56","Unicode dec":"9251","Unicode hex":"2423"},{"Typeface name":"Wingdings 3","Dingbat dec":"87","Dingbat hex":"57","Unicode dec":"9085","Unicode hex":"237D"},{"Typeface name":"Wingdings 3","Dingbat dec":"88","Dingbat hex":"58","Unicode dec":"8682","Unicode hex":"21EA"},{"Typeface name":"Wingdings 3","Dingbat dec":"89","Dingbat hex":"59","Unicode dec":"11192","Unicode hex":"2BB8"},{"Typeface name":"Wingdings 3","Dingbat dec":"90","Dingbat hex":"5A","Unicode dec":"129184","Unicode hex":"1F8A0"},{"Typeface name":"Wingdings 3","Dingbat dec":"91","Dingbat hex":"5B","Unicode dec":"129185","Unicode hex":"1F8A1"},{"Typeface name":"Wingdings 3","Dingbat dec":"92","Dingbat hex":"5C","Unicode dec":"129186","Unicode hex":"1F8A2"},{"Typeface name":"Wingdings 3","Dingbat dec":"93","Dingbat hex":"5D","Unicode dec":"129187","Unicode hex":"1F8A3"},{"Typeface name":"Wingdings 3","Dingbat dec":"94","Dingbat hex":"5E","Unicode dec":"129188","Unicode hex":"1F8A4"},{"Typeface name":"Wingdings 3","Dingbat dec":"95","Dingbat hex":"5F","Unicode dec":"129189","Unicode hex":"1F8A5"},{"Typeface name":"Wingdings 3","Dingbat dec":"96","Dingbat hex":"60","Unicode dec":"129190","Unicode hex":"1F8A6"},{"Typeface name":"Wingdings 3","Dingbat dec":"97","Dingbat hex":"61","Unicode dec":"129191","Unicode hex":"1F8A7"},{"Typeface name":"Wingdings 3","Dingbat dec":"98","Dingbat hex":"62","Unicode dec":"129192","Unicode hex":"1F8A8"},{"Typeface name":"Wingdings 3","Dingbat dec":"99","Dingbat hex":"63","Unicode dec":"129193","Unicode hex":"1F8A9"},{"Typeface name":"Wingdings 3","Dingbat dec":"100","Dingbat hex":"64","Unicode dec":"129194","Unicode hex":"1F8AA"},{"Typeface name":"Wingdings 3","Dingbat dec":"101","Dingbat hex":"65","Unicode dec":"129195","Unicode hex":"1F8AB"},{"Typeface name":"Wingdings 3","Dingbat dec":"102","Dingbat hex":"66","Unicode dec":"129104","Unicode hex":"1F850"},{"Typeface name":"Wingdings 3","Dingbat dec":"103","Dingbat hex":"67","Unicode dec":"129106","Unicode hex":"1F852"},{"Typeface name":"Wingdings 3","Dingbat dec":"104","Dingbat hex":"68","Unicode dec":"129105","Unicode hex":"1F851"},{"Typeface name":"Wingdings 3","Dingbat dec":"105","Dingbat hex":"69","Unicode dec":"129107","Unicode hex":"1F853"},{"Typeface name":"Wingdings 3","Dingbat dec":"106","Dingbat hex":"6A","Unicode dec":"129108","Unicode hex":"1F854"},{"Typeface name":"Wingdings 3","Dingbat dec":"107","Dingbat hex":"6B","Unicode dec":"129109","Unicode hex":"1F855"},{"Typeface name":"Wingdings 3","Dingbat dec":"108","Dingbat hex":"6C","Unicode dec":"129111","Unicode hex":"1F857"},{"Typeface name":"Wingdings 3","Dingbat dec":"109","Dingbat hex":"6D","Unicode dec":"129110","Unicode hex":"1F856"},{"Typeface name":"Wingdings 3","Dingbat dec":"110","Dingbat hex":"6E","Unicode dec":"129112","Unicode hex":"1F858"},{"Typeface name":"Wingdings 3","Dingbat dec":"111","Dingbat hex":"6F","Unicode dec":"129113","Unicode hex":"1F859"},{"Typeface name":"Wingdings 3","Dingbat dec":"112","Dingbat hex":"70","Unicode dec":"9650","Unicode hex":"25B2"},{"Typeface name":"Wingdings 3","Dingbat dec":"113","Dingbat hex":"71","Unicode dec":"9660","Unicode hex":"25BC"},{"Typeface name":"Wingdings 3","Dingbat dec":"114","Dingbat hex":"72","Unicode dec":"9651","Unicode hex":"25B3"},{"Typeface name":"Wingdings 3","Dingbat dec":"115","Dingbat hex":"73","Unicode dec":"9661","Unicode hex":"25BD"},{"Typeface name":"Wingdings 3","Dingbat dec":"116","Dingbat hex":"74","Unicode dec":"9664","Unicode hex":"25C0"},{"Typeface name":"Wingdings 3","Dingbat dec":"117","Dingbat hex":"75","Unicode dec":"9654","Unicode hex":"25B6"},{"Typeface name":"Wingdings 3","Dingbat dec":"118","Dingbat hex":"76","Unicode dec":"9665","Unicode hex":"25C1"},{"Typeface name":"Wingdings 3","Dingbat dec":"119","Dingbat hex":"77","Unicode dec":"9655","Unicode hex":"25B7"},{"Typeface name":"Wingdings 3","Dingbat dec":"120","Dingbat hex":"78","Unicode dec":"9699","Unicode hex":"25E3"},{"Typeface name":"Wingdings 3","Dingbat dec":"121","Dingbat hex":"79","Unicode dec":"9698","Unicode hex":"25E2"},{"Typeface name":"Wingdings 3","Dingbat dec":"122","Dingbat hex":"7A","Unicode dec":"9700","Unicode hex":"25E4"},{"Typeface name":"Wingdings 3","Dingbat dec":"123","Dingbat hex":"7B","Unicode dec":"9701","Unicode hex":"25E5"},{"Typeface name":"Wingdings 3","Dingbat dec":"124","Dingbat hex":"7C","Unicode dec":"128896","Unicode hex":"1F780"},{"Typeface name":"Wingdings 3","Dingbat dec":"125","Dingbat hex":"7D","Unicode dec":"128898","Unicode hex":"1F782"},{"Typeface name":"Wingdings 3","Dingbat dec":"126","Dingbat hex":"7E","Unicode dec":"128897","Unicode hex":"1F781"},{"Typeface name":"Wingdings 3","Dingbat dec":"128","Dingbat hex":"80","Unicode dec":"128899","Unicode hex":"1F783"},{"Typeface name":"Wingdings 3","Dingbat dec":"129","Dingbat hex":"81","Unicode dec":"11205","Unicode hex":"2BC5"},{"Typeface name":"Wingdings 3","Dingbat dec":"130","Dingbat hex":"82","Unicode dec":"11206","Unicode hex":"2BC6"},{"Typeface name":"Wingdings 3","Dingbat dec":"131","Dingbat hex":"83","Unicode dec":"11207","Unicode hex":"2BC7"},{"Typeface name":"Wingdings 3","Dingbat dec":"132","Dingbat hex":"84","Unicode dec":"11208","Unicode hex":"2BC8"},{"Typeface name":"Wingdings 3","Dingbat dec":"133","Dingbat hex":"85","Unicode dec":"11164","Unicode hex":"2B9C"},{"Typeface name":"Wingdings 3","Dingbat dec":"134","Dingbat hex":"86","Unicode dec":"11166","Unicode hex":"2B9E"},{"Typeface name":"Wingdings 3","Dingbat dec":"135","Dingbat hex":"87","Unicode dec":"11165","Unicode hex":"2B9D"},{"Typeface name":"Wingdings 3","Dingbat dec":"136","Dingbat hex":"88","Unicode dec":"11167","Unicode hex":"2B9F"},{"Typeface name":"Wingdings 3","Dingbat dec":"137","Dingbat hex":"89","Unicode dec":"129040","Unicode hex":"1F810"},{"Typeface name":"Wingdings 3","Dingbat dec":"138","Dingbat hex":"8A","Unicode dec":"129042","Unicode hex":"1F812"},{"Typeface name":"Wingdings 3","Dingbat dec":"139","Dingbat hex":"8B","Unicode dec":"129041","Unicode hex":"1F811"},{"Typeface name":"Wingdings 3","Dingbat dec":"140","Dingbat hex":"8C","Unicode dec":"129043","Unicode hex":"1F813"},{"Typeface name":"Wingdings 3","Dingbat dec":"141","Dingbat hex":"8D","Unicode dec":"129044","Unicode hex":"1F814"},{"Typeface name":"Wingdings 3","Dingbat dec":"142","Dingbat hex":"8E","Unicode dec":"129046","Unicode hex":"1F816"},{"Typeface name":"Wingdings 3","Dingbat dec":"143","Dingbat hex":"8F","Unicode dec":"129045","Unicode hex":"1F815"},{"Typeface name":"Wingdings 3","Dingbat dec":"144","Dingbat hex":"90","Unicode dec":"129047","Unicode hex":"1F817"},{"Typeface name":"Wingdings 3","Dingbat dec":"145","Dingbat hex":"91","Unicode dec":"129048","Unicode hex":"1F818"},{"Typeface name":"Wingdings 3","Dingbat dec":"146","Dingbat hex":"92","Unicode dec":"129050","Unicode hex":"1F81A"},{"Typeface name":"Wingdings 3","Dingbat dec":"147","Dingbat hex":"93","Unicode dec":"129049","Unicode hex":"1F819"},{"Typeface name":"Wingdings 3","Dingbat dec":"148","Dingbat hex":"94","Unicode dec":"129051","Unicode hex":"1F81B"},{"Typeface name":"Wingdings 3","Dingbat dec":"149","Dingbat hex":"95","Unicode dec":"129052","Unicode hex":"1F81C"},{"Typeface name":"Wingdings 3","Dingbat dec":"150","Dingbat hex":"96","Unicode dec":"129054","Unicode hex":"1F81E"},{"Typeface name":"Wingdings 3","Dingbat dec":"151","Dingbat hex":"97","Unicode dec":"129053","Unicode hex":"1F81D"},{"Typeface name":"Wingdings 3","Dingbat dec":"152","Dingbat hex":"98","Unicode dec":"129055","Unicode hex":"1F81F"},{"Typeface name":"Wingdings 3","Dingbat dec":"153","Dingbat hex":"99","Unicode dec":"129024","Unicode hex":"1F800"},{"Typeface name":"Wingdings 3","Dingbat dec":"154","Dingbat hex":"9A","Unicode dec":"129026","Unicode hex":"1F802"},{"Typeface name":"Wingdings 3","Dingbat dec":"155","Dingbat hex":"9B","Unicode dec":"129025","Unicode hex":"1F801"},{"Typeface name":"Wingdings 3","Dingbat dec":"156","Dingbat hex":"9C","Unicode dec":"129027","Unicode hex":"1F803"},{"Typeface name":"Wingdings 3","Dingbat dec":"157","Dingbat hex":"9D","Unicode dec":"129028","Unicode hex":"1F804"},{"Typeface name":"Wingdings 3","Dingbat dec":"158","Dingbat hex":"9E","Unicode dec":"129030","Unicode hex":"1F806"},{"Typeface name":"Wingdings 3","Dingbat dec":"159","Dingbat hex":"9F","Unicode dec":"129029","Unicode hex":"1F805"},{"Typeface name":"Wingdings 3","Dingbat dec":"160","Dingbat hex":"A0","Unicode dec":"129031","Unicode hex":"1F807"},{"Typeface name":"Wingdings 3","Dingbat dec":"161","Dingbat hex":"A1","Unicode dec":"129032","Unicode hex":"1F808"},{"Typeface name":"Wingdings 3","Dingbat dec":"162","Dingbat hex":"A2","Unicode dec":"129034","Unicode hex":"1F80A"},{"Typeface name":"Wingdings 3","Dingbat dec":"163","Dingbat hex":"A3","Unicode dec":"129033","Unicode hex":"1F809"},{"Typeface name":"Wingdings 3","Dingbat dec":"164","Dingbat hex":"A4","Unicode dec":"129035","Unicode hex":"1F80B"},{"Typeface name":"Wingdings 3","Dingbat dec":"165","Dingbat hex":"A5","Unicode dec":"129056","Unicode hex":"1F820"},{"Typeface name":"Wingdings 3","Dingbat dec":"166","Dingbat hex":"A6","Unicode dec":"129058","Unicode hex":"1F822"},{"Typeface name":"Wingdings 3","Dingbat dec":"167","Dingbat hex":"A7","Unicode dec":"129060","Unicode hex":"1F824"},{"Typeface name":"Wingdings 3","Dingbat dec":"168","Dingbat hex":"A8","Unicode dec":"129062","Unicode hex":"1F826"},{"Typeface name":"Wingdings 3","Dingbat dec":"169","Dingbat hex":"A9","Unicode dec":"129064","Unicode hex":"1F828"},{"Typeface name":"Wingdings 3","Dingbat dec":"170","Dingbat hex":"AA","Unicode dec":"129066","Unicode hex":"1F82A"},{"Typeface name":"Wingdings 3","Dingbat dec":"171","Dingbat hex":"AB","Unicode dec":"129068","Unicode hex":"1F82C"},{"Typeface name":"Wingdings 3","Dingbat dec":"172","Dingbat hex":"AC","Unicode dec":"129180","Unicode hex":"1F89C"},{"Typeface name":"Wingdings 3","Dingbat dec":"173","Dingbat hex":"AD","Unicode dec":"129181","Unicode hex":"1F89D"},{"Typeface name":"Wingdings 3","Dingbat dec":"174","Dingbat hex":"AE","Unicode dec":"129182","Unicode hex":"1F89E"},{"Typeface name":"Wingdings 3","Dingbat dec":"175","Dingbat hex":"AF","Unicode dec":"129183","Unicode hex":"1F89F"},{"Typeface name":"Wingdings 3","Dingbat dec":"176","Dingbat hex":"B0","Unicode dec":"129070","Unicode hex":"1F82E"},{"Typeface name":"Wingdings 3","Dingbat dec":"177","Dingbat hex":"B1","Unicode dec":"129072","Unicode hex":"1F830"},{"Typeface name":"Wingdings 3","Dingbat dec":"178","Dingbat hex":"B2","Unicode dec":"129074","Unicode hex":"1F832"},{"Typeface name":"Wingdings 3","Dingbat dec":"179","Dingbat hex":"B3","Unicode dec":"129076","Unicode hex":"1F834"},{"Typeface name":"Wingdings 3","Dingbat dec":"180","Dingbat hex":"B4","Unicode dec":"129078","Unicode hex":"1F836"},{"Typeface name":"Wingdings 3","Dingbat dec":"181","Dingbat hex":"B5","Unicode dec":"129080","Unicode hex":"1F838"},{"Typeface name":"Wingdings 3","Dingbat dec":"182","Dingbat hex":"B6","Unicode dec":"129082","Unicode hex":"1F83A"},{"Typeface name":"Wingdings 3","Dingbat dec":"183","Dingbat hex":"B7","Unicode dec":"129081","Unicode hex":"1F839"},{"Typeface name":"Wingdings 3","Dingbat dec":"184","Dingbat hex":"B8","Unicode dec":"129083","Unicode hex":"1F83B"},{"Typeface name":"Wingdings 3","Dingbat dec":"185","Dingbat hex":"B9","Unicode dec":"129176","Unicode hex":"1F898"},{"Typeface name":"Wingdings 3","Dingbat dec":"186","Dingbat hex":"BA","Unicode dec":"129178","Unicode hex":"1F89A"},{"Typeface name":"Wingdings 3","Dingbat dec":"187","Dingbat hex":"BB","Unicode dec":"129177","Unicode hex":"1F899"},{"Typeface name":"Wingdings 3","Dingbat dec":"188","Dingbat hex":"BC","Unicode dec":"129179","Unicode hex":"1F89B"},{"Typeface name":"Wingdings 3","Dingbat dec":"189","Dingbat hex":"BD","Unicode dec":"129084","Unicode hex":"1F83C"},{"Typeface name":"Wingdings 3","Dingbat dec":"190","Dingbat hex":"BE","Unicode dec":"129086","Unicode hex":"1F83E"},{"Typeface name":"Wingdings 3","Dingbat dec":"191","Dingbat hex":"BF","Unicode dec":"129085","Unicode hex":"1F83D"},{"Typeface name":"Wingdings 3","Dingbat dec":"192","Dingbat hex":"C0","Unicode dec":"129087","Unicode hex":"1F83F"},{"Typeface name":"Wingdings 3","Dingbat dec":"193","Dingbat hex":"C1","Unicode dec":"129088","Unicode hex":"1F840"},{"Typeface name":"Wingdings 3","Dingbat dec":"194","Dingbat hex":"C2","Unicode dec":"129090","Unicode hex":"1F842"},{"Typeface name":"Wingdings 3","Dingbat dec":"195","Dingbat hex":"C3","Unicode dec":"129089","Unicode hex":"1F841"},{"Typeface name":"Wingdings 3","Dingbat dec":"196","Dingbat hex":"C4","Unicode dec":"129091","Unicode hex":"1F843"},{"Typeface name":"Wingdings 3","Dingbat dec":"197","Dingbat hex":"C5","Unicode dec":"129092","Unicode hex":"1F844"},{"Typeface name":"Wingdings 3","Dingbat dec":"198","Dingbat hex":"C6","Unicode dec":"129094","Unicode hex":"1F846"},{"Typeface name":"Wingdings 3","Dingbat dec":"199","Dingbat hex":"C7","Unicode dec":"129093","Unicode hex":"1F845"},{"Typeface name":"Wingdings 3","Dingbat dec":"200","Dingbat hex":"C8","Unicode dec":"129095","Unicode hex":"1F847"},{"Typeface name":"Wingdings 3","Dingbat dec":"201","Dingbat hex":"C9","Unicode dec":"11176","Unicode hex":"2BA8"},{"Typeface name":"Wingdings 3","Dingbat dec":"202","Dingbat hex":"CA","Unicode dec":"11177","Unicode hex":"2BA9"},{"Typeface name":"Wingdings 3","Dingbat dec":"203","Dingbat hex":"CB","Unicode dec":"11178","Unicode hex":"2BAA"},{"Typeface name":"Wingdings 3","Dingbat dec":"204","Dingbat hex":"CC","Unicode dec":"11179","Unicode hex":"2BAB"},{"Typeface name":"Wingdings 3","Dingbat dec":"205","Dingbat hex":"CD","Unicode dec":"11180","Unicode hex":"2BAC"},{"Typeface name":"Wingdings 3","Dingbat dec":"206","Dingbat hex":"CE","Unicode dec":"11181","Unicode hex":"2BAD"},{"Typeface name":"Wingdings 3","Dingbat dec":"207","Dingbat hex":"CF","Unicode dec":"11182","Unicode hex":"2BAE"},{"Typeface name":"Wingdings 3","Dingbat dec":"208","Dingbat hex":"D0","Unicode dec":"11183","Unicode hex":"2BAF"},{"Typeface name":"Wingdings 3","Dingbat dec":"209","Dingbat hex":"D1","Unicode dec":"129120","Unicode hex":"1F860"},{"Typeface name":"Wingdings 3","Dingbat dec":"210","Dingbat hex":"D2","Unicode dec":"129122","Unicode hex":"1F862"},{"Typeface name":"Wingdings 3","Dingbat dec":"211","Dingbat hex":"D3","Unicode dec":"129121","Unicode hex":"1F861"},{"Typeface name":"Wingdings 3","Dingbat dec":"212","Dingbat hex":"D4","Unicode dec":"129123","Unicode hex":"1F863"},{"Typeface name":"Wingdings 3","Dingbat dec":"213","Dingbat hex":"D5","Unicode dec":"129124","Unicode hex":"1F864"},{"Typeface name":"Wingdings 3","Dingbat dec":"214","Dingbat hex":"D6","Unicode dec":"129125","Unicode hex":"1F865"},{"Typeface name":"Wingdings 3","Dingbat dec":"215","Dingbat hex":"D7","Unicode dec":"129127","Unicode hex":"1F867"},{"Typeface name":"Wingdings 3","Dingbat dec":"216","Dingbat hex":"D8","Unicode dec":"129126","Unicode hex":"1F866"},{"Typeface name":"Wingdings 3","Dingbat dec":"217","Dingbat hex":"D9","Unicode dec":"129136","Unicode hex":"1F870"},{"Typeface name":"Wingdings 3","Dingbat dec":"218","Dingbat hex":"DA","Unicode dec":"129138","Unicode hex":"1F872"},{"Typeface name":"Wingdings 3","Dingbat dec":"219","Dingbat hex":"DB","Unicode dec":"129137","Unicode hex":"1F871"},{"Typeface name":"Wingdings 3","Dingbat dec":"220","Dingbat hex":"DC","Unicode dec":"129139","Unicode hex":"1F873"},{"Typeface name":"Wingdings 3","Dingbat dec":"221","Dingbat hex":"DD","Unicode dec":"129140","Unicode hex":"1F874"},{"Typeface name":"Wingdings 3","Dingbat dec":"222","Dingbat hex":"DE","Unicode dec":"129141","Unicode hex":"1F875"},{"Typeface name":"Wingdings 3","Dingbat dec":"223","Dingbat hex":"DF","Unicode dec":"129143","Unicode hex":"1F877"},{"Typeface name":"Wingdings 3","Dingbat dec":"224","Dingbat hex":"E0","Unicode dec":"129142","Unicode hex":"1F876"},{"Typeface name":"Wingdings 3","Dingbat dec":"225","Dingbat hex":"E1","Unicode dec":"129152","Unicode hex":"1F880"},{"Typeface name":"Wingdings 3","Dingbat dec":"226","Dingbat hex":"E2","Unicode dec":"129154","Unicode hex":"1F882"},{"Typeface name":"Wingdings 3","Dingbat dec":"227","Dingbat hex":"E3","Unicode dec":"129153","Unicode hex":"1F881"},{"Typeface name":"Wingdings 3","Dingbat dec":"228","Dingbat hex":"E4","Unicode dec":"129155","Unicode hex":"1F883"},{"Typeface name":"Wingdings 3","Dingbat dec":"229","Dingbat hex":"E5","Unicode dec":"129156","Unicode hex":"1F884"},{"Typeface name":"Wingdings 3","Dingbat dec":"230","Dingbat hex":"E6","Unicode dec":"129157","Unicode hex":"1F885"},{"Typeface name":"Wingdings 3","Dingbat dec":"231","Dingbat hex":"E7","Unicode dec":"129159","Unicode hex":"1F887"},{"Typeface name":"Wingdings 3","Dingbat dec":"232","Dingbat hex":"E8","Unicode dec":"129158","Unicode hex":"1F886"},{"Typeface name":"Wingdings 3","Dingbat dec":"233","Dingbat hex":"E9","Unicode dec":"129168","Unicode hex":"1F890"},{"Typeface name":"Wingdings 3","Dingbat dec":"234","Dingbat hex":"EA","Unicode dec":"129170","Unicode hex":"1F892"},{"Typeface name":"Wingdings 3","Dingbat dec":"235","Dingbat hex":"EB","Unicode dec":"129169","Unicode hex":"1F891"},{"Typeface name":"Wingdings 3","Dingbat dec":"236","Dingbat hex":"EC","Unicode dec":"129171","Unicode hex":"1F893"},{"Typeface name":"Wingdings 3","Dingbat dec":"237","Dingbat hex":"ED","Unicode dec":"129172","Unicode hex":"1F894"},{"Typeface name":"Wingdings 3","Dingbat dec":"238","Dingbat hex":"EE","Unicode dec":"129174","Unicode hex":"1F896"},{"Typeface name":"Wingdings 3","Dingbat dec":"239","Dingbat hex":"EF","Unicode dec":"129173","Unicode hex":"1F895"},{"Typeface name":"Wingdings 3","Dingbat dec":"240","Dingbat hex":"F0","Unicode dec":"129175","Unicode hex":"1F897"}]},function(e,t){t.uriToZipEntryName=function(e,t){return"/"===t.charAt(0)?t.substr(1):e+"/"+t},t.replaceFragment=function(e,t){var n=e.indexOf("#");-1!==n&&(e=e.substring(0,n));return e+"#"+t}},function(e,t,n){t.DocumentXmlReader=function(e){var t=e.bodyReader;return{convertXmlToDocument:function(n){var o=n.first("w:body");if(null==o)throw new Error("Could not find the body element: are you sure this is a docx file?");var a=t.readXmlElements(o.children).map((function(t){return new i.Document(t,{notes:e.notes,comments:e.comments})}));return new r(a.value,a.messages)}}};var i=n(35),r=n(23).Result},function(e,t){function n(e){var t={};e.forEach((function(e){t[e.relationshipId]=e.target}));var n={};return e.forEach((function(e){n[e.type]||(n[e.type]=[]),n[e.type].push(e.target)})),{findTargetByRelationshipId:function(e){return t[e]},findTargetsByType:function(e){return n[e]||[]}}}t.readRelationships=function(e){var t=[];return e.children.forEach((function(e){if("relationships:Relationship"===e.name){var n={relationshipId:e.attributes.Id,target:e.attributes.Target,type:e.attributes.Type};t.push(n)}})),new n(t)},t.defaultValue=new n([]),t.Relationships=n},function(e,t){t.readContentTypesFromXml=function(e){var t={},n={};return e.children.forEach((function(e){if("content-types:Default"===e.name&&(t[e.attributes.Extension]=e.attributes.ContentType),"content-types:Override"===e.name){var i=e.attributes.PartName;"/"===i.charAt(0)&&(i=i.substring(1)),n[i]=e.attributes.ContentType}})),i(n,t)};var n={png:"png",gif:"gif",jpeg:"jpeg",jpg:"jpeg",tif:"tiff",tiff:"tiff",bmp:"bmp"};function i(e,t){return{findContentType:function(i){var r=e[i];if(r)return r;var o=i.split("."),a=o[o.length-1];if(t.hasOwnProperty(a))return t[a];var c=n[a.toLowerCase()];return c?"image/"+c:null}}}t.defaultContentTypes=i({},{})},function(e,t,n){var i=n(7);function r(e,t,n){var r=i.flatten(i.values(t).map((function(e){return i.values(e.levels)}))),o=i.indexBy(r.filter((function(e){return null!=e.paragraphStyleId})),"paragraphStyleId");return{findLevel:function i(r,o){var a=e[r];if(a){var c=t[a.abstractNumId];return c?null==c.numStyleLink?t[a.abstractNumId].levels[o]:i(n.findNumberingStyleById(c.numStyleLink).numId,o):null}return null},findLevelByParagraphStyleId:function(e){return o[e]||null}}}t.readNumberingXml=function(e,t){if(!t||!t.styles)throw new Error("styles is missing");var n=function(e){var t={};return e.getElementsByTagName("w:abstractNum").forEach((function(e){var n=e.attributes["w:abstractNumId"];t[n]=function(e){var t={};e.getElementsByTagName("w:lvl").forEach((function(e){var n=e.attributes["w:ilvl"],i=e.firstOrEmpty("w:numFmt").attributes["w:val"],r=e.firstOrEmpty("w:pStyle").attributes["w:val"];t[n]={isOrdered:"bullet"!==i,level:n,paragraphStyleId:r}}));var n=e.firstOrEmpty("w:numStyleLink").attributes["w:val"];return{levels:t,numStyleLink:n}}(e)})),t}(e);return new r(function(e){var t={};return e.getElementsByTagName("w:num").forEach((function(e){var n=e.attributes["w:numId"],i=e.first("w:abstractNumId").attributes["w:val"];t[n]={abstractNumId:i}})),t}(e),n,t.styles)},t.Numbering=r,t.defaultNumbering=new r({},{})},function(e,t){function n(e,t,n,i){return{findParagraphStyleById:function(t){return e[t]},findCharacterStyleById:function(e){return t[e]},findTableStyleById:function(e){return n[e]},findNumberingStyleById:function(e){return i[e]}}}t.readStylesXml=function(e){var t={},i={},r={},o={},a={paragraph:t,character:i,table:r};return e.getElementsByTagName("w:style").forEach((function(e){var t=function(e){var t=e.attributes["w:type"],n=e.attributes["w:styleId"],i=function(e){var t=e.first("w:name");return t?t.attributes["w:val"]:null}(e);return{type:t,styleId:n,name:i}}(e);if("numbering"===t.type)o[t.styleId]=function(e){return{numId:e.firstOrEmpty("w:pPr").firstOrEmpty("w:numPr").firstOrEmpty("w:numId").attributes["w:val"]}}(e);else{var n=a[t.type];n&&(n[t.styleId]=t)}})),new n(t,i,r,o)},t.Styles=n,t.defaultStyles=new n({},{}),n.EMPTY=new n({},{},{},{})},function(e,t,n){var i=n(35),r=n(23).Result;function o(e,t){function n(e){var t=e.attributes["w:type"];return"continuationSeparator"!==t&&"separator"!==t}function o(n){var r=n.attributes["w:id"];return t.readXmlElements(n.children).map((function(t){return i.Note({noteType:e,noteId:r,body:t})}))}return function(t){return r.combine(t.getElementsByTagName("w:"+e).filter(n).map(o))}}t.createFootnotesReader=o.bind(this,"footnote"),t.createEndnotesReader=o.bind(this,"endnote")},function(e,t,n){var i=n(35),r=n(23).Result;t.createCommentsReader=function(e){function t(t){var n=t.attributes["w:id"];function r(e){return(t.attributes[e]||"").trim()||null}return e.readXmlElements(t.children).map((function(e){return i.comment({commentId:n,body:e,authorName:r("w:author"),authorInitials:r("w:initials")})}))}return function(e){return r.combine(e.getElementsByTagName("w:comment").map(t))}}},function(e,t,n){var i=n(27);t.Files=function(){return{read:function(e){return i.reject(new Error("could not open external image: '"+e+"'\ncannot open linked files from a web browser"))}}}},function(e,t,n){var i=n(7),r=n(27),o=n(277);t.writeStyleMap=function(e,t){return e.write("mammoth/style-map",t),function(e){var t="word/_rels/document.xml.rels",n="http://schemas.openxmlformats.org/package/2006/relationships";return e.read(t,"utf8").then(o.readString).then((function(i){a(i.children,"{http://schemas.openxmlformats.org/package/2006/relationships}Relationship","Id",{Id:"rMammothStyleMap",Type:"http://schemas.zwobble.org/mammoth/style-map",Target:"/mammoth/style-map"});var r={"":n};return e.write(t,o.writeString(i,r))}))}(e).then((function(){return function(e){var t="[Content_Types].xml",n="http://schemas.openxmlformats.org/package/2006/content-types";return e.read(t,"utf8").then(o.readString).then((function(i){a(i.children,"{http://schemas.openxmlformats.org/package/2006/content-types}Override","PartName",{PartName:"/mammoth/style-map",ContentType:"text/prs.mammoth.style-map"});var r={"":n};return e.write(t,o.writeString(i,r))}))}(e)}))},t.readStyleMap=function(e){return e.exists("mammoth/style-map")?e.read("mammoth/style-map","utf8"):r.resolve(null)};function a(e,t,n,r){var a=i.find(e,(function(e){return e.name===t&&e.attributes[n]===r[n]}));a?a.attributes=r:e.push(o.element(t,r))}},function(e,t,n){var i=n(7),r=n(27),o=n(35),a=n(72),c=n(23),s=n(283),u=n(73),d=n(449);function l(e,t){var n=1,l=[],m=[],y=void 0===(e=i.extend({ignoreEmptyParagraphs:!0},e)).idPrefix?"":e.idPrefix,b=e.ignoreEmptyParagraphs,v=a.topLevelElement("p"),_=e.styleMap||[];function x(e,t,n){return p(e,(function(e){return D(e,t,n)}))}function D(e,t,n){if(!n)throw new Error("options not set");var i=I[e.type];return i?i(e,t,n):[]}function w(e,t){var n=U({type:e});return n||(t?a.element(t,{},{fresh:!1}):a.empty)}function U(e,t){var n=T(e);return n?n.to:t}function T(e){for(var t=0;t<_.length;t++)if(_[t].from.matches(e))return _[t]}function E(e){return C(e.noteType,e.noteId)}function k(e){return S(e.noteType,e.noteId)}function C(e,t){return F(e+"-"+t)}function S(e,t){return F(e+"-ref-"+t)}function F(e){return y+e}var A=a.elements([a.element("table",{},{fresh:!0})]);function O(e,t,n){var i=e.label,r=e.comment,o=x(r.body,t,n).concat([u.nonFreshElement("p",{},[u.text(" "),u.freshElement("a",{href:"#"+S("comment",r.commentId)},[u.text("↑")])])]);return[u.freshElement("dt",{id:C("comment",r.commentId)},[u.text("Comment "+i)]),u.freshElement("dd",{},o)]}var W,B,I={document:function(e,t,n){var i=x(e.children,t,n),r=x(l.map((function(t){return e.notes.resolve(t)})),t,n);return i.concat([u.freshElement("ol",{},r),u.freshElement("dl",{},p(m,(function(e){return O(e,t,n)})))])},paragraph:function(e,t,n){return function(e,t){var n=T(e);return n?n.to:(e.styleId&&t.push(h("paragraph",e)),v)}(e,t).wrap((function(){var i=x(e.children,t,n);return b?i:[u.forceWrite].concat(i)}))},run:function(e,t,n){var i=function(){return x(e.children,t,n)},r=[];e.isSmallCaps&&r.push(w("smallCaps")),e.isAllCaps&&r.push(w("allCaps")),e.isStrikethrough&&r.push(w("strikethrough","s")),e.isUnderline&&r.push(w("underline")),e.verticalAlignment===o.verticalAlignment.subscript&&r.push(a.element("sub",{},{fresh:!1})),e.verticalAlignment===o.verticalAlignment.superscript&&r.push(a.element("sup",{},{fresh:!1})),e.isItalic&&r.push(w("italic","em")),e.isBold&&r.push(w("bold","strong"));var c=a.empty,s=T(e);return s?c=s.to:e.styleId&&t.push(h("run",e)),r.push(c),r.forEach((function(e){i=e.wrap.bind(e,i)})),i()},text:function(e,t,n){return[u.text(e.value)]},tab:function(e,t,n){return[u.text("\t")]},hyperlink:function(e,t,n){var i={href:e.anchor?"#"+F(e.anchor):e.href};null!=e.targetFrame&&(i.target=e.targetFrame);var r=x(e.children,t,n);return[u.nonFreshElement("a",i,r)]},bookmarkStart:function(e,t,n){return[u.freshElement("a",{id:F(e.name)},[u.forceWrite])]},noteReference:function(e,t,i){l.push(e);var r=u.freshElement("a",{href:"#"+E(e),id:k(e)},[u.text("["+n+++"]")]);return[u.freshElement("sup",{},[r])]},note:function(e,t,n){var i=x(e.body,t,n),r=u.elementWithTag(a.element("p",{},{fresh:!1}),[u.text(" "),u.freshElement("a",{href:"#"+k(e)},[u.text("↑")])]),o=i.concat([r]);return u.freshElement("li",{id:E(e)},o)},commentReference:function(e,n,i){return U(e,a.ignore).wrap((function(){var n=t[e.commentId],i=m.length+1,r="["+g(n)+i+"]";return m.push({label:r,comment:n}),[u.freshElement("a",{href:"#"+C("comment",e.commentId),id:S("comment",e.commentId)},[u.text(r)])]}))},comment:O,image:(B=e.convertImage||s.dataUri,W=function(e,t){return r.attempt((function(){return B(e,t)})).caught((function(e){return t.push(c.error(e)),[]}))},function(e,t,n){return[{type:"deferred",id:f++,value:function(){return W(e,t,n)}}]}),table:function(e,t,n){return U(e,A).wrap((function(){return function(e,t,n){var r,a=i.findIndex(e.children,(function(e){return!e.type===o.types.tableRow||!e.isHeader}));-1===a&&(a=e.children.length);if(0===a)r=x(e.children,t,i.extend({},n,{isTableHeader:!1}));else{var c=x(e.children.slice(0,a),t,i.extend({},n,{isTableHeader:!0})),s=x(e.children.slice(a),t,i.extend({},n,{isTableHeader:!1}));r=[u.freshElement("thead",{},c),u.freshElement("tbody",{},s)]}return[u.forceWrite].concat(r)}(e,t,n)}))},tableRow:function(e,t,n){var i=x(e.children,t,n);return[u.freshElement("tr",{},[u.forceWrite].concat(i))]},tableCell:function(e,t,n){var i=n.isTableHeader?"th":"td",r=x(e.children,t,n),o={};return 1!==e.colSpan&&(o.colspan=e.colSpan.toString()),1!==e.rowSpan&&(o.rowspan=e.rowSpan.toString()),[u.freshElement(i,o,[u.forceWrite].concat(r))]},break:function(e,t,n){return function(e){var t=T(e);return t?t.to:"line"===e.breakType?a.topLevelElement("br"):a.empty}(e).wrap((function(){return[]}))}};return{convertToHtml:function(t){var n=[],o=D(t,n,{}),a=[];!function e(t,n){t.forEach((function(t){n(t),t.children&&e(t.children,n)}))}(o,(function(e){"deferred"===e.type&&a.push(e)}));var s={};return r.mapSeries(a,(function(e){return e.value().then((function(t){s[e.id]=t}))})).then((function(){var t=d.writer({prettyPrint:e.prettyPrint,outputFormat:e.outputFormat});return u.write(t,u.simplify(function e(t){return p(t,(function(t){return"deferred"===t.type?s[t.id]:t.children?[i.extend({},t,{children:e(t.children)})]:[t]}))}(o))),new c.Result(t.asString(),n)}))}}}t.DocumentConverter=function(e){return{convertToHtml:function(t){var n=i.indexBy(t.type===o.types.document?t.comments:[],"commentId");return new l(e,n).convertToHtml(t)}}};var f=1;function h(e,t){return c.warning("Unrecognised "+e+" style: '"+t.styleName+"' (Style ID: "+t.styleId+")")}function p(e,t){return i.flatten(e.map(t),!0)}var g=t.commentAuthorLabel=function(e){return e.authorInitials||""}},function(e,t,n){var i=n(7),r=n(282);function o(e){var t=[];return e.map(a).forEach((function(e){!function e(t,n){var i=t[t.length-1];"element"===n.type&&!n.tag.fresh&&i&&"element"===i.type&&n.tag.matchesElement(i.tag)?(n.tag.separator&&e(i.children,r.text(n.tag.separator)),n.children.forEach((function(t){e(i.children,t)}))):t.push(n)}(t,e)})),t}function a(e){return c[e.type](e)}var c={element:function(e){return r.elementWithTag(e.tag,o(e.children))},text:s,forceWrite:s};function s(e){return e}function u(e){return t=e,n=function(e){return d[e.type](e)},i.flatten(i.map(t,n),!0);var t,n}var d={element:function(e){var t=u(e.children);return 0!==t.length||r.isVoidElement(e)?[r.elementWithTag(e.tag,t)]:[]},text:function(e){return 0===e.value.length?[]:[e]},forceWrite:function(e){return[e]}};e.exports=function(e){return o(u(e))}},function(e,t,n){var i=n(450),r=n(451);t.writer=function(e){return"markdown"===(e=e||{}).outputFormat?r.writer():i.writer(e)}},function(e,t,n){var i=n(7);t.writer=function(e){return(e=e||{}).prettyPrint?function(){var e=0,t=[],n=!0,a=!1,c=o();function s(){if(a=!1,!n&&(0===t.length||r[t[t.length-1]])&&!u()){c._append("\n");for(var i=0;i<e;i++)c._append("  ")}}function u(){return i.some(t,(function(e){return"pre"===e}))}return{asString:c.asString,open:function(i,o){r[i]&&s(),t.push(i),c.open(i,o),r[i]&&e++,n=!1},close:function(n){r[n]&&(e--,s()),t.pop(),c.close(n)},text:function(e){a||(s(),a=!0);var t=u()?e:e.replace("\n","\n  ");c.text(t)},selfClosing:function(e,t){s(),c.selfClosing(e,t)}}}():o()};var r={div:!0,p:!0,ul:!0,li:!0};function o(){var e=[];function t(e){return i.map(e,(function(e,t){return" "+t+'="'+function(e){return e.replace(/&/g,"&amp;").replace(/"/g,"&quot;").replace(/</g,"&lt;").replace(/>/g,"&gt;")}(e)+'"'})).join("")}return{asString:function(){return e.join("")},open:function(n,i){var r=t(i);e.push("<"+n+r+">")},close:function(t){e.push("</"+t+">")},text:function(t){e.push(function(e){return e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;")}(t))},selfClosing:function(n,i){var r=t(i);e.push("<"+n+r+" />")},_append:function(t){e.push(t)}}}},function(e,t,n){var i=n(7);function r(e){return o(e,e)}function o(e,t){return function(){return{start:e,end:t}}}function a(e){return function(t,n){return{start:n?"\n":"",end:n?"":"\n",list:{isOrdered:e.isOrdered,indent:n?n.indent+1:0,count:0}}}}var c={p:o("","\n\n"),br:o("","  \n"),ul:a({isOrdered:!1}),ol:a({isOrdered:!0}),li:function(e,t,n){(t=t||{indent:0,isOrdered:!1,count:0}).count++,n.hasClosed=!1;var i=t.isOrdered?t.count+".":"-";return{start:s("\t",t.indent)+i+" ",end:function(){if(!n.hasClosed)return n.hasClosed=!0,"\n"}}},strong:r("__"),em:r("*"),a:function(e){var t=e.href||"";return t?{start:"[",end:"]("+t+")",anchorPosition:"before"}:{}},img:function(e){var t=e.src||"",n=e.alt||"";return t||n?{start:"!["+n+"]("+t+")"}:{}}};function s(e,t){return new Array(t+1).join(e)}!function(){for(var e=1;e<=6;e++)c["h"+e]=o(s("#",e)+" ","\n\n")}(),t.writer=function(){var e=[],t=[],n=null,r={};function o(i,o){o=o||{};var s=(c[i]||function(){return{}})(o,n,r);t.push({end:s.end,list:n}),s.list&&(n=s.list);var u="before"===s.anchorPosition;u&&a(o),e.push(s.start||""),u||a(o)}function a(t){t.id&&e.push('<a id="'+t.id+'"></a>')}function s(r){var o=t.pop();n=o.list;var a=i.isFunction(o.end)?o.end():o.end;e.push(a||"")}return{asString:function(){return e.join("")},open:o,close:s,text:function(t){e.push(function(e){return e.replace(/\\/g,"\\\\").replace(/([\`\*_\{\}\[\]\(\)\#\+\-\.\!])/g,"\\$1")}(t))},selfClosing:function(e,t){o(e,t),s()}}}},function(e,t,n){var i=n(35);t.convertElementToRawText=function e(t){if("text"===t.type)return t.value;if(t.type===i.types.tab)return"\t";var n="paragraph"===t.type?"\n\n":"";return(t.children||[]).map(e).join("")+n}},function(e,t,n){var i=n(7),r=n(284),o=n(463),a=n(72),c=n(464).tokenise,s=n(23);function u(){var e=r.rules.sequence,t=function(e,t){return r.rules.then(r.rules.token("identifier",e),(function(){return t}))},n=t("p",o.paragraph),a=t("r",o.run),c=r.rules.firstOf("p or r or table",n,a),s=r.rules.sequence(r.rules.tokenOfType("dot"),r.rules.sequence.cut(),r.rules.sequence.capture(l)).map((function(e){return{styleId:e}})),u=r.rules.firstOf("style name matcher",r.rules.then(r.rules.sequence(r.rules.tokenOfType("equals"),r.rules.sequence.cut(),r.rules.sequence.capture(h)).head(),(function(e){return{styleName:o.equalTo(e)}})),r.rules.then(r.rules.sequence(r.rules.tokenOfType("startsWith"),r.rules.sequence.cut(),r.rules.sequence.capture(h)).head(),(function(e){return{styleName:o.startsWith(e)}}))),d=r.rules.sequence(r.rules.tokenOfType("open-square-bracket"),r.rules.sequence.cut(),r.rules.token("identifier","style-name"),r.rules.sequence.capture(u),r.rules.tokenOfType("close-square-bracket")).head(),p=r.rules.firstOf("list type",t("ordered-list",{isOrdered:!0}),t("unordered-list",{isOrdered:!1})),g=e(r.rules.tokenOfType("colon"),e.capture(p),e.cut(),r.rules.tokenOfType("open-paren"),e.capture(f),r.rules.tokenOfType("close-paren")).map((function(e,t){return{list:{isOrdered:e.isOrdered,levelIndex:t-1}}}));function m(e){var t=r.rules.firstOf.apply(r.rules.firstOf,["matcher suffix"].concat(e)),n=r.rules.zeroOrMore(t);return r.rules.then(n,(function(e){var t={};return e.forEach((function(e){i.extend(t,e)})),t}))}var y=e(e.capture(c),e.capture(m([s,d,g]))).map((function(e,t){return e(t)})),b=e(r.rules.token("identifier","table"),e.capture(m([s,d]))).map((function(e){return o.table(e)})),v=t("b",o.bold),_=t("i",o.italic),x=t("u",o.underline),D=t("strike",o.strikethrough),w=t("all-caps",o.allCaps),U=t("small-caps",o.smallCaps),T=t("comment-reference",o.commentReference),E=e(r.rules.token("identifier","br"),e.cut(),r.rules.tokenOfType("open-square-bracket"),r.rules.token("identifier","type"),r.rules.tokenOfType("equals"),e.capture(h),r.rules.tokenOfType("close-square-bracket")).map((function(e){switch(e){case"line":return o.lineBreak;case"page":return o.pageBreak;case"column":return o.columnBreak}}));return r.rules.firstOf("element type",y,b,v,_,x,D,w,U,T,E)}function d(){var e=r.rules.sequence.capture,t=r.rules.tokenOfType("whitespace"),n=r.rules.then(r.rules.optional(r.rules.sequence(r.rules.tokenOfType("colon"),r.rules.token("identifier","fresh"))),(function(e){return e.map((function(){return!0})).valueOrElse(!1)})),i=r.rules.then(r.rules.optional(r.rules.sequence(r.rules.tokenOfType("colon"),r.rules.token("identifier","separator"),r.rules.tokenOfType("open-paren"),e(h),r.rules.tokenOfType("close-paren")).head()),(function(e){return e.valueOrElse("")})),o=r.rules.oneOrMoreWithSeparator(l,r.rules.tokenOfType("choice")),c=r.rules.sequence(e(o),e(r.rules.zeroOrMore(b)),e(n),e(i)).map((function(e,t,n,i){var r={},o={};return t.forEach((function(e){e.append&&r[e.name]?r[e.name]+=" "+e.value:r[e.name]=e.value})),n&&(o.fresh=!0),i&&(o.separator=i),a.element(e,r,o)}));return r.rules.firstOf("html path",r.rules.then(r.rules.tokenOfType("bang"),(function(){return a.ignore})),r.rules.then(r.rules.zeroOrMoreWithSeparator(c,r.rules.sequence(t,r.rules.tokenOfType("gt"),t)),a.elements))}t.readHtmlPath=function(e){return v(d(),e)},t.readDocumentMatcher=function(e){return v(u(),e)},t.readStyle=function(e){return v(D,e)};var l=r.rules.then(r.rules.tokenOfType("identifier"),g),f=r.rules.tokenOfType("integer"),h=r.rules.then(r.rules.tokenOfType("string"),g),p={n:"\n",r:"\r",t:"\t"};function g(e){return e.replace(/\\(.)/g,(function(e,t){return p[t]||t}))}var m=r.rules.sequence(r.rules.tokenOfType("open-square-bracket"),r.rules.sequence.cut(),r.rules.sequence.capture(l),r.rules.tokenOfType("equals"),r.rules.sequence.capture(h),r.rules.tokenOfType("close-square-bracket")).map((function(e,t){return{name:e,value:t,append:!1}})),y=r.rules.sequence(r.rules.tokenOfType("dot"),r.rules.sequence.cut(),r.rules.sequence.capture(l)).map((function(e){return{name:"class",value:e,append:!0}})),b=r.rules.firstOf("attribute or class",m,y);function v(e,t){var n=c(t),i=r.Parser().parseTokens(e,n);return i.isSuccess()?s.success(i.value()):new s.Result(null,[s.warning(_(t,i))])}function _(e,t){return"Did not understand this style mapping, so ignored it: "+e+"\n"+t.errors().map(x).join("\n")}function x(e){return"Error was at character number "+e.characterNumber()+": Expected "+e.expected+" but got "+e.actual}var D=r.rules.sequence(r.rules.sequence.capture(u()),r.rules.tokenOfType("whitespace"),r.rules.tokenOfType("arrow"),r.rules.sequence.capture(r.rules.optional(r.rules.sequence(r.rules.tokenOfType("whitespace"),r.rules.sequence.capture(d())).head())),r.rules.tokenOfType("end")).map((function(e,t){return{from:e,to:t.valueOrElse(a.empty)}}))},function(e,t,n){var i=n(455);t.Parser=function(e){return{parseTokens:function(e,t){return e(new i(t))}}}},function(e,t){var n=e.exports=function(e,t){this._tokens=e,this._startIndex=t||0};n.prototype.head=function(){return this._tokens[this._startIndex]},n.prototype.tail=function(e){return new n(this._tokens,this._startIndex+1)},n.prototype.toArray=function(){return this._tokens.slice(this._startIndex)},n.prototype.end=function(){return this._tokens[this._tokens.length-1]},n.prototype.to=function(e){var t=this.head().source,n=e.head()||e.end();return t.to(n.source)}},function(e,t){function n(e){return"function"==typeof e?e():e}t.none=Object.create({value:function(){throw new Error("Called value on none")},isNone:function(){return!0},isSome:function(){return!1},map:function(){return t.none},flatMap:function(){return t.none},filter:function(){return t.none},toArray:function(){return[]},orElse:n,valueOrElse:n}),t.some=function(e){return new i(e)};var i=function(e){this._value=e};i.prototype.value=function(){return this._value},i.prototype.isNone=function(){return!1},i.prototype.isSome=function(){return!0},i.prototype.map=function(e){return new i(e(this._value))},i.prototype.flatMap=function(e){return e(this._value)},i.prototype.filter=function(e){return e(this._value)?this:t.none},i.prototype.toArray=function(){return[this._value]},i.prototype.orElse=function(e){return this},i.prototype.valueOrElse=function(e){return this._value},t.isOption=function(e){return e===t.none||e instanceof i},t.fromNullable=function(e){return null==e?t.none:new i(e)}},function(e,t){t.fromArray=function(e){var t=0,i=function(){return t<e.length};return new n({hasNext:i,next:function(){if(i())return e[t++];throw new Error("No more elements")}})};var n=function(e){this._iterator=e};n.prototype.map=function(e){var t=this._iterator;return new n({hasNext:function(){return t.hasNext()},next:function(){return e(t.next())}})},n.prototype.filter=function(e){var t,i=this._iterator,r=!1,o=!1,a=function(){if(!r)for(r=!0,o=!1;i.hasNext()&&!o;)t=i.next(),o=e(t)};return new n({hasNext:function(){return a(),o},next:function(){return a(),r=!1,t}})},n.prototype.first=function(){var e=this._iterator;return this._iterator.hasNext()?e.next():null},n.prototype.toArray=function(){for(var e=[];this._iterator.hasNext();)e.push(this._iterator.next());return e}},function(e,t,n){(function(e){var i=Object.getOwnPropertyDescriptors||function(e){for(var t=Object.keys(e),n={},i=0;i<t.length;i++)n[t[i]]=Object.getOwnPropertyDescriptor(e,t[i]);return n},r=/%[sdj%]/g;t.format=function(e){if(!y(e)){for(var t=[],n=0;n<arguments.length;n++)t.push(c(arguments[n]));return t.join(" ")}n=1;for(var i=arguments,o=i.length,a=String(e).replace(r,(function(e){if("%%"===e)return"%";if(n>=o)return e;switch(e){case"%s":return String(i[n++]);case"%d":return Number(i[n++]);case"%j":try{return JSON.stringify(i[n++])}catch(e){return"[Circular]"}default:return e}})),s=i[n];n<o;s=i[++n])g(s)||!_(s)?a+=" "+s:a+=" "+c(s);return a},t.deprecate=function(n,i){if(void 0!==e&&!0===e.noDeprecation)return n;if(void 0===e)return function(){return t.deprecate(n,i).apply(this,arguments)};var r=!1;return function(){if(!r){if(e.throwDeprecation)throw new Error(i);e.traceDeprecation?console.trace(i):console.error(i),r=!0}return n.apply(this,arguments)}};var o,a={};function c(e,n){var i={seen:[],stylize:u};return arguments.length>=3&&(i.depth=arguments[2]),arguments.length>=4&&(i.colors=arguments[3]),p(n)?i.showHidden=n:n&&t._extend(i,n),b(i.showHidden)&&(i.showHidden=!1),b(i.depth)&&(i.depth=2),b(i.colors)&&(i.colors=!1),b(i.customInspect)&&(i.customInspect=!0),i.colors&&(i.stylize=s),d(i,e,i.depth)}function s(e,t){var n=c.styles[t];return n?"["+c.colors[n][0]+"m"+e+"["+c.colors[n][1]+"m":e}function u(e,t){return e}function d(e,n,i){if(e.customInspect&&n&&w(n.inspect)&&n.inspect!==t.inspect&&(!n.constructor||n.constructor.prototype!==n)){var r=n.inspect(i,e);return y(r)||(r=d(e,r,i)),r}var o=function(e,t){if(b(t))return e.stylize("undefined","undefined");if(y(t)){var n="'"+JSON.stringify(t).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return e.stylize(n,"string")}if(m(t))return e.stylize(""+t,"number");if(p(t))return e.stylize(""+t,"boolean");if(g(t))return e.stylize("null","null")}(e,n);if(o)return o;var a=Object.keys(n),c=function(e){var t={};return e.forEach((function(e,n){t[e]=!0})),t}(a);if(e.showHidden&&(a=Object.getOwnPropertyNames(n)),D(n)&&(a.indexOf("message")>=0||a.indexOf("description")>=0))return l(n);if(0===a.length){if(w(n)){var s=n.name?": "+n.name:"";return e.stylize("[Function"+s+"]","special")}if(v(n))return e.stylize(RegExp.prototype.toString.call(n),"regexp");if(x(n))return e.stylize(Date.prototype.toString.call(n),"date");if(D(n))return l(n)}var u,_="",U=!1,T=["{","}"];(h(n)&&(U=!0,T=["[","]"]),w(n))&&(_=" [Function"+(n.name?": "+n.name:"")+"]");return v(n)&&(_=" "+RegExp.prototype.toString.call(n)),x(n)&&(_=" "+Date.prototype.toUTCString.call(n)),D(n)&&(_=" "+l(n)),0!==a.length||U&&0!=n.length?i<0?v(n)?e.stylize(RegExp.prototype.toString.call(n),"regexp"):e.stylize("[Object]","special"):(e.seen.push(n),u=U?function(e,t,n,i,r){for(var o=[],a=0,c=t.length;a<c;++a)C(t,String(a))?o.push(f(e,t,n,i,String(a),!0)):o.push("");return r.forEach((function(r){r.match(/^\d+$/)||o.push(f(e,t,n,i,r,!0))})),o}(e,n,i,c,a):a.map((function(t){return f(e,n,i,c,t,U)})),e.seen.pop(),function(e,t,n){if(e.reduce((function(e,t){return t.indexOf("\n")>=0&&0,e+t.replace(/\u001b\[\d\d?m/g,"").length+1}),0)>60)return n[0]+(""===t?"":t+"\n ")+" "+e.join(",\n  ")+" "+n[1];return n[0]+t+" "+e.join(", ")+" "+n[1]}(u,_,T)):T[0]+_+T[1]}function l(e){return"["+Error.prototype.toString.call(e)+"]"}function f(e,t,n,i,r,o){var a,c,s;if((s=Object.getOwnPropertyDescriptor(t,r)||{value:t[r]}).get?c=s.set?e.stylize("[Getter/Setter]","special"):e.stylize("[Getter]","special"):s.set&&(c=e.stylize("[Setter]","special")),C(i,r)||(a="["+r+"]"),c||(e.seen.indexOf(s.value)<0?(c=g(n)?d(e,s.value,null):d(e,s.value,n-1)).indexOf("\n")>-1&&(c=o?c.split("\n").map((function(e){return"  "+e})).join("\n").substr(2):"\n"+c.split("\n").map((function(e){return"   "+e})).join("\n")):c=e.stylize("[Circular]","special")),b(a)){if(o&&r.match(/^\d+$/))return c;(a=JSON.stringify(""+r)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(a=a.substr(1,a.length-2),a=e.stylize(a,"name")):(a=a.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),a=e.stylize(a,"string"))}return a+": "+c}function h(e){return Array.isArray(e)}function p(e){return"boolean"==typeof e}function g(e){return null===e}function m(e){return"number"==typeof e}function y(e){return"string"==typeof e}function b(e){return void 0===e}function v(e){return _(e)&&"[object RegExp]"===U(e)}function _(e){return"object"==typeof e&&null!==e}function x(e){return _(e)&&"[object Date]"===U(e)}function D(e){return _(e)&&("[object Error]"===U(e)||e instanceof Error)}function w(e){return"function"==typeof e}function U(e){return Object.prototype.toString.call(e)}function T(e){return e<10?"0"+e.toString(10):e.toString(10)}t.debuglog=function(n){if(b(o)&&(o=e.env.NODE_DEBUG||""),n=n.toUpperCase(),!a[n])if(new RegExp("\\b"+n+"\\b","i").test(o)){var i=e.pid;a[n]=function(){var e=t.format.apply(t,arguments);console.error("%s %d: %s",n,i,e)}}else a[n]=function(){};return a[n]},t.inspect=c,c.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},c.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},t.isArray=h,t.isBoolean=p,t.isNull=g,t.isNullOrUndefined=function(e){return null==e},t.isNumber=m,t.isString=y,t.isSymbol=function(e){return"symbol"==typeof e},t.isUndefined=b,t.isRegExp=v,t.isObject=_,t.isDate=x,t.isError=D,t.isFunction=w,t.isPrimitive=function(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e},t.isBuffer=n(459);var E=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function k(){var e=new Date,t=[T(e.getHours()),T(e.getMinutes()),T(e.getSeconds())].join(":");return[e.getDate(),E[e.getMonth()],t].join(" ")}function C(e,t){return Object.prototype.hasOwnProperty.call(e,t)}t.log=function(){console.log("%s - %s",k(),t.format.apply(t,arguments))},t.inherits=n(460),t._extend=function(e,t){if(!t||!_(t))return e;for(var n=Object.keys(t),i=n.length;i--;)e[n[i]]=t[n[i]];return e};var S="undefined"!=typeof Symbol?Symbol("util.promisify.custom"):void 0;function F(e,t){if(!e){var n=new Error("Promise was rejected with a falsy value");n.reason=e,e=n}return t(e)}t.promisify=function(e){if("function"!=typeof e)throw new TypeError('The "original" argument must be of type Function');if(S&&e[S]){var t;if("function"!=typeof(t=e[S]))throw new TypeError('The "util.promisify.custom" argument must be of type Function');return Object.defineProperty(t,S,{value:t,enumerable:!1,writable:!1,configurable:!0}),t}function t(){for(var t,n,i=new Promise((function(e,i){t=e,n=i})),r=[],o=0;o<arguments.length;o++)r.push(arguments[o]);r.push((function(e,i){e?n(e):t(i)}));try{e.apply(this,r)}catch(e){n(e)}return i}return Object.setPrototypeOf(t,Object.getPrototypeOf(e)),S&&Object.defineProperty(t,S,{value:t,enumerable:!1,writable:!1,configurable:!0}),Object.defineProperties(t,i(e))},t.promisify.custom=S,t.callbackify=function(t){if("function"!=typeof t)throw new TypeError('The "original" argument must be of type Function');function n(){for(var n=[],i=0;i<arguments.length;i++)n.push(arguments[i]);var r=n.pop();if("function"!=typeof r)throw new TypeError("The last argument must be of type Function");var o=this,a=function(){return r.apply(o,arguments)};t.apply(this,n).then((function(t){e.nextTick(a,null,t)}),(function(t){e.nextTick(F,t,a)}))}return Object.setPrototypeOf(n,Object.getPrototypeOf(t)),Object.defineProperties(n,i(t)),n}}).call(this,n(18))},function(e,t){e.exports=function(e){return e&&"object"==typeof e&&"function"==typeof e.copy&&"function"==typeof e.fill&&"function"==typeof e.readUInt8}},function(e,t){"function"==typeof Object.create?e.exports=function(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:e.exports=function(e,t){e.super_=t;var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}},function(e,t,n){var i=n(285),r=n(104);function o(e){function t(){return e.map((function(e){return e.name}))}return{apply:function(t){for(var n,o,a;;){if(a=t.remaining(),!(n=i.firstOf("infix",e.map((function(e){return e.rule})))(a)).isSuccess())return n.isFailure()?t:n;o=t.source().to(n.source()),t=r.success(n.value()(t.value(),o),n.remaining(),o)}},untilExclusive:function(n){return new o(e.slice(0,t().indexOf(n)))},untilInclusive:function(n){return new o(e.slice(0,t().indexOf(n)+1))}}}t.parser=function(e,t,n){var r={rule:function(){return u(c)},leftAssociative:function(e){return u(c.untilExclusive(e))},rightAssociative:function(e){return u(c.untilInclusive(e))}},c=new o(n.map((function(e){return{name:e.name,rule:a(e.ruleBuilder.bind(null,r))}}))),s=i.firstOf(e,t);function u(e){return d.bind(null,e)}function d(e,t){var n=s(t);return n.isSuccess()?e.apply(n):n}return r},t.infix=function(e,n){return{name:e,ruleBuilder:n,map:function(i){return t.infix(e,(function(e){var t=n(e);return function(e){return t(e).map((function(e){return function(t,n){return i(t,e,n)}}))}}))}}};var a=function(e){var t;return function(n){return t||(t=e()),t(n)}}},function(e,t,n){var i=n(288),r=n(287);t.RegexTokeniser=function(e){function t(t,n,r){for(var o=0;o<e.length;o++){var a=e[o].regex;a.lastIndex=n;var c=a.exec(t);if(c){var s=n+c[0].length;if(c.index===n&&s>n){var u=c[1];return{token:new i(e[o].name,u,r.range(n,s)),endIndex:s}}}}s=n+1;return{token:new i("unrecognisedCharacter",t.substring(n,s),r.range(n,s)),endIndex:s}}function n(e,t){return new i("end",null,t.range(e.length,e.length))}return e=e.map((function(e){return{name:e.name,regex:new RegExp(e.regex.source,"g")}})),{tokenise:function(e,i){var o=new r(e,i),a=0,c=[];for(;a<e.length;){var s=t(e,a,o);a=s.endIndex,c.push(s.token)}return c.push(n(e,o)),c}}}},function(e,t){function n(e,t){t=t||{},this._elementType=e,this._styleId=t.styleId,this._styleName=t.styleName,t.list&&(this._listIndex=t.list.levelIndex,this._listIsOrdered=t.list.isOrdered)}function i(e,t){return e.toUpperCase()===t.toUpperCase()}function r(e,t){return 0===t.toUpperCase().indexOf(e.toUpperCase())}t.paragraph=function(e){return new n("paragraph",e)},t.run=function(e){return new n("run",e)},t.table=function(e){return new n("table",e)},t.bold=new n("bold"),t.italic=new n("italic"),t.underline=new n("underline"),t.strikethrough=new n("strikethrough"),t.allCaps=new n("allCaps"),t.smallCaps=new n("smallCaps"),t.commentReference=new n("commentReference"),t.lineBreak=new n("break",{breakType:"line"}),t.pageBreak=new n("break",{breakType:"page"}),t.columnBreak=new n("break",{breakType:"column"}),t.equalTo=function(e){return{operator:i,operand:e}},t.startsWith=function(e){return{operator:r,operand:e}},n.prototype.matches=function(e){return e.type===this._elementType&&(void 0===this._styleId||e.styleId===this._styleId)&&(void 0===this._styleName||e.styleName&&this._styleName.operator(this._styleName.operand,e.styleName))&&(void 0===this._listIndex||function(e,t,n){return e.numbering&&e.numbering.level==t&&e.numbering.isOrdered==n}(e,this._listIndex,this._listIsOrdered))&&(void 0===this._breakType||this._breakType===e.breakType)}},function(e,t,n){var i=n(284).RegexTokeniser;t.tokenise=function(e){return new i([{name:"identifier",regex:new RegExp("((?:[a-zA-Z\\-_]|\\\\.)(?:(?:[a-zA-Z\\-_]|\\\\.)|[0-9])*)")},{name:"dot",regex:/\./},{name:"colon",regex:/:/},{name:"gt",regex:/>/},{name:"whitespace",regex:/\s+/},{name:"arrow",regex:/=>/},{name:"equals",regex:/=/},{name:"startsWith",regex:/\^=/},{name:"open-paren",regex:/\(/},{name:"close-paren",regex:/\)/},{name:"open-square-bracket",regex:/\[/},{name:"close-square-bracket",regex:/\]/},{name:"string",regex:new RegExp("'((?:\\\\.|[^'])*)'")},{name:"unterminated-string",regex:new RegExp("'((?:\\\\.|[^'])*)")},{name:"integer",regex:/([0-9]+)/},{name:"choice",regex:/\|/},{name:"bang",regex:/(!)/}]).tokenise(e)}},function(e,t,n){t.readOptions=function(e){return e=e||{},i.extend({},o,e,{customStyleMap:a(e.styleMap),readStyleMap:function(){var e=this.customStyleMap;return this.includeEmbeddedStyleMap&&(e=e.concat(a(this.embeddedStyleMap))),this.includeDefaultStyleMap&&(e=e.concat(r)),e}})};var i=n(7),r=t._defaultStyleMap=["p.Heading1 => h1:fresh","p.Heading2 => h2:fresh","p.Heading3 => h3:fresh","p.Heading4 => h4:fresh","p.Heading5 => h5:fresh","p.Heading6 => h6:fresh","p[style-name='Heading 1'] => h1:fresh","p[style-name='Heading 2'] => h2:fresh","p[style-name='Heading 3'] => h3:fresh","p[style-name='Heading 4'] => h4:fresh","p[style-name='Heading 5'] => h5:fresh","p[style-name='Heading 6'] => h6:fresh","p[style-name='heading 1'] => h1:fresh","p[style-name='heading 2'] => h2:fresh","p[style-name='heading 3'] => h3:fresh","p[style-name='heading 4'] => h4:fresh","p[style-name='heading 5'] => h5:fresh","p[style-name='heading 6'] => h6:fresh","r[style-name='Strong'] => strong","p[style-name='footnote text'] => p:fresh","r[style-name='footnote reference'] =>","p[style-name='endnote text'] => p:fresh","r[style-name='endnote reference'] =>","p[style-name='annotation text'] => p:fresh","r[style-name='annotation reference'] =>","p[style-name='Footnote'] => p:fresh","r[style-name='Footnote anchor'] =>","p[style-name='Endnote'] => p:fresh","r[style-name='Endnote anchor'] =>","p:unordered-list(1) => ul > li:fresh","p:unordered-list(2) => ul|ol > li > ul > li:fresh","p:unordered-list(3) => ul|ol > li > ul|ol > li > ul > li:fresh","p:unordered-list(4) => ul|ol > li > ul|ol > li > ul|ol > li > ul > li:fresh","p:unordered-list(5) => ul|ol > li > ul|ol > li > ul|ol > li > ul|ol > li > ul > li:fresh","p:ordered-list(1) => ol > li:fresh","p:ordered-list(2) => ul|ol > li > ol > li:fresh","p:ordered-list(3) => ul|ol > li > ul|ol > li > ol > li:fresh","p:ordered-list(4) => ul|ol > li > ul|ol > li > ul|ol > li > ol > li:fresh","p:ordered-list(5) => ul|ol > li > ul|ol > li > ul|ol > li > ul|ol > li > ol > li:fresh","r[style-name='Hyperlink'] =>","p[style-name='Normal'] => p:fresh"],o=t._standardOptions={transformDocument:function(e){return e},includeDefaultStyleMap:!0,includeEmbeddedStyleMap:!0};function a(e){return e?i.isString(e)?e.split("\n").map((function(e){return e.trim()})).filter((function(e){return""!==e&&"#"!==e.charAt(0)})):e:[]}},function(e,t,n){var i=n(27),r=n(276);t.openZip=function(e){return e.arrayBuffer?i.resolve(r.openArrayBuffer(e.arrayBuffer)):i.reject(new Error("Could not find file in options"))}},function(e,t,n){var i=n(7);function r(e,t){return o((function(n){return n.type===e?t(n):n}))}function o(e){return function t(n){if(n.children){var r=i.map(n.children,t);n=i.extend(n,{children:r})}return e(n)}}function a(e){var t=[];return function e(t,n){t.children&&t.children.forEach((function(t){e(t,n),n(t)}))}(e,(function(e){t.push(e)})),t}t.paragraph=function(e){return r("paragraph",e)},t.run=function(e){return r("run",e)},t._elements=o,t.getDescendantsOfType=function(e,t){return a(e).filter((function(e){return e.type===t}))},t.getDescendants=a},function(e,t,n){var i=n(72),r=n(73);t.element=function(e){return function(t){return r.elementWithTag(i.element(e),[t])}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.dashboardState=t.ShiftSelectionManager=void 0;t.ShiftSelectionManager=class{constructor(){this.prevSelection=[],this.reset()}setStart(e){this.reset(),this.start=Math.max(e,0)}setEnd(e){this.end=e}reset(){this.start=0,this.end=-1,this.prevSelection.splice(0)}getPrevSelection(){return this.prevSelection}getSelection(e){let t,n;if(-1===this.end)return[];this.end<this.start?(t=this.end,n=this.start+1):(t=this.start,n=this.end+1);const i=Array.from({length:n-t},(e,n)=>n+t).filter(t=>!e[t]);return this.prevSelection=i,i}},t.dashboardState=function(){let e=[],t=[],n=[],i=null;function r(e){return e&&(i=e),i}function o(){return e.filter((e,n)=>t[n])}return{root:r,setEntries:function(n){e=n,t=Array(n.length).fill(!1)},getEntries:function(){return e},getIndexByEntryName:function(t){return e.findIndex(e=>e.name===t)},setSelection:function(e,n){t[e]=n},getSelection:function(){return t},resetSelection:function(){t.fill(!1)},setFolderPath:function(e){n=e},getFolderPath:function(){return n},getFolderPathNames:function(){return n.map(e=>e.name)},getFolderPathByNames:function(e){let t=r();e=e.slice(1);for(const n of e){const e=t.children.find(e=>e.name===n);if(!e||"folder"!==e.type)return void console.debug("failed to find folder: ",n);t=e}return t},getParentFolder:function(){return n.at(-1)},getTrashFolder:function(){return r().children.filter(e=>"trash"===e.type)[0]},getSelectedEntries:o,getSelectedFolders:function(){return o().filter(e=>"folder"===e.type)},getSelectedTrash:function(){return o().filter(e=>"trash"===e.type)},getSelectedFiles:function(){return o().filter(e=>"file"===e.type)},isInTrash:function(){return n.some(e=>"trash"===e.type)}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.InitUploadArea=void 0;const i=n(48),r=n(471),o=n(272);t.InitUploadArea=function(e){const t=new i.ModalWindow;t.setModalWindowView(i.ModalWindowView.DOCUMENT_UPLOAD),t.openModalWindow(),document.querySelector("#upload_button").addEventListener("click",()=>async function(e,t){const n=document.querySelector("#uploading_spinner");n.classList.add("visible"),(0,r.handleUploadAllDocuments)(t).then(()=>{setTimeout(async()=>{await(0,o.updateDashboard)(),n.classList.remove("visible"),e.hideModalWindow()},2e3)}).catch(t=>{console.log("One or more uploads rejected: ",t),setTimeout(async()=>{await(0,o.updateDashboard)(),n.classList.remove("visible"),e.hideModalWindow()},2e3)})}(t,e));const n=document.createElement("input");n.type="file",n.multiple=!0,n.addEventListener("change",(function(){const e=n.files,t=Array.from(e),i=(0,r.addNewFiles)(t);if(0!==i.length){const e=i.map(e=>e.name);window.alert("The following files are not .csv or .xlsx files: \n\n"+e.join("\n"))}n.value=null}));const a=document.querySelector("#initial_upload_area");a.onclick=()=>n.click(),a.ondragleave=()=>a.classList.remove("over"),a.ondragover=e=>{e.stopPropagation(),e.preventDefault(),a.classList.add("over"),e.dataTransfer.dropEffect="copy"},a.ondrop=e=>{e.stopPropagation(),e.preventDefault(),a.classList.remove("over");const t=e.dataTransfer.files,n=Array.from(t),i=(0,r.addNewFiles)(n);if(0!==i.length){const e=i.map(e=>e.name);window.alert("The following files are not .csv or .xlsx files: \n\n"+e.join("\n"))}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.fnConflictHandler=t.formatFilename=t.handleUploadAllDocuments=t.addNewFiles=void 0;const i=n(105),r=n(472),o=n(99),a=n(46),c=r.default.getInstance();function s(e,t){const n=Math.floor(t/2),i=e.length;return i<=t?e:`${e.substring(0,n-1)}...${e.substring(i-n+2,i)}`}function u(e,t){let n=e,i=1;for(;t.includes(n);)n=`${e}(${i})`,i++;return n}t.addNewFiles=function(e){const t=document.querySelector("#uploading_list"),n=[];return e.forEach(e=>{const i=e.name.split(".").pop();if(["csv","xlsx","doc","docx"].includes(i)){const n=function(e){const t=document.createElement("div");t.className="upload_item_container";const n=document.createElement("div");n.innerText=s(e,50),n.className="upload_item_name";const i=document.createElement("img");return i.className="upload_del_btn",i.src="/Cress-gh/assets/img/remove-upload-doc.svg",i.title="delete",t.appendChild(n),t.appendChild(i),i.addEventListener("click",(function(){t.remove()})),t}(e.name);t.appendChild(n),c.addFile(e),c.addDoc(e.name,i,!1)}else n.push(e)}),n},t.handleUploadAllDocuments=async function(e){const t=c.getDocs().map(async([t,n,r])=>{const c=(0,i.v4)();return await async function(e,t,n,i,r){const c=u(t,a.FileSystemTools.getAllNames(r));return(0,o.createJson)(n,i).then(t=>(0,o.addDocument)(e,c,t)).then(n=>{if(n){const t=(new Date).toLocaleString(),n=a.FileSystemTools.createFile(c,e),i=a.FileSystemTools.addMetadata(n,{created_on:t});return a.FileSystemTools.addEntry(i,r)}return console.log("failed to upload doc: "+t),!1})}(c,t,n,r,e)});return t.map(e=>Promise.resolve(e).then(e=>({status:"fulfilled",value:e}),e=>({status:"rejected",reason:e}))),c.clear(),Promise.all(t)},t.formatFilename=s,t.fnConflictHandler=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class i{constructor(){this.allFiles=new Map,this.docs=new Array}static getInstance(){return i.instance||(i.instance=new i),i.instance}addFile(e){if(this.allFiles.has(e.name)){const t={file:e,count:this.getFileCount(e.name)+1};this.allFiles.set(e.name,t)}else{const t={file:e,count:1};this.allFiles.set(e.name,t)}}getFile(e){if(this.allFiles.has(e))return this.allFiles.get(e).file}removeFile(e){const t=this.getFileCount(e);if(0!==t)if(1===t)this.allFiles.delete(e);else{const n={file:this.allFiles.get(e).file,count:t-1};this.allFiles.set(e,n)}}getFileCount(e){return this.allFiles.has(e)?this.allFiles.get(e).count:0}addDoc(e,t,n){const i={filename:e,type:t,isCreated:n};this.docs.push(i)}isCreatedDoc(e){const t=this.docs.find(t=>t.filename===e);return!!t&&t.isCreated}removeDoc(e){const t=this.docs.findIndex(t=>t.filename===e);this.docs.splice(t,1)}getDocs(){return this.docs.map(e=>{const t=e.filename,n=e.type;return[t,this.getFile(t),n]})}clear(){this.allFiles.clear(),this.docs.splice(0)}print(){console.log(this.allFiles),console.log(this.docs)}}t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.trashEntryOptions=t.trashFolderOptions=t.multiFolderOptions=t.singleFolderOptions=t.folderAndFileOptions=t.multiFileOptions=t.singleFileOptions=t.defaultOptions=void 0,t.defaultOptions='<div id="cm-upload-doc-btn" class="context-menu-item-wrapper">\n        <div class="context-menu-item">Upload document</div>\n        <img class="context-menu-item-icon" src="/Cress-gh/assets/img/new-doc.svg">\n    </div>\n    <div id="cm-new-folder-btn" class="context-menu-item-wrapper">\n        <div class="context-menu-item">New folder</div>\n        <img class="context-menu-item-icon" src="/Cress-gh/assets/img/new-folder.svg">\n    </div>',t.singleFileOptions='<div id="cm-open-btn" class="context-menu-item-wrapper">\n        <div class="context-menu-item">Open</div>\n        <img class="context-menu-item-icon" src="/Cress-gh/assets/img/open-doc.svg">\n    </div>\n    <div id="cm-remove-btn" class="context-menu-item-wrapper">\n        <div class="context-menu-item">Move to Trash</div>\n        <img class="context-menu-item-icon" src="/Cress-gh/assets/img/remove-doc.svg">\n    </div>\n    <div id="cm-rename-btn" class="context-menu-item-wrapper">\n        <div class="context-menu-item">Rename</div>\n        <img class="context-menu-item-icon" src="/Cress-gh/assets/img/rename-doc.svg">\n    </div>\n    <div id="cm-move-btn" class="context-menu-item-wrapper">\n        <div class="context-menu-item">Move</div>\n        <img class="context-menu-item-icon" src="/Cress-gh/assets/img/move-doc-icon.svg">\n    </div>',t.multiFileOptions='<div id="cm-open-btn" class="context-menu-item-wrapper">\n        <div class="context-menu-item">Open</div>\n        <img class="context-menu-item-icon" src="/Cress-gh/assets/img/open-doc.svg">\n    </div>\n    <div id="cm-remove-btn" class="context-menu-item-wrapper">\n        <div class="context-menu-item">Move to Trash</div>\n        <img class="context-menu-item-icon" src="/Cress-gh/assets/img/remove-doc.svg">\n    </div>\n    <div id="cm-move-btn" class="context-menu-item-wrapper">\n        <div class="context-menu-item">Move</div>\n        <img class="context-menu-item-icon" src="/Cress-gh/assets/img/move-doc-icon.svg">\n    </div>',t.folderAndFileOptions='<div id="cm-remove-btn" class="context-menu-item-wrapper">\n        <div class="context-menu-item">Delete</div>\n        <img class="context-menu-item-icon" src="/Cress-gh/assets/img/remove-doc.svg">\n    </div>\n    <div id="cm-move-btn" class="context-menu-item-wrapper">\n        <div class="context-menu-item">Move</div>\n        <img class="context-menu-item-icon" src="/Cress-gh/assets/img/move-doc-icon.svg">\n    </div>',t.singleFolderOptions='<div id="cm-open-btn" class="context-menu-item-wrapper">\n        <div class="context-menu-item">Open</div>\n        <img class="context-menu-item-icon" src="/Cress-gh/assets/img/open-doc.svg">\n    </div>\n    <div id="cm-remove-btn" class="context-menu-item-wrapper">\n        <div class="context-menu-item">Move to Trash</div>\n        <img class="context-menu-item-icon" src="/Cress-gh/assets/img/remove-doc.svg">\n    </div>\n    <div id="cm-rename-btn" class="context-menu-item-wrapper">\n        <div class="context-menu-item">Rename</div>\n        <img class="context-menu-item-icon" src="/Cress-gh/assets/img/rename-doc.svg">\n    </div>\n    <div id="cm-move-btn" class="context-menu-item-wrapper">\n        <div class="context-menu-item">Move</div>\n        <img class="context-menu-item-icon" src="/Cress-gh/assets/img/move-doc-icon.svg">\n    </div>',t.multiFolderOptions='<div id="cm-remove-btn" class="context-menu-item-wrapper">\n        <div class="context-menu-item">Move to Trash</div>\n        <img class="context-menu-item-icon" src="/Cress-gh/assets/img/remove-doc.svg">\n    </div>\n    <div id="cm-move-btn" class="context-menu-item-wrapper">\n        <div class="context-menu-item">Move</div>\n        <img class="context-menu-item-icon" src="/Cress-gh/assets/img/move-doc-icon.svg">\n    </div>',t.trashFolderOptions='<div id="cm-empty-trash-btn" class="context-menu-item-wrapper">\n        <div class="context-menu-item">Empty Trash</div>\n        <img class="context-menu-item-icon" src="/Cress-gh/assets/img/remove-doc.svg">\n    </div>',t.trashEntryOptions='<div id="cm-recover-btn" class="context-menu-item-wrapper">\n        <div class="context-menu-item">Put Back</div>\n        <img class="context-menu-item-icon" src="/Cress-gh/assets/img/recover-doc.svg">\n    </div>\n    <div id="cm-delete-btn" class="context-menu-item-wrapper">\n        <div class="context-menu-item">Delete</div>\n        <img class="context-menu-item-icon" src="/Cress-gh/assets/img/remove-doc.svg">\n    </div>'}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,